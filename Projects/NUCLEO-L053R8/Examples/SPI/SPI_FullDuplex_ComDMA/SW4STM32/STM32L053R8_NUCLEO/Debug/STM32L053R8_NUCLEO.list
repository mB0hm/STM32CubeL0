
STM32L053R8_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001598  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001658  08001658  00011658  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800167c  0800167c  0001167c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001680  08001680  00011680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  08001684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001a0  20000020  080016a4  00020020  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001c0  080016a4  000201c0  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008988  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000019b8  00000000  00000000  000289d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000036e4  00000000  00000000  0002a388  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000648  00000000  00000000  0002da70  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009d0  00000000  00000000  0002e0b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00012597  00000000  00000000  0002ea88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006ce1  00000000  00000000  0004101f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0007221d  00000000  00000000  00047d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000b9f1d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000010dc  00000000  00000000  000b9f98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001640 	.word	0x08001640

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08001640 	.word	0x08001640

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpioinitstruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000224:	2800      	cmp	r0, #0
 8000226:	d108      	bne.n	800023a <BSP_LED_Init+0x1a>
 8000228:	2401      	movs	r4, #1
 800022a:	4a0f      	ldr	r2, [pc, #60]	; (8000268 <BSP_LED_Init+0x48>)
 800022c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800022e:	4321      	orrs	r1, r4
 8000230:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000232:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000234:	4023      	ands	r3, r4
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	9b00      	ldr	r3, [sp, #0]

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = LED_PIN[Led];
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800023a:	2301      	movs	r3, #1
  gpioinitstruct.Pin = LED_PIN[Led];
 800023c:	2520      	movs	r5, #32
  gpioinitstruct.Pull = GPIO_NOPULL;
 800023e:	2600      	movs	r6, #0
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &gpioinitstruct);
 8000240:	4c0a      	ldr	r4, [pc, #40]	; (800026c <BSP_LED_Init+0x4c>)
 8000242:	0080      	lsls	r0, r0, #2
 8000244:	1824      	adds	r4, r4, r0
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000246:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(LED_PORT[Led], &gpioinitstruct);
 8000248:	a901      	add	r1, sp, #4
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800024a:	3302      	adds	r3, #2
  HAL_GPIO_Init(LED_PORT[Led], &gpioinitstruct);
 800024c:	6860      	ldr	r0, [r4, #4]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800024e:	9304      	str	r3, [sp, #16]
  gpioinitstruct.Pin = LED_PIN[Led];
 8000250:	9501      	str	r5, [sp, #4]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8000252:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(LED_PORT[Led], &gpioinitstruct);
 8000254:	f000 f9fa 	bl	800064c <HAL_GPIO_Init>

  /* Reset PIN to switch off the LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8000258:	0032      	movs	r2, r6
 800025a:	0029      	movs	r1, r5
 800025c:	6860      	ldr	r0, [r4, #4]
 800025e:	f000 fab1 	bl	80007c4 <HAL_GPIO_WritePin>
}
 8000262:	b006      	add	sp, #24
 8000264:	bd70      	pop	{r4, r5, r6, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	40021000 	.word	0x40021000
 800026c:	20000000 	.word	0x20000000

08000270 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000270:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8000272:	0083      	lsls	r3, r0, #2
 8000274:	4803      	ldr	r0, [pc, #12]	; (8000284 <BSP_LED_On+0x14>)
 8000276:	2201      	movs	r2, #1
 8000278:	18c0      	adds	r0, r0, r3
 800027a:	2120      	movs	r1, #32
 800027c:	6840      	ldr	r0, [r0, #4]
 800027e:	f000 faa1 	bl	80007c4 <HAL_GPIO_WritePin>
}
 8000282:	bd10      	pop	{r4, pc}
 8000284:	20000000 	.word	0x20000000

08000288 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000288:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800028a:	0083      	lsls	r3, r0, #2
 800028c:	4803      	ldr	r0, [pc, #12]	; (800029c <BSP_LED_Off+0x14>)
 800028e:	2200      	movs	r2, #0
 8000290:	18c0      	adds	r0, r0, r3
 8000292:	2120      	movs	r1, #32
 8000294:	6840      	ldr	r0, [r0, #4]
 8000296:	f000 fa95 	bl	80007c4 <HAL_GPIO_WritePin>
}
 800029a:	bd10      	pop	{r4, pc}
 800029c:	20000000 	.word	0x20000000

080002a0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	b087      	sub	sp, #28
  GPIO_InitTypeDef gpioinitstruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80002a4:	2800      	cmp	r0, #0
 80002a6:	d108      	bne.n	80002ba <BSP_PB_Init+0x1a>
 80002a8:	2504      	movs	r5, #4
 80002aa:	4a17      	ldr	r2, [pc, #92]	; (8000308 <BSP_PB_Init+0x68>)
 80002ac:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80002ae:	432c      	orrs	r4, r5
 80002b0:	62d4      	str	r4, [r2, #44]	; 0x2c
 80002b2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80002b4:	402b      	ands	r3, r5
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	9b00      	ldr	r3, [sp, #0]

  gpioinitstruct.Pin = BUTTON_PIN[Button];
 80002ba:	2380      	movs	r3, #128	; 0x80
 80002bc:	019b      	lsls	r3, r3, #6
 80002be:	9301      	str	r3, [sp, #4]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80002c0:	2400      	movs	r4, #0
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80002c2:	2301      	movs	r3, #1
  gpioinitstruct.Pull = GPIO_NOPULL;
 80002c4:	9403      	str	r4, [sp, #12]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80002c6:	9304      	str	r3, [sp, #16]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80002c8:	42a1      	cmp	r1, r4
 80002ca:	d109      	bne.n	80002e0 <BSP_PB_Init+0x40>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
  
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80002cc:	4b0f      	ldr	r3, [pc, #60]	; (800030c <BSP_PB_Init+0x6c>)
 80002ce:	0080      	lsls	r0, r0, #2
 80002d0:	1818      	adds	r0, r3, r0
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 80002d2:	9102      	str	r1, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80002d4:	6880      	ldr	r0, [r0, #8]
 80002d6:	a901      	add	r1, sp, #4
 80002d8:	f000 f9b8 	bl	800064c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 80002dc:	b007      	add	sp, #28
 80002de:	bd30      	pop	{r4, r5, pc}
  if(ButtonMode == BUTTON_MODE_EXTI)
 80002e0:	2901      	cmp	r1, #1
 80002e2:	d1fb      	bne.n	80002dc <BSP_PB_Init+0x3c>
    gpioinitstruct.Mode   = GPIO_MODE_IT_FALLING; 
 80002e4:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <BSP_PB_Init+0x70>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80002e6:	0080      	lsls	r0, r0, #2
    gpioinitstruct.Mode   = GPIO_MODE_IT_FALLING; 
 80002e8:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80002ea:	4b08      	ldr	r3, [pc, #32]	; (800030c <BSP_PB_Init+0x6c>)
 80002ec:	a901      	add	r1, sp, #4
 80002ee:	1818      	adds	r0, r3, r0
 80002f0:	6880      	ldr	r0, [r0, #8]
 80002f2:	f000 f9ab 	bl	800064c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0);
 80002f6:	0022      	movs	r2, r4
 80002f8:	210f      	movs	r1, #15
 80002fa:	2007      	movs	r0, #7
 80002fc:	f000 f888 	bl	8000410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000300:	2007      	movs	r0, #7
 8000302:	f000 f8af 	bl	8000464 <HAL_NVIC_EnableIRQ>
}
 8000306:	e7e9      	b.n	80002dc <BSP_PB_Init+0x3c>
 8000308:	40021000 	.word	0x40021000
 800030c:	20000000 	.word	0x20000000
 8000310:	10210000 	.word	0x10210000

08000314 <BSP_PB_GetState>:
  *   This parameter should be: BUTTON_USER
  * @retval Button state.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000314:	2180      	movs	r1, #128	; 0x80
{
 8000316:	b510      	push	{r4, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000318:	0083      	lsls	r3, r0, #2
 800031a:	4803      	ldr	r0, [pc, #12]	; (8000328 <BSP_PB_GetState+0x14>)
 800031c:	0189      	lsls	r1, r1, #6
 800031e:	18c0      	adds	r0, r0, r3
 8000320:	6880      	ldr	r0, [r0, #8]
 8000322:	f000 fa49 	bl	80007b8 <HAL_GPIO_ReadPin>
}
 8000326:	bd10      	pop	{r4, pc}
 8000328:	20000000 	.word	0x20000000

0800032c <GPIO_read_NSS_state>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER
  * @retval Button state.
  */
uint32_t GPIO_read_NSS_state(uint32_t nss_pin)
{
 800032c:	b510      	push	{r4, lr}
  return HAL_GPIO_ReadPin(GPIOB, nss_pin);
 800032e:	b281      	uxth	r1, r0
 8000330:	4801      	ldr	r0, [pc, #4]	; (8000338 <GPIO_read_NSS_state+0xc>)
 8000332:	f000 fa41 	bl	80007b8 <HAL_GPIO_ReadPin>
}
 8000336:	bd10      	pop	{r4, pc}
 8000338:	50000400 	.word	0x50000400

0800033c <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{    
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800033c:	2280      	movs	r2, #128	; 0x80
 800033e:	4b10      	ldr	r3, [pc, #64]	; (8000380 <SystemInit+0x44>)
 8000340:	0052      	lsls	r2, r2, #1
 8000342:	6819      	ldr	r1, [r3, #0]
 8000344:	430a      	orrs	r2, r1
 8000346:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000348:	68da      	ldr	r2, [r3, #12]
 800034a:	490e      	ldr	r1, [pc, #56]	; (8000384 <SystemInit+0x48>)
 800034c:	400a      	ands	r2, r1
 800034e:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000350:	681a      	ldr	r2, [r3, #0]
 8000352:	490d      	ldr	r1, [pc, #52]	; (8000388 <SystemInit+0x4c>)
 8000354:	400a      	ands	r2, r1
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000356:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000358:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800035a:	689a      	ldr	r2, [r3, #8]
 800035c:	438a      	bics	r2, r1
 800035e:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000360:	681a      	ldr	r2, [r3, #0]
 8000362:	490a      	ldr	r1, [pc, #40]	; (800038c <SystemInit+0x50>)
 8000364:	400a      	ands	r2, r1
 8000366:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000368:	68da      	ldr	r2, [r3, #12]
 800036a:	4909      	ldr	r1, [pc, #36]	; (8000390 <SystemInit+0x54>)
 800036c:	400a      	ands	r2, r1
 800036e:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000370:	2200      	movs	r2, #0
 8000372:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000374:	2280      	movs	r2, #128	; 0x80
 8000376:	4b07      	ldr	r3, [pc, #28]	; (8000394 <SystemInit+0x58>)
 8000378:	0512      	lsls	r2, r2, #20
 800037a:	609a      	str	r2, [r3, #8]
#endif
}
 800037c:	4770      	bx	lr
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	40021000 	.word	0x40021000
 8000384:	88ff400c 	.word	0x88ff400c
 8000388:	fef6fff6 	.word	0xfef6fff6
 800038c:	fffbffff 	.word	0xfffbffff
 8000390:	ff02ffff 	.word	0xff02ffff
 8000394:	e000ed00 	.word	0xe000ed00

08000398 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000398:	4770      	bx	lr
	...

0800039c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800039c:	21fa      	movs	r1, #250	; 0xfa
 800039e:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <HAL_InitTick+0x2c>)
{
 80003a0:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80003a2:	0089      	lsls	r1, r1, #2
{
 80003a4:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80003a6:	6818      	ldr	r0, [r3, #0]
 80003a8:	f7ff feae 	bl	8000108 <__udivsi3>
 80003ac:	f000 f864 	bl	8000478 <HAL_SYSTICK_Config>
 80003b0:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 80003b2:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80003b4:	2c00      	cmp	r4, #0
 80003b6:	d105      	bne.n	80003c4 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80003b8:	3802      	subs	r0, #2
 80003ba:	0022      	movs	r2, r4
 80003bc:	0029      	movs	r1, r5
 80003be:	f000 f827 	bl	8000410 <HAL_NVIC_SetPriority>
 80003c2:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 80003c4:	bd70      	pop	{r4, r5, r6, pc}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	2000000c 	.word	0x2000000c

080003cc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003cc:	2302      	movs	r3, #2
 80003ce:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <HAL_Init+0x24>)
{
 80003d0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003d2:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80003d4:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003d6:	430b      	orrs	r3, r1
 80003d8:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80003da:	f7ff ffdf 	bl	800039c <HAL_InitTick>
 80003de:	1e04      	subs	r4, r0, #0
 80003e0:	d103      	bne.n	80003ea <HAL_Init+0x1e>
    HAL_MspInit();
 80003e2:	f7ff ffd9 	bl	8000398 <HAL_MspInit>
}
 80003e6:	0020      	movs	r0, r4
 80003e8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80003ea:	2401      	movs	r4, #1
 80003ec:	e7fb      	b.n	80003e6 <HAL_Init+0x1a>
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	40022000 	.word	0x40022000

080003f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80003f4:	4a02      	ldr	r2, [pc, #8]	; (8000400 <HAL_IncTick+0xc>)
 80003f6:	6813      	ldr	r3, [r2, #0]
 80003f8:	3301      	adds	r3, #1
 80003fa:	6013      	str	r3, [r2, #0]
}
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	2000015c 	.word	0x2000015c

08000404 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000404:	4b01      	ldr	r3, [pc, #4]	; (800040c <HAL_GetTick+0x8>)
 8000406:	6818      	ldr	r0, [r3, #0]
}
 8000408:	4770      	bx	lr
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	2000015c 	.word	0x2000015c

08000410 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000410:	b530      	push	{r4, r5, lr}
 8000412:	25ff      	movs	r5, #255	; 0xff
 8000414:	2403      	movs	r4, #3
 8000416:	002a      	movs	r2, r5
 8000418:	b2c3      	uxtb	r3, r0
 800041a:	401c      	ands	r4, r3
 800041c:	00e4      	lsls	r4, r4, #3
 800041e:	40a2      	lsls	r2, r4
 8000420:	0189      	lsls	r1, r1, #6
 8000422:	4029      	ands	r1, r5
 8000424:	43d2      	mvns	r2, r2
 8000426:	40a1      	lsls	r1, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000428:	2800      	cmp	r0, #0
 800042a:	da0b      	bge.n	8000444 <HAL_NVIC_SetPriority+0x34>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800042c:	200f      	movs	r0, #15
 800042e:	4003      	ands	r3, r0
 8000430:	3b08      	subs	r3, #8
 8000432:	480a      	ldr	r0, [pc, #40]	; (800045c <HAL_NVIC_SetPriority+0x4c>)
 8000434:	089b      	lsrs	r3, r3, #2
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	181b      	adds	r3, r3, r0
 800043a:	69d8      	ldr	r0, [r3, #28]
 800043c:	4002      	ands	r2, r0
 800043e:	4311      	orrs	r1, r2
 8000440:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <HAL_NVIC_SetPriority+0x50>)
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000446:	0880      	lsrs	r0, r0, #2
 8000448:	0080      	lsls	r0, r0, #2
 800044a:	18c0      	adds	r0, r0, r3
 800044c:	23c0      	movs	r3, #192	; 0xc0
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	58c4      	ldr	r4, [r0, r3]
 8000452:	4022      	ands	r2, r4
 8000454:	4311      	orrs	r1, r2
 8000456:	50c1      	str	r1, [r0, r3]
 8000458:	e7f3      	b.n	8000442 <HAL_NVIC_SetPriority+0x32>
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	e000ed00 	.word	0xe000ed00
 8000460:	e000e100 	.word	0xe000e100

08000464 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000464:	231f      	movs	r3, #31
 8000466:	4018      	ands	r0, r3
 8000468:	3b1e      	subs	r3, #30
 800046a:	4083      	lsls	r3, r0
 800046c:	4a01      	ldr	r2, [pc, #4]	; (8000474 <HAL_NVIC_EnableIRQ+0x10>)
 800046e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000470:	4770      	bx	lr
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	e000e100 	.word	0xe000e100

08000478 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000478:	4a09      	ldr	r2, [pc, #36]	; (80004a0 <HAL_SYSTICK_Config+0x28>)
 800047a:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 800047c:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800047e:	4293      	cmp	r3, r2
 8000480:	d80d      	bhi.n	800049e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000482:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000484:	4a07      	ldr	r2, [pc, #28]	; (80004a4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000486:	4808      	ldr	r0, [pc, #32]	; (80004a8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000488:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800048a:	6a03      	ldr	r3, [r0, #32]
 800048c:	0609      	lsls	r1, r1, #24
 800048e:	021b      	lsls	r3, r3, #8
 8000490:	0a1b      	lsrs	r3, r3, #8
 8000492:	430b      	orrs	r3, r1
 8000494:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000496:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000498:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800049a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800049c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800049e:	4770      	bx	lr
 80004a0:	00ffffff 	.word	0x00ffffff
 80004a4:	e000e010 	.word	0xe000e010
 80004a8:	e000ed00 	.word	0xe000ed00

080004ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80004ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ae:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80004b0:	2001      	movs	r0, #1
  if(hdma == NULL)
 80004b2:	2c00      	cmp	r4, #0
 80004b4:	d035      	beq.n	8000522 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80004b6:	6825      	ldr	r5, [r4, #0]
 80004b8:	4b1a      	ldr	r3, [pc, #104]	; (8000524 <HAL_DMA_Init+0x78>)
 80004ba:	2114      	movs	r1, #20
 80004bc:	18e8      	adds	r0, r5, r3
 80004be:	f7ff fe23 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80004c2:	4b19      	ldr	r3, [pc, #100]	; (8000528 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80004c4:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 80004c6:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80004c8:	2302      	movs	r3, #2
 80004ca:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80004cc:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 80004ce:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80004d0:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80004d2:	4b16      	ldr	r3, [pc, #88]	; (800052c <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80004d4:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80004d6:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 80004d8:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004da:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 80004dc:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004de:	433b      	orrs	r3, r7
 80004e0:	6967      	ldr	r7, [r4, #20]
 80004e2:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004e4:	69a7      	ldr	r7, [r4, #24]
 80004e6:	433b      	orrs	r3, r7
 80004e8:	69e7      	ldr	r7, [r4, #28]
 80004ea:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 80004ec:	6a27      	ldr	r7, [r4, #32]
 80004ee:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 80004f0:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80004f2:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	01db      	lsls	r3, r3, #7
 80004f8:	4299      	cmp	r1, r3
 80004fa:	d00c      	beq.n	8000516 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80004fc:	251c      	movs	r5, #28
 80004fe:	4028      	ands	r0, r5
 8000500:	3d0d      	subs	r5, #13
 8000502:	4085      	lsls	r5, r0
 8000504:	490a      	ldr	r1, [pc, #40]	; (8000530 <HAL_DMA_Init+0x84>)
 8000506:	680b      	ldr	r3, [r1, #0]
 8000508:	43ab      	bics	r3, r5
 800050a:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800050c:	6863      	ldr	r3, [r4, #4]
 800050e:	680d      	ldr	r5, [r1, #0]
 8000510:	4083      	lsls	r3, r0
 8000512:	432b      	orrs	r3, r5
 8000514:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000516:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000518:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800051a:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800051c:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 800051e:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8000520:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8000522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000524:	bffdfff8 	.word	0xbffdfff8
 8000528:	40020000 	.word	0x40020000
 800052c:	ffff800f 	.word	0xffff800f
 8000530:	400200a8 	.word	0x400200a8

08000534 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000536:	1d44      	adds	r4, r0, #5
 8000538:	7fe6      	ldrb	r6, [r4, #31]
{
 800053a:	0005      	movs	r5, r0
  __HAL_LOCK(hdma);
 800053c:	2002      	movs	r0, #2
 800053e:	2e01      	cmp	r6, #1
 8000540:	d02b      	beq.n	800059a <HAL_DMA_Start_IT+0x66>
 8000542:	3801      	subs	r0, #1
 8000544:	77e0      	strb	r0, [r4, #31]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000546:	1da8      	adds	r0, r5, #6
 8000548:	7fc6      	ldrb	r6, [r0, #31]
 800054a:	4684      	mov	ip, r0
 800054c:	b2f6      	uxtb	r6, r6
 800054e:	2002      	movs	r0, #2
 8000550:	2700      	movs	r7, #0
 8000552:	2e01      	cmp	r6, #1
 8000554:	d12c      	bne.n	80005b0 <HAL_DMA_Start_IT+0x7c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000556:	4664      	mov	r4, ip
 8000558:	77e0      	strb	r0, [r4, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800055a:	682c      	ldr	r4, [r5, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800055c:	63ef      	str	r7, [r5, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800055e:	6820      	ldr	r0, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000560:	371c      	adds	r7, #28
    __HAL_DMA_DISABLE(hdma);
 8000562:	43b0      	bics	r0, r6
 8000564:	6020      	str	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000566:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8000568:	9001      	str	r0, [sp, #4]
 800056a:	6c68      	ldr	r0, [r5, #68]	; 0x44
 800056c:	4007      	ands	r7, r0
 800056e:	40be      	lsls	r6, r7
 8000570:	9801      	ldr	r0, [sp, #4]
 8000572:	6046      	str	r6, [r0, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000574:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000576:	68ab      	ldr	r3, [r5, #8]
 8000578:	6828      	ldr	r0, [r5, #0]
 800057a:	2b10      	cmp	r3, #16
 800057c:	d10e      	bne.n	800059c <HAL_DMA_Start_IT+0x68>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800057e:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000580:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000582:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000584:	2b00      	cmp	r3, #0
 8000586:	d00c      	beq.n	80005a2 <HAL_DMA_Start_IT+0x6e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000588:	230e      	movs	r3, #14
 800058a:	6822      	ldr	r2, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800058c:	4313      	orrs	r3, r2
 800058e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000590:	2301      	movs	r3, #1
 8000592:	6802      	ldr	r2, [r0, #0]
 8000594:	4313      	orrs	r3, r2
 8000596:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000598:	2000      	movs	r0, #0
}
 800059a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800059c:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800059e:	60e2      	str	r2, [r4, #12]
 80005a0:	e7ef      	b.n	8000582 <HAL_DMA_Start_IT+0x4e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80005a2:	2204      	movs	r2, #4
 80005a4:	6823      	ldr	r3, [r4, #0]
 80005a6:	4393      	bics	r3, r2
 80005a8:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80005aa:	6822      	ldr	r2, [r4, #0]
 80005ac:	230a      	movs	r3, #10
 80005ae:	e7ed      	b.n	800058c <HAL_DMA_Start_IT+0x58>
    __HAL_UNLOCK(hdma);
 80005b0:	77e7      	strb	r7, [r4, #31]
 80005b2:	e7f2      	b.n	800059a <HAL_DMA_Start_IT+0x66>

080005b4 <HAL_DMA_IRQHandler>:
{
 80005b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80005b6:	221c      	movs	r2, #28
 80005b8:	2704      	movs	r7, #4
 80005ba:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80005bc:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80005be:	4032      	ands	r2, r6
 80005c0:	003e      	movs	r6, r7
 80005c2:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80005c4:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80005c6:	6803      	ldr	r3, [r0, #0]
 80005c8:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80005ca:	4235      	tst	r5, r6
 80005cc:	d00d      	beq.n	80005ea <HAL_DMA_IRQHandler+0x36>
 80005ce:	423c      	tst	r4, r7
 80005d0:	d00b      	beq.n	80005ea <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	0692      	lsls	r2, r2, #26
 80005d6:	d402      	bmi.n	80005de <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	43ba      	bics	r2, r7
 80005dc:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 80005de:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80005e0:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d019      	beq.n	800061a <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 80005e6:	4798      	blx	r3
  return;
 80005e8:	e017      	b.n	800061a <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80005ea:	2702      	movs	r7, #2
 80005ec:	003e      	movs	r6, r7
 80005ee:	4096      	lsls	r6, r2
 80005f0:	4235      	tst	r5, r6
 80005f2:	d013      	beq.n	800061c <HAL_DMA_IRQHandler+0x68>
 80005f4:	423c      	tst	r4, r7
 80005f6:	d011      	beq.n	800061c <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	0692      	lsls	r2, r2, #26
 80005fc:	d406      	bmi.n	800060c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80005fe:	240a      	movs	r4, #10
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	43a2      	bics	r2, r4
 8000604:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000606:	2201      	movs	r2, #1
 8000608:	1d83      	adds	r3, r0, #6
 800060a:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 800060c:	2200      	movs	r2, #0
 800060e:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000610:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8000612:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8000614:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000616:	4293      	cmp	r3, r2
 8000618:	d1e5      	bne.n	80005e6 <HAL_DMA_IRQHandler+0x32>
}
 800061a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800061c:	2608      	movs	r6, #8
 800061e:	0037      	movs	r7, r6
 8000620:	4097      	lsls	r7, r2
 8000622:	423d      	tst	r5, r7
 8000624:	d0f9      	beq.n	800061a <HAL_DMA_IRQHandler+0x66>
 8000626:	4234      	tst	r4, r6
 8000628:	d0f7      	beq.n	800061a <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800062a:	250e      	movs	r5, #14
 800062c:	681c      	ldr	r4, [r3, #0]
 800062e:	43ac      	bics	r4, r5
 8000630:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000632:	2301      	movs	r3, #1
 8000634:	001c      	movs	r4, r3
 8000636:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8000638:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800063a:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800063c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800063e:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8000640:	2200      	movs	r2, #0
 8000642:	1d43      	adds	r3, r0, #5
 8000644:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8000646:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000648:	e7e5      	b.n	8000616 <HAL_DMA_IRQHandler+0x62>
	...

0800064c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800064c:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800064e:	4a53      	ldr	r2, [pc, #332]	; (800079c <HAL_GPIO_Init+0x150>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000650:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000652:	1882      	adds	r2, r0, r2
 8000654:	1e54      	subs	r4, r2, #1
 8000656:	41a2      	sbcs	r2, r4
{
 8000658:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0)
 800065a:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00U;
 800065c:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800065e:	3205      	adds	r2, #5
 8000660:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000662:	9a03      	ldr	r2, [sp, #12]
 8000664:	40da      	lsrs	r2, r3
 8000666:	d101      	bne.n	800066c <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8000668:	b007      	add	sp, #28
 800066a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800066c:	2501      	movs	r5, #1
 800066e:	409d      	lsls	r5, r3
 8000670:	9a03      	ldr	r2, [sp, #12]
 8000672:	402a      	ands	r2, r5
 8000674:	9202      	str	r2, [sp, #8]
    if(iocurrent)
 8000676:	d100      	bne.n	800067a <HAL_GPIO_Init+0x2e>
 8000678:	e08e      	b.n	8000798 <HAL_GPIO_Init+0x14c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800067a:	684a      	ldr	r2, [r1, #4]
 800067c:	9201      	str	r2, [sp, #4]
 800067e:	2210      	movs	r2, #16
 8000680:	9e01      	ldr	r6, [sp, #4]
 8000682:	4396      	bics	r6, r2
 8000684:	2e02      	cmp	r6, #2
 8000686:	d10f      	bne.n	80006a8 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 8000688:	08da      	lsrs	r2, r3, #3
 800068a:	0092      	lsls	r2, r2, #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800068c:	2407      	movs	r4, #7
 800068e:	1882      	adds	r2, r0, r2
        temp = GPIOx->AFR[position >> 3U];
 8000690:	6a17      	ldr	r7, [r2, #32]
 8000692:	9204      	str	r2, [sp, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000694:	220f      	movs	r2, #15
 8000696:	401c      	ands	r4, r3
 8000698:	00a4      	lsls	r4, r4, #2
 800069a:	40a2      	lsls	r2, r4
 800069c:	4397      	bics	r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800069e:	690a      	ldr	r2, [r1, #16]
 80006a0:	40a2      	lsls	r2, r4
 80006a2:	4317      	orrs	r7, r2
        GPIOx->AFR[position >> 3U] = temp;
 80006a4:	9a04      	ldr	r2, [sp, #16]
 80006a6:	6217      	str	r7, [r2, #32]
 80006a8:	2203      	movs	r2, #3
 80006aa:	005c      	lsls	r4, r3, #1
 80006ac:	40a2      	lsls	r2, r4
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ae:	3e01      	subs	r6, #1
 80006b0:	43d2      	mvns	r2, r2
 80006b2:	2e01      	cmp	r6, #1
 80006b4:	d80d      	bhi.n	80006d2 <HAL_GPIO_Init+0x86>
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006b6:	68ce      	ldr	r6, [r1, #12]
        temp = GPIOx->OSPEEDR;
 80006b8:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006ba:	40a6      	lsls	r6, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80006bc:	4017      	ands	r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006be:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80006c0:	6086      	str	r6, [r0, #8]
        temp= GPIOx->OTYPER;
 80006c2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006c4:	43ae      	bics	r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006c6:	9d01      	ldr	r5, [sp, #4]
 80006c8:	06ed      	lsls	r5, r5, #27
 80006ca:	0fed      	lsrs	r5, r5, #31
 80006cc:	409d      	lsls	r5, r3
 80006ce:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80006d0:	6045      	str	r5, [r0, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006d2:	2603      	movs	r6, #3
 80006d4:	9d01      	ldr	r5, [sp, #4]
      temp = GPIOx->MODER;
 80006d6:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006d8:	4035      	ands	r5, r6
 80006da:	40a5      	lsls	r5, r4
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80006dc:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006de:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 80006e0:	6005      	str	r5, [r0, #0]
      temp = GPIOx->PUPDR;
 80006e2:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80006e4:	402a      	ands	r2, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80006e6:	688d      	ldr	r5, [r1, #8]
 80006e8:	40a5      	lsls	r5, r4
 80006ea:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 80006ec:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80006ee:	9a01      	ldr	r2, [sp, #4]
 80006f0:	00d2      	lsls	r2, r2, #3
 80006f2:	d551      	bpl.n	8000798 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f4:	2501      	movs	r5, #1
 80006f6:	4c2a      	ldr	r4, [pc, #168]	; (80007a0 <HAL_GPIO_Init+0x154>)
 80006f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80006fa:	432a      	orrs	r2, r5
 80006fc:	6362      	str	r2, [r4, #52]	; 0x34
 80006fe:	4a29      	ldr	r2, [pc, #164]	; (80007a4 <HAL_GPIO_Init+0x158>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000700:	089c      	lsrs	r4, r3, #2
 8000702:	00a4      	lsls	r4, r4, #2
 8000704:	18a4      	adds	r4, r4, r2
 8000706:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000708:	001d      	movs	r5, r3
        temp = SYSCFG->EXTICR[position >> 2U];
 800070a:	4694      	mov	ip, r2
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800070c:	220f      	movs	r2, #15
 800070e:	4035      	ands	r5, r6
 8000710:	00ad      	lsls	r5, r5, #2
 8000712:	40aa      	lsls	r2, r5
 8000714:	4667      	mov	r7, ip
 8000716:	4397      	bics	r7, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000718:	22a0      	movs	r2, #160	; 0xa0
 800071a:	05d2      	lsls	r2, r2, #23
 800071c:	4694      	mov	ip, r2
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800071e:	9704      	str	r7, [sp, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000720:	2200      	movs	r2, #0
 8000722:	4560      	cmp	r0, ip
 8000724:	d00d      	beq.n	8000742 <HAL_GPIO_Init+0xf6>
 8000726:	4a20      	ldr	r2, [pc, #128]	; (80007a8 <HAL_GPIO_Init+0x15c>)
 8000728:	4694      	mov	ip, r2
 800072a:	2201      	movs	r2, #1
 800072c:	4560      	cmp	r0, ip
 800072e:	d008      	beq.n	8000742 <HAL_GPIO_Init+0xf6>
 8000730:	4f1e      	ldr	r7, [pc, #120]	; (80007ac <HAL_GPIO_Init+0x160>)
 8000732:	1892      	adds	r2, r2, r2
 8000734:	42b8      	cmp	r0, r7
 8000736:	d004      	beq.n	8000742 <HAL_GPIO_Init+0xf6>
 8000738:	4f1d      	ldr	r7, [pc, #116]	; (80007b0 <HAL_GPIO_Init+0x164>)
 800073a:	0032      	movs	r2, r6
 800073c:	42b8      	cmp	r0, r7
 800073e:	d000      	beq.n	8000742 <HAL_GPIO_Init+0xf6>
 8000740:	9a05      	ldr	r2, [sp, #20]
 8000742:	40aa      	lsls	r2, r5
 8000744:	9d04      	ldr	r5, [sp, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000746:	9f01      	ldr	r7, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000748:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800074a:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 800074c:	4a19      	ldr	r2, [pc, #100]	; (80007b4 <HAL_GPIO_Init+0x168>)
        temp &= ~((uint32_t)iocurrent);
 800074e:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8000750:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000752:	9d02      	ldr	r5, [sp, #8]
        temp &= ~((uint32_t)iocurrent);
 8000754:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000756:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000758:	03ff      	lsls	r7, r7, #15
 800075a:	d401      	bmi.n	8000760 <HAL_GPIO_Init+0x114>
        temp &= ~((uint32_t)iocurrent);
 800075c:	0035      	movs	r5, r6
 800075e:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8000760:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000762:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000764:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000766:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8000768:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800076a:	03bf      	lsls	r7, r7, #14
 800076c:	d401      	bmi.n	8000772 <HAL_GPIO_Init+0x126>
        temp &= ~((uint32_t)iocurrent);
 800076e:	0035      	movs	r5, r6
 8000770:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8000772:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000774:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000776:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000778:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 800077a:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800077c:	02ff      	lsls	r7, r7, #11
 800077e:	d401      	bmi.n	8000784 <HAL_GPIO_Init+0x138>
        temp &= ~((uint32_t)iocurrent);
 8000780:	0035      	movs	r5, r6
 8000782:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8000784:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000786:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000788:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800078a:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 800078c:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800078e:	02bf      	lsls	r7, r7, #10
 8000790:	d401      	bmi.n	8000796 <HAL_GPIO_Init+0x14a>
        temp &= ~((uint32_t)iocurrent);
 8000792:	4025      	ands	r5, r4
 8000794:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000796:	60d6      	str	r6, [r2, #12]
    position++;
 8000798:	3301      	adds	r3, #1
 800079a:	e762      	b.n	8000662 <HAL_GPIO_Init+0x16>
 800079c:	afffe400 	.word	0xafffe400
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40010000 	.word	0x40010000
 80007a8:	50000400 	.word	0x50000400
 80007ac:	50000800 	.word	0x50000800
 80007b0:	50000c00 	.word	0x50000c00
 80007b4:	40010400 	.word	0x40010400

080007b8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80007b8:	6900      	ldr	r0, [r0, #16]
 80007ba:	4008      	ands	r0, r1
 80007bc:	1e41      	subs	r1, r0, #1
 80007be:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80007c0:	b2c0      	uxtb	r0, r0
}
 80007c2:	4770      	bx	lr

080007c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80007c4:	2a00      	cmp	r2, #0
 80007c6:	d001      	beq.n	80007cc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80007c8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80007ca:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80007cc:	6281      	str	r1, [r0, #40]	; 0x28
}
 80007ce:	e7fc      	b.n	80007ca <HAL_GPIO_WritePin+0x6>

080007d0 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80007d0:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007d4:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 80007d6:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80007d8:	400a      	ands	r2, r1
 80007da:	2a08      	cmp	r2, #8
 80007dc:	d029      	beq.n	8000832 <HAL_RCC_GetSysClockFreq+0x62>
 80007de:	2a0c      	cmp	r2, #12
 80007e0:	d009      	beq.n	80007f6 <HAL_RCC_GetSysClockFreq+0x26>
 80007e2:	2a04      	cmp	r2, #4
 80007e4:	d11d      	bne.n	8000822 <HAL_RCC_GetSysClockFreq+0x52>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80007e6:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <HAL_RCC_GetSysClockFreq+0x6c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80007ea:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 80007ec:	17c0      	asrs	r0, r0, #31
 80007ee:	4018      	ands	r0, r3
 80007f0:	4b13      	ldr	r3, [pc, #76]	; (8000840 <HAL_RCC_GetSysClockFreq+0x70>)
 80007f2:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80007f4:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80007f6:	028a      	lsls	r2, r1, #10
 80007f8:	4812      	ldr	r0, [pc, #72]	; (8000844 <HAL_RCC_GetSysClockFreq+0x74>)
 80007fa:	0f12      	lsrs	r2, r2, #28
 80007fc:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80007fe:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000800:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000802:	0f89      	lsrs	r1, r1, #30
 8000804:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000806:	03c0      	lsls	r0, r0, #15
 8000808:	d504      	bpl.n	8000814 <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = (HSE_VALUE * pllm) / plld;
 800080a:	480f      	ldr	r0, [pc, #60]	; (8000848 <HAL_RCC_GetSysClockFreq+0x78>)
         pllvco = (HSI_VALUE * pllm) / plld;
 800080c:	4350      	muls	r0, r2
 800080e:	f7ff fc7b 	bl	8000108 <__udivsi3>
 8000812:	e7ef      	b.n	80007f4 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	06db      	lsls	r3, r3, #27
 8000818:	d501      	bpl.n	800081e <HAL_RCC_GetSysClockFreq+0x4e>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800081a:	480c      	ldr	r0, [pc, #48]	; (800084c <HAL_RCC_GetSysClockFreq+0x7c>)
 800081c:	e7f6      	b.n	800080c <HAL_RCC_GetSysClockFreq+0x3c>
         pllvco = (HSI_VALUE * pllm) / plld;
 800081e:	4808      	ldr	r0, [pc, #32]	; (8000840 <HAL_RCC_GetSysClockFreq+0x70>)
 8000820:	e7f4      	b.n	800080c <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000822:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000824:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000826:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000828:	041b      	lsls	r3, r3, #16
 800082a:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800082c:	3301      	adds	r3, #1
 800082e:	4098      	lsls	r0, r3
 8000830:	e7e0      	b.n	80007f4 <HAL_RCC_GetSysClockFreq+0x24>
      sysclockfreq = HSE_VALUE;
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <HAL_RCC_GetSysClockFreq+0x78>)
 8000834:	e7de      	b.n	80007f4 <HAL_RCC_GetSysClockFreq+0x24>
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	40021000 	.word	0x40021000
 800083c:	ff48e500 	.word	0xff48e500
 8000840:	00f42400 	.word	0x00f42400
 8000844:	08001658 	.word	0x08001658
 8000848:	007a1200 	.word	0x007a1200
 800084c:	003d0900 	.word	0x003d0900

08000850 <HAL_RCC_OscConfig>:
{
 8000850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000852:	0005      	movs	r5, r0
 8000854:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8000856:	2800      	cmp	r0, #0
 8000858:	d102      	bne.n	8000860 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 800085a:	2001      	movs	r0, #1
}
 800085c:	b007      	add	sp, #28
 800085e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000860:	230c      	movs	r3, #12
 8000862:	4cbe      	ldr	r4, [pc, #760]	; (8000b5c <HAL_RCC_OscConfig+0x30c>)
 8000864:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000866:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000868:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800086a:	2380      	movs	r3, #128	; 0x80
 800086c:	025b      	lsls	r3, r3, #9
 800086e:	401a      	ands	r2, r3
 8000870:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000872:	6802      	ldr	r2, [r0, #0]
 8000874:	07d2      	lsls	r2, r2, #31
 8000876:	d441      	bmi.n	80008fc <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000878:	682b      	ldr	r3, [r5, #0]
 800087a:	079b      	lsls	r3, r3, #30
 800087c:	d500      	bpl.n	8000880 <HAL_RCC_OscConfig+0x30>
 800087e:	e087      	b.n	8000990 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000880:	682b      	ldr	r3, [r5, #0]
 8000882:	06db      	lsls	r3, r3, #27
 8000884:	d528      	bpl.n	80008d8 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000886:	2e00      	cmp	r6, #0
 8000888:	d000      	beq.n	800088c <HAL_RCC_OscConfig+0x3c>
 800088a:	e0d9      	b.n	8000a40 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800088c:	6823      	ldr	r3, [r4, #0]
 800088e:	059b      	lsls	r3, r3, #22
 8000890:	d502      	bpl.n	8000898 <HAL_RCC_OscConfig+0x48>
 8000892:	69eb      	ldr	r3, [r5, #28]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d0e0      	beq.n	800085a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000898:	6862      	ldr	r2, [r4, #4]
 800089a:	49b1      	ldr	r1, [pc, #708]	; (8000b60 <HAL_RCC_OscConfig+0x310>)
 800089c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800089e:	400a      	ands	r2, r1
 80008a0:	431a      	orrs	r2, r3
 80008a2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80008a4:	6861      	ldr	r1, [r4, #4]
 80008a6:	6a2a      	ldr	r2, [r5, #32]
 80008a8:	0209      	lsls	r1, r1, #8
 80008aa:	0a09      	lsrs	r1, r1, #8
 80008ac:	0612      	lsls	r2, r2, #24
 80008ae:	430a      	orrs	r2, r1
 80008b0:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	0b5b      	lsrs	r3, r3, #13
 80008b6:	3301      	adds	r3, #1
 80008b8:	0212      	lsls	r2, r2, #8
 80008ba:	409a      	lsls	r2, r3
 80008bc:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80008be:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80008c0:	2003      	movs	r0, #3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80008c2:	060a      	lsls	r2, r1, #24
 80008c4:	49a7      	ldr	r1, [pc, #668]	; (8000b64 <HAL_RCC_OscConfig+0x314>)
 80008c6:	0f12      	lsrs	r2, r2, #28
 80008c8:	5c8a      	ldrb	r2, [r1, r2]
 80008ca:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80008cc:	4aa6      	ldr	r2, [pc, #664]	; (8000b68 <HAL_RCC_OscConfig+0x318>)
 80008ce:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80008d0:	f7ff fd64 	bl	800039c <HAL_InitTick>
        if(status != HAL_OK)
 80008d4:	2800      	cmp	r0, #0
 80008d6:	d1c1      	bne.n	800085c <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008d8:	682b      	ldr	r3, [r5, #0]
 80008da:	071b      	lsls	r3, r3, #28
 80008dc:	d500      	bpl.n	80008e0 <HAL_RCC_OscConfig+0x90>
 80008de:	e0e6      	b.n	8000aae <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008e0:	682b      	ldr	r3, [r5, #0]
 80008e2:	075b      	lsls	r3, r3, #29
 80008e4:	d500      	bpl.n	80008e8 <HAL_RCC_OscConfig+0x98>
 80008e6:	e108      	b.n	8000afa <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80008e8:	682b      	ldr	r3, [r5, #0]
 80008ea:	069b      	lsls	r3, r3, #26
 80008ec:	d500      	bpl.n	80008f0 <HAL_RCC_OscConfig+0xa0>
 80008ee:	e18d      	b.n	8000c0c <HAL_RCC_OscConfig+0x3bc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008f0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d000      	beq.n	80008f8 <HAL_RCC_OscConfig+0xa8>
 80008f6:	e1bc      	b.n	8000c72 <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 80008f8:	2000      	movs	r0, #0
 80008fa:	e7af      	b.n	800085c <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80008fc:	2e08      	cmp	r6, #8
 80008fe:	d004      	beq.n	800090a <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000900:	2e0c      	cmp	r6, #12
 8000902:	d109      	bne.n	8000918 <HAL_RCC_OscConfig+0xc8>
 8000904:	9a01      	ldr	r2, [sp, #4]
 8000906:	2a00      	cmp	r2, #0
 8000908:	d006      	beq.n	8000918 <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800090a:	6823      	ldr	r3, [r4, #0]
 800090c:	039b      	lsls	r3, r3, #14
 800090e:	d5b3      	bpl.n	8000878 <HAL_RCC_OscConfig+0x28>
 8000910:	686b      	ldr	r3, [r5, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d1b0      	bne.n	8000878 <HAL_RCC_OscConfig+0x28>
 8000916:	e7a0      	b.n	800085a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000918:	686a      	ldr	r2, [r5, #4]
 800091a:	429a      	cmp	r2, r3
 800091c:	d111      	bne.n	8000942 <HAL_RCC_OscConfig+0xf2>
 800091e:	6822      	ldr	r2, [r4, #0]
 8000920:	4313      	orrs	r3, r2
 8000922:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000924:	f7ff fd6e 	bl	8000404 <HAL_GetTick>
 8000928:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800092a:	2280      	movs	r2, #128	; 0x80
 800092c:	6823      	ldr	r3, [r4, #0]
 800092e:	0292      	lsls	r2, r2, #10
 8000930:	4213      	tst	r3, r2
 8000932:	d1a1      	bne.n	8000878 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000934:	f7ff fd66 	bl	8000404 <HAL_GetTick>
 8000938:	1bc0      	subs	r0, r0, r7
 800093a:	2864      	cmp	r0, #100	; 0x64
 800093c:	d9f5      	bls.n	800092a <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 800093e:	2003      	movs	r0, #3
 8000940:	e78c      	b.n	800085c <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000942:	21a0      	movs	r1, #160	; 0xa0
 8000944:	02c9      	lsls	r1, r1, #11
 8000946:	428a      	cmp	r2, r1
 8000948:	d105      	bne.n	8000956 <HAL_RCC_OscConfig+0x106>
 800094a:	2280      	movs	r2, #128	; 0x80
 800094c:	6821      	ldr	r1, [r4, #0]
 800094e:	02d2      	lsls	r2, r2, #11
 8000950:	430a      	orrs	r2, r1
 8000952:	6022      	str	r2, [r4, #0]
 8000954:	e7e3      	b.n	800091e <HAL_RCC_OscConfig+0xce>
 8000956:	6821      	ldr	r1, [r4, #0]
 8000958:	4884      	ldr	r0, [pc, #528]	; (8000b6c <HAL_RCC_OscConfig+0x31c>)
 800095a:	4001      	ands	r1, r0
 800095c:	6021      	str	r1, [r4, #0]
 800095e:	6821      	ldr	r1, [r4, #0]
 8000960:	400b      	ands	r3, r1
 8000962:	9305      	str	r3, [sp, #20]
 8000964:	9b05      	ldr	r3, [sp, #20]
 8000966:	4982      	ldr	r1, [pc, #520]	; (8000b70 <HAL_RCC_OscConfig+0x320>)
 8000968:	6823      	ldr	r3, [r4, #0]
 800096a:	400b      	ands	r3, r1
 800096c:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800096e:	2a00      	cmp	r2, #0
 8000970:	d1d8      	bne.n	8000924 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8000972:	f7ff fd47 	bl	8000404 <HAL_GetTick>
 8000976:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000978:	2280      	movs	r2, #128	; 0x80
 800097a:	6823      	ldr	r3, [r4, #0]
 800097c:	0292      	lsls	r2, r2, #10
 800097e:	4213      	tst	r3, r2
 8000980:	d100      	bne.n	8000984 <HAL_RCC_OscConfig+0x134>
 8000982:	e779      	b.n	8000878 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000984:	f7ff fd3e 	bl	8000404 <HAL_GetTick>
 8000988:	1bc0      	subs	r0, r0, r7
 800098a:	2864      	cmp	r0, #100	; 0x64
 800098c:	d9f4      	bls.n	8000978 <HAL_RCC_OscConfig+0x128>
 800098e:	e7d6      	b.n	800093e <HAL_RCC_OscConfig+0xee>
    hsi_state = RCC_OscInitStruct->HSIState;
 8000990:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000992:	2e04      	cmp	r6, #4
 8000994:	d004      	beq.n	80009a0 <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000996:	2e0c      	cmp	r6, #12
 8000998:	d125      	bne.n	80009e6 <HAL_RCC_OscConfig+0x196>
 800099a:	9b01      	ldr	r3, [sp, #4]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d122      	bne.n	80009e6 <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80009a0:	6823      	ldr	r3, [r4, #0]
 80009a2:	075b      	lsls	r3, r3, #29
 80009a4:	d502      	bpl.n	80009ac <HAL_RCC_OscConfig+0x15c>
 80009a6:	2a00      	cmp	r2, #0
 80009a8:	d100      	bne.n	80009ac <HAL_RCC_OscConfig+0x15c>
 80009aa:	e756      	b.n	800085a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009ac:	6861      	ldr	r1, [r4, #4]
 80009ae:	692b      	ldr	r3, [r5, #16]
 80009b0:	4870      	ldr	r0, [pc, #448]	; (8000b74 <HAL_RCC_OscConfig+0x324>)
 80009b2:	021b      	lsls	r3, r3, #8
 80009b4:	4001      	ands	r1, r0
 80009b6:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80009b8:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009ba:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80009bc:	6823      	ldr	r3, [r4, #0]
 80009be:	438b      	bics	r3, r1
 80009c0:	4313      	orrs	r3, r2
 80009c2:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80009c4:	f7ff ff04 	bl	80007d0 <HAL_RCC_GetSysClockFreq>
 80009c8:	68e3      	ldr	r3, [r4, #12]
 80009ca:	4a66      	ldr	r2, [pc, #408]	; (8000b64 <HAL_RCC_OscConfig+0x314>)
 80009cc:	061b      	lsls	r3, r3, #24
 80009ce:	0f1b      	lsrs	r3, r3, #28
 80009d0:	5cd3      	ldrb	r3, [r2, r3]
 80009d2:	40d8      	lsrs	r0, r3
 80009d4:	4b64      	ldr	r3, [pc, #400]	; (8000b68 <HAL_RCC_OscConfig+0x318>)
 80009d6:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80009d8:	2003      	movs	r0, #3
 80009da:	f7ff fcdf 	bl	800039c <HAL_InitTick>
      if(status != HAL_OK)
 80009de:	2800      	cmp	r0, #0
 80009e0:	d100      	bne.n	80009e4 <HAL_RCC_OscConfig+0x194>
 80009e2:	e74d      	b.n	8000880 <HAL_RCC_OscConfig+0x30>
 80009e4:	e73a      	b.n	800085c <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80009e6:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 80009e8:	2a00      	cmp	r2, #0
 80009ea:	d018      	beq.n	8000a1e <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80009ec:	2109      	movs	r1, #9
 80009ee:	438b      	bics	r3, r1
 80009f0:	4313      	orrs	r3, r2
 80009f2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009f4:	f7ff fd06 	bl	8000404 <HAL_GetTick>
 80009f8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80009fa:	2204      	movs	r2, #4
 80009fc:	6823      	ldr	r3, [r4, #0]
 80009fe:	4213      	tst	r3, r2
 8000a00:	d007      	beq.n	8000a12 <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a02:	6862      	ldr	r2, [r4, #4]
 8000a04:	692b      	ldr	r3, [r5, #16]
 8000a06:	495b      	ldr	r1, [pc, #364]	; (8000b74 <HAL_RCC_OscConfig+0x324>)
 8000a08:	021b      	lsls	r3, r3, #8
 8000a0a:	400a      	ands	r2, r1
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	6063      	str	r3, [r4, #4]
 8000a10:	e736      	b.n	8000880 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a12:	f7ff fcf7 	bl	8000404 <HAL_GetTick>
 8000a16:	1bc0      	subs	r0, r0, r7
 8000a18:	2802      	cmp	r0, #2
 8000a1a:	d9ee      	bls.n	80009fa <HAL_RCC_OscConfig+0x1aa>
 8000a1c:	e78f      	b.n	800093e <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4393      	bics	r3, r2
 8000a22:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a24:	f7ff fcee 	bl	8000404 <HAL_GetTick>
 8000a28:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	6823      	ldr	r3, [r4, #0]
 8000a2e:	4213      	tst	r3, r2
 8000a30:	d100      	bne.n	8000a34 <HAL_RCC_OscConfig+0x1e4>
 8000a32:	e725      	b.n	8000880 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a34:	f7ff fce6 	bl	8000404 <HAL_GetTick>
 8000a38:	1bc0      	subs	r0, r0, r7
 8000a3a:	2802      	cmp	r0, #2
 8000a3c:	d9f5      	bls.n	8000a2a <HAL_RCC_OscConfig+0x1da>
 8000a3e:	e77e      	b.n	800093e <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000a40:	69eb      	ldr	r3, [r5, #28]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d020      	beq.n	8000a88 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 8000a46:	2380      	movs	r3, #128	; 0x80
 8000a48:	6822      	ldr	r2, [r4, #0]
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a50:	f7ff fcd8 	bl	8000404 <HAL_GetTick>
 8000a54:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000a56:	2280      	movs	r2, #128	; 0x80
 8000a58:	6823      	ldr	r3, [r4, #0]
 8000a5a:	0092      	lsls	r2, r2, #2
 8000a5c:	4213      	tst	r3, r2
 8000a5e:	d00d      	beq.n	8000a7c <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a60:	6863      	ldr	r3, [r4, #4]
 8000a62:	4a3f      	ldr	r2, [pc, #252]	; (8000b60 <HAL_RCC_OscConfig+0x310>)
 8000a64:	4013      	ands	r3, r2
 8000a66:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a6c:	6862      	ldr	r2, [r4, #4]
 8000a6e:	6a2b      	ldr	r3, [r5, #32]
 8000a70:	0212      	lsls	r2, r2, #8
 8000a72:	061b      	lsls	r3, r3, #24
 8000a74:	0a12      	lsrs	r2, r2, #8
 8000a76:	4313      	orrs	r3, r2
 8000a78:	6063      	str	r3, [r4, #4]
 8000a7a:	e72d      	b.n	80008d8 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a7c:	f7ff fcc2 	bl	8000404 <HAL_GetTick>
 8000a80:	1bc0      	subs	r0, r0, r7
 8000a82:	2802      	cmp	r0, #2
 8000a84:	d9e7      	bls.n	8000a56 <HAL_RCC_OscConfig+0x206>
 8000a86:	e75a      	b.n	800093e <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 8000a88:	6823      	ldr	r3, [r4, #0]
 8000a8a:	4a3b      	ldr	r2, [pc, #236]	; (8000b78 <HAL_RCC_OscConfig+0x328>)
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a90:	f7ff fcb8 	bl	8000404 <HAL_GetTick>
 8000a94:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	6823      	ldr	r3, [r4, #0]
 8000a9a:	0092      	lsls	r2, r2, #2
 8000a9c:	4213      	tst	r3, r2
 8000a9e:	d100      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x252>
 8000aa0:	e71a      	b.n	80008d8 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000aa2:	f7ff fcaf 	bl	8000404 <HAL_GetTick>
 8000aa6:	1bc0      	subs	r0, r0, r7
 8000aa8:	2802      	cmp	r0, #2
 8000aaa:	d9f4      	bls.n	8000a96 <HAL_RCC_OscConfig+0x246>
 8000aac:	e747      	b.n	800093e <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000aae:	696a      	ldr	r2, [r5, #20]
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	2a00      	cmp	r2, #0
 8000ab4:	d010      	beq.n	8000ad8 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 8000ab6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000abc:	f7ff fca2 	bl	8000404 <HAL_GetTick>
 8000ac0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ac6:	4213      	tst	r3, r2
 8000ac8:	d000      	beq.n	8000acc <HAL_RCC_OscConfig+0x27c>
 8000aca:	e709      	b.n	80008e0 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000acc:	f7ff fc9a 	bl	8000404 <HAL_GetTick>
 8000ad0:	1bc0      	subs	r0, r0, r7
 8000ad2:	2802      	cmp	r0, #2
 8000ad4:	d9f5      	bls.n	8000ac2 <HAL_RCC_OscConfig+0x272>
 8000ad6:	e732      	b.n	800093e <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 8000ad8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000ada:	439a      	bics	r2, r3
 8000adc:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000ade:	f7ff fc91 	bl	8000404 <HAL_GetTick>
 8000ae2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ae8:	4213      	tst	r3, r2
 8000aea:	d100      	bne.n	8000aee <HAL_RCC_OscConfig+0x29e>
 8000aec:	e6f8      	b.n	80008e0 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000aee:	f7ff fc89 	bl	8000404 <HAL_GetTick>
 8000af2:	1bc0      	subs	r0, r0, r7
 8000af4:	2802      	cmp	r0, #2
 8000af6:	d9f5      	bls.n	8000ae4 <HAL_RCC_OscConfig+0x294>
 8000af8:	e721      	b.n	800093e <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000afa:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000afc:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000afe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000b00:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8000b02:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b04:	421a      	tst	r2, r3
 8000b06:	d104      	bne.n	8000b12 <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b08:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b12:	2280      	movs	r2, #128	; 0x80
 8000b14:	4f19      	ldr	r7, [pc, #100]	; (8000b7c <HAL_RCC_OscConfig+0x32c>)
 8000b16:	0052      	lsls	r2, r2, #1
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	4213      	tst	r3, r2
 8000b1c:	d008      	beq.n	8000b30 <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b1e:	2280      	movs	r2, #128	; 0x80
 8000b20:	68ab      	ldr	r3, [r5, #8]
 8000b22:	0052      	lsls	r2, r2, #1
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d12b      	bne.n	8000b80 <HAL_RCC_OscConfig+0x330>
 8000b28:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	6523      	str	r3, [r4, #80]	; 0x50
 8000b2e:	e04c      	b.n	8000bca <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b30:	2280      	movs	r2, #128	; 0x80
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	0052      	lsls	r2, r2, #1
 8000b36:	4313      	orrs	r3, r2
 8000b38:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000b3a:	f7ff fc63 	bl	8000404 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b3e:	2380      	movs	r3, #128	; 0x80
 8000b40:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8000b42:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b44:	9303      	str	r3, [sp, #12]
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	9a03      	ldr	r2, [sp, #12]
 8000b4a:	4213      	tst	r3, r2
 8000b4c:	d1e7      	bne.n	8000b1e <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b4e:	f7ff fc59 	bl	8000404 <HAL_GetTick>
 8000b52:	9b02      	ldr	r3, [sp, #8]
 8000b54:	1ac0      	subs	r0, r0, r3
 8000b56:	2864      	cmp	r0, #100	; 0x64
 8000b58:	d9f5      	bls.n	8000b46 <HAL_RCC_OscConfig+0x2f6>
 8000b5a:	e6f0      	b.n	800093e <HAL_RCC_OscConfig+0xee>
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	ffff1fff 	.word	0xffff1fff
 8000b64:	08001661 	.word	0x08001661
 8000b68:	2000000c 	.word	0x2000000c
 8000b6c:	fffeffff 	.word	0xfffeffff
 8000b70:	fffbffff 	.word	0xfffbffff
 8000b74:	ffffe0ff 	.word	0xffffe0ff
 8000b78:	fffffeff 	.word	0xfffffeff
 8000b7c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d116      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x362>
 8000b84:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b86:	4a6c      	ldr	r2, [pc, #432]	; (8000d38 <HAL_RCC_OscConfig+0x4e8>)
 8000b88:	4013      	ands	r3, r2
 8000b8a:	6523      	str	r3, [r4, #80]	; 0x50
 8000b8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b8e:	4a6b      	ldr	r2, [pc, #428]	; (8000d3c <HAL_RCC_OscConfig+0x4ec>)
 8000b90:	4013      	ands	r3, r2
 8000b92:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000b94:	f7ff fc36 	bl	8000404 <HAL_GetTick>
 8000b98:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000b9a:	2280      	movs	r2, #128	; 0x80
 8000b9c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b9e:	0092      	lsls	r2, r2, #2
 8000ba0:	4213      	tst	r3, r2
 8000ba2:	d02a      	beq.n	8000bfa <HAL_RCC_OscConfig+0x3aa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ba4:	f7ff fc2e 	bl	8000404 <HAL_GetTick>
 8000ba8:	4b65      	ldr	r3, [pc, #404]	; (8000d40 <HAL_RCC_OscConfig+0x4f0>)
 8000baa:	1bc0      	subs	r0, r0, r7
 8000bac:	4298      	cmp	r0, r3
 8000bae:	d9f4      	bls.n	8000b9a <HAL_RCC_OscConfig+0x34a>
 8000bb0:	e6c5      	b.n	800093e <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bb2:	21a0      	movs	r1, #160	; 0xa0
 8000bb4:	00c9      	lsls	r1, r1, #3
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d10b      	bne.n	8000bd2 <HAL_RCC_OscConfig+0x382>
 8000bba:	2380      	movs	r3, #128	; 0x80
 8000bbc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	430b      	orrs	r3, r1
 8000bc2:	6523      	str	r3, [r4, #80]	; 0x50
 8000bc4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000bca:	f7ff fc1b 	bl	8000404 <HAL_GetTick>
 8000bce:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000bd0:	e00e      	b.n	8000bf0 <HAL_RCC_OscConfig+0x3a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bd2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000bd4:	4a58      	ldr	r2, [pc, #352]	; (8000d38 <HAL_RCC_OscConfig+0x4e8>)
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	6523      	str	r3, [r4, #80]	; 0x50
 8000bda:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000bdc:	4a57      	ldr	r2, [pc, #348]	; (8000d3c <HAL_RCC_OscConfig+0x4ec>)
 8000bde:	4013      	ands	r3, r2
 8000be0:	e7a4      	b.n	8000b2c <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000be2:	f7ff fc0f 	bl	8000404 <HAL_GetTick>
 8000be6:	4b56      	ldr	r3, [pc, #344]	; (8000d40 <HAL_RCC_OscConfig+0x4f0>)
 8000be8:	1bc0      	subs	r0, r0, r7
 8000bea:	4298      	cmp	r0, r3
 8000bec:	d900      	bls.n	8000bf0 <HAL_RCC_OscConfig+0x3a0>
 8000bee:	e6a6      	b.n	800093e <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000bf0:	2280      	movs	r2, #128	; 0x80
 8000bf2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000bf4:	0092      	lsls	r2, r2, #2
 8000bf6:	4213      	tst	r3, r2
 8000bf8:	d0f3      	beq.n	8000be2 <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 8000bfa:	9b01      	ldr	r3, [sp, #4]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d000      	beq.n	8000c02 <HAL_RCC_OscConfig+0x3b2>
 8000c00:	e672      	b.n	80008e8 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000c04:	4a4f      	ldr	r2, [pc, #316]	; (8000d44 <HAL_RCC_OscConfig+0x4f4>)
 8000c06:	4013      	ands	r3, r2
 8000c08:	63a3      	str	r3, [r4, #56]	; 0x38
 8000c0a:	e66d      	b.n	80008e8 <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000c0c:	69a9      	ldr	r1, [r5, #24]
 8000c0e:	2301      	movs	r3, #1
 8000c10:	4a4d      	ldr	r2, [pc, #308]	; (8000d48 <HAL_RCC_OscConfig+0x4f8>)
 8000c12:	2900      	cmp	r1, #0
 8000c14:	d018      	beq.n	8000c48 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_HSI48_ENABLE();
 8000c16:	68a1      	ldr	r1, [r4, #8]
 8000c18:	4319      	orrs	r1, r3
 8000c1a:	60a1      	str	r1, [r4, #8]
 8000c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c1e:	430b      	orrs	r3, r1
 8000c20:	6363      	str	r3, [r4, #52]	; 0x34
 8000c22:	2380      	movs	r3, #128	; 0x80
 8000c24:	6a11      	ldr	r1, [r2, #32]
 8000c26:	019b      	lsls	r3, r3, #6
 8000c28:	430b      	orrs	r3, r1
 8000c2a:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000c2c:	f7ff fbea 	bl	8000404 <HAL_GetTick>
 8000c30:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000c32:	2202      	movs	r2, #2
 8000c34:	68a3      	ldr	r3, [r4, #8]
 8000c36:	4213      	tst	r3, r2
 8000c38:	d000      	beq.n	8000c3c <HAL_RCC_OscConfig+0x3ec>
 8000c3a:	e659      	b.n	80008f0 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000c3c:	f7ff fbe2 	bl	8000404 <HAL_GetTick>
 8000c40:	1bc0      	subs	r0, r0, r7
 8000c42:	2802      	cmp	r0, #2
 8000c44:	d9f5      	bls.n	8000c32 <HAL_RCC_OscConfig+0x3e2>
 8000c46:	e67a      	b.n	800093e <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 8000c48:	68a1      	ldr	r1, [r4, #8]
 8000c4a:	4399      	bics	r1, r3
 8000c4c:	60a1      	str	r1, [r4, #8]
 8000c4e:	6a13      	ldr	r3, [r2, #32]
 8000c50:	493e      	ldr	r1, [pc, #248]	; (8000d4c <HAL_RCC_OscConfig+0x4fc>)
 8000c52:	400b      	ands	r3, r1
 8000c54:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000c56:	f7ff fbd5 	bl	8000404 <HAL_GetTick>
 8000c5a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	68a3      	ldr	r3, [r4, #8]
 8000c60:	4213      	tst	r3, r2
 8000c62:	d100      	bne.n	8000c66 <HAL_RCC_OscConfig+0x416>
 8000c64:	e644      	b.n	80008f0 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000c66:	f7ff fbcd 	bl	8000404 <HAL_GetTick>
 8000c6a:	1bc0      	subs	r0, r0, r7
 8000c6c:	2802      	cmp	r0, #2
 8000c6e:	d9f5      	bls.n	8000c5c <HAL_RCC_OscConfig+0x40c>
 8000c70:	e665      	b.n	800093e <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c72:	2e0c      	cmp	r6, #12
 8000c74:	d043      	beq.n	8000cfe <HAL_RCC_OscConfig+0x4ae>
 8000c76:	4a36      	ldr	r2, [pc, #216]	; (8000d50 <HAL_RCC_OscConfig+0x500>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d12e      	bne.n	8000cda <HAL_RCC_OscConfig+0x48a>
        __HAL_RCC_PLL_DISABLE();
 8000c7c:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000c7e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000c80:	4013      	ands	r3, r2
 8000c82:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c84:	f7ff fbbe 	bl	8000404 <HAL_GetTick>
 8000c88:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000c8a:	04b6      	lsls	r6, r6, #18
 8000c8c:	6823      	ldr	r3, [r4, #0]
 8000c8e:	4233      	tst	r3, r6
 8000c90:	d11d      	bne.n	8000cce <HAL_RCC_OscConfig+0x47e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c92:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8000c94:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000c96:	68e2      	ldr	r2, [r4, #12]
 8000c98:	430b      	orrs	r3, r1
 8000c9a:	492e      	ldr	r1, [pc, #184]	; (8000d54 <HAL_RCC_OscConfig+0x504>)
 8000c9c:	400a      	ands	r2, r1
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000ca2:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	6822      	ldr	r2, [r4, #0]
 8000cac:	045b      	lsls	r3, r3, #17
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cb2:	f7ff fba7 	bl	8000404 <HAL_GetTick>
 8000cb6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000cb8:	04ad      	lsls	r5, r5, #18
 8000cba:	6823      	ldr	r3, [r4, #0]
 8000cbc:	422b      	tst	r3, r5
 8000cbe:	d000      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x472>
 8000cc0:	e61a      	b.n	80008f8 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cc2:	f7ff fb9f 	bl	8000404 <HAL_GetTick>
 8000cc6:	1b80      	subs	r0, r0, r6
 8000cc8:	2802      	cmp	r0, #2
 8000cca:	d9f6      	bls.n	8000cba <HAL_RCC_OscConfig+0x46a>
 8000ccc:	e637      	b.n	800093e <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cce:	f7ff fb99 	bl	8000404 <HAL_GetTick>
 8000cd2:	1bc0      	subs	r0, r0, r7
 8000cd4:	2802      	cmp	r0, #2
 8000cd6:	d9d9      	bls.n	8000c8c <HAL_RCC_OscConfig+0x43c>
 8000cd8:	e631      	b.n	800093e <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 8000cda:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000cdc:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000cde:	4013      	ands	r3, r2
 8000ce0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ce2:	f7ff fb8f 	bl	8000404 <HAL_GetTick>
 8000ce6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000ce8:	04ad      	lsls	r5, r5, #18
 8000cea:	6823      	ldr	r3, [r4, #0]
 8000cec:	422b      	tst	r3, r5
 8000cee:	d100      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x4a2>
 8000cf0:	e602      	b.n	80008f8 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cf2:	f7ff fb87 	bl	8000404 <HAL_GetTick>
 8000cf6:	1b80      	subs	r0, r0, r6
 8000cf8:	2802      	cmp	r0, #2
 8000cfa:	d9f6      	bls.n	8000cea <HAL_RCC_OscConfig+0x49a>
 8000cfc:	e61f      	b.n	800093e <HAL_RCC_OscConfig+0xee>
        return HAL_ERROR;
 8000cfe:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d100      	bne.n	8000d06 <HAL_RCC_OscConfig+0x4b6>
 8000d04:	e5aa      	b.n	800085c <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d06:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8000d08:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d0a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8000d0c:	0252      	lsls	r2, r2, #9
 8000d0e:	401a      	ands	r2, r3
        return HAL_ERROR;
 8000d10:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d12:	428a      	cmp	r2, r1
 8000d14:	d000      	beq.n	8000d18 <HAL_RCC_OscConfig+0x4c8>
 8000d16:	e5a1      	b.n	800085c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000d18:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d1a:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000d1c:	0392      	lsls	r2, r2, #14
 8000d1e:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d20:	428a      	cmp	r2, r1
 8000d22:	d000      	beq.n	8000d26 <HAL_RCC_OscConfig+0x4d6>
 8000d24:	e59a      	b.n	800085c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000d26:	20c0      	movs	r0, #192	; 0xc0
 8000d28:	0400      	lsls	r0, r0, #16
 8000d2a:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000d2c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000d2e:	1a18      	subs	r0, r3, r0
 8000d30:	1e43      	subs	r3, r0, #1
 8000d32:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8000d34:	b2c0      	uxtb	r0, r0
 8000d36:	e591      	b.n	800085c <HAL_RCC_OscConfig+0xc>
 8000d38:	fffffeff 	.word	0xfffffeff
 8000d3c:	fffffbff 	.word	0xfffffbff
 8000d40:	00001388 	.word	0x00001388
 8000d44:	efffffff 	.word	0xefffffff
 8000d48:	40010000 	.word	0x40010000
 8000d4c:	ffffdfff 	.word	0xffffdfff
 8000d50:	feffffff 	.word	0xfeffffff
 8000d54:	ff02ffff 	.word	0xff02ffff

08000d58 <HAL_RCC_ClockConfig>:
{
 8000d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d5a:	1e06      	subs	r6, r0, #0
 8000d5c:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8000d5e:	d101      	bne.n	8000d64 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8000d60:	2001      	movs	r0, #1
}
 8000d62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d64:	2201      	movs	r2, #1
 8000d66:	4c51      	ldr	r4, [pc, #324]	; (8000eac <HAL_RCC_ClockConfig+0x154>)
 8000d68:	9901      	ldr	r1, [sp, #4]
 8000d6a:	6823      	ldr	r3, [r4, #0]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d327      	bcc.n	8000dc2 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d72:	6832      	ldr	r2, [r6, #0]
 8000d74:	0793      	lsls	r3, r2, #30
 8000d76:	d42f      	bmi.n	8000dd8 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d78:	07d3      	lsls	r3, r2, #31
 8000d7a:	d435      	bmi.n	8000de8 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	6822      	ldr	r2, [r4, #0]
 8000d80:	9901      	ldr	r1, [sp, #4]
 8000d82:	401a      	ands	r2, r3
 8000d84:	428a      	cmp	r2, r1
 8000d86:	d900      	bls.n	8000d8a <HAL_RCC_ClockConfig+0x32>
 8000d88:	e081      	b.n	8000e8e <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d8a:	6832      	ldr	r2, [r6, #0]
 8000d8c:	4c48      	ldr	r4, [pc, #288]	; (8000eb0 <HAL_RCC_ClockConfig+0x158>)
 8000d8e:	0753      	lsls	r3, r2, #29
 8000d90:	d500      	bpl.n	8000d94 <HAL_RCC_ClockConfig+0x3c>
 8000d92:	e084      	b.n	8000e9e <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d94:	0713      	lsls	r3, r2, #28
 8000d96:	d506      	bpl.n	8000da6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d98:	68e2      	ldr	r2, [r4, #12]
 8000d9a:	6933      	ldr	r3, [r6, #16]
 8000d9c:	4945      	ldr	r1, [pc, #276]	; (8000eb4 <HAL_RCC_ClockConfig+0x15c>)
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	400a      	ands	r2, r1
 8000da2:	4313      	orrs	r3, r2
 8000da4:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000da6:	f7ff fd13 	bl	80007d0 <HAL_RCC_GetSysClockFreq>
 8000daa:	68e3      	ldr	r3, [r4, #12]
 8000dac:	4a42      	ldr	r2, [pc, #264]	; (8000eb8 <HAL_RCC_ClockConfig+0x160>)
 8000dae:	061b      	lsls	r3, r3, #24
 8000db0:	0f1b      	lsrs	r3, r3, #28
 8000db2:	5cd3      	ldrb	r3, [r2, r3]
 8000db4:	40d8      	lsrs	r0, r3
 8000db6:	4b41      	ldr	r3, [pc, #260]	; (8000ebc <HAL_RCC_ClockConfig+0x164>)
 8000db8:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	2003      	movs	r0, #3
 8000dbc:	f7ff faee 	bl	800039c <HAL_InitTick>
 8000dc0:	e7cf      	b.n	8000d62 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dc2:	6823      	ldr	r3, [r4, #0]
 8000dc4:	9901      	ldr	r1, [sp, #4]
 8000dc6:	4393      	bics	r3, r2
 8000dc8:	430b      	orrs	r3, r1
 8000dca:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dcc:	6823      	ldr	r3, [r4, #0]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	9a01      	ldr	r2, [sp, #4]
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d1c4      	bne.n	8000d60 <HAL_RCC_ClockConfig+0x8>
 8000dd6:	e7cc      	b.n	8000d72 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dd8:	20f0      	movs	r0, #240	; 0xf0
 8000dda:	4935      	ldr	r1, [pc, #212]	; (8000eb0 <HAL_RCC_ClockConfig+0x158>)
 8000ddc:	68cb      	ldr	r3, [r1, #12]
 8000dde:	4383      	bics	r3, r0
 8000de0:	68b0      	ldr	r0, [r6, #8]
 8000de2:	4303      	orrs	r3, r0
 8000de4:	60cb      	str	r3, [r1, #12]
 8000de6:	e7c7      	b.n	8000d78 <HAL_RCC_ClockConfig+0x20>
 8000de8:	4d31      	ldr	r5, [pc, #196]	; (8000eb0 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dea:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000dec:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dee:	2a02      	cmp	r2, #2
 8000df0:	d119      	bne.n	8000e26 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000df2:	039b      	lsls	r3, r3, #14
 8000df4:	d5b4      	bpl.n	8000d60 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000df6:	2103      	movs	r1, #3
 8000df8:	68eb      	ldr	r3, [r5, #12]
 8000dfa:	438b      	bics	r3, r1
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8000e00:	f7ff fb00 	bl	8000404 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e04:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000e06:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d119      	bne.n	8000e40 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e0c:	220c      	movs	r2, #12
 8000e0e:	68eb      	ldr	r3, [r5, #12]
 8000e10:	4013      	ands	r3, r2
 8000e12:	2b08      	cmp	r3, #8
 8000e14:	d0b2      	beq.n	8000d7c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e16:	f7ff faf5 	bl	8000404 <HAL_GetTick>
 8000e1a:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <HAL_RCC_ClockConfig+0x168>)
 8000e1c:	1bc0      	subs	r0, r0, r7
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	d9f4      	bls.n	8000e0c <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8000e22:	2003      	movs	r0, #3
 8000e24:	e79d      	b.n	8000d62 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e26:	2a03      	cmp	r2, #3
 8000e28:	d102      	bne.n	8000e30 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000e2a:	019b      	lsls	r3, r3, #6
 8000e2c:	d4e3      	bmi.n	8000df6 <HAL_RCC_ClockConfig+0x9e>
 8000e2e:	e797      	b.n	8000d60 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000e30:	2a01      	cmp	r2, #1
 8000e32:	d102      	bne.n	8000e3a <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e34:	075b      	lsls	r3, r3, #29
 8000e36:	d4de      	bmi.n	8000df6 <HAL_RCC_ClockConfig+0x9e>
 8000e38:	e792      	b.n	8000d60 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000e3a:	059b      	lsls	r3, r3, #22
 8000e3c:	d4db      	bmi.n	8000df6 <HAL_RCC_ClockConfig+0x9e>
 8000e3e:	e78f      	b.n	8000d60 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d10b      	bne.n	8000e5c <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e44:	220c      	movs	r2, #12
 8000e46:	68eb      	ldr	r3, [r5, #12]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d096      	beq.n	8000d7c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e4e:	f7ff fad9 	bl	8000404 <HAL_GetTick>
 8000e52:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <HAL_RCC_ClockConfig+0x168>)
 8000e54:	1bc0      	subs	r0, r0, r7
 8000e56:	4298      	cmp	r0, r3
 8000e58:	d9f4      	bls.n	8000e44 <HAL_RCC_ClockConfig+0xec>
 8000e5a:	e7e2      	b.n	8000e22 <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d010      	beq.n	8000e82 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000e60:	220c      	movs	r2, #12
 8000e62:	68eb      	ldr	r3, [r5, #12]
 8000e64:	4213      	tst	r3, r2
 8000e66:	d089      	beq.n	8000d7c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e68:	f7ff facc 	bl	8000404 <HAL_GetTick>
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_RCC_ClockConfig+0x168>)
 8000e6e:	1bc0      	subs	r0, r0, r7
 8000e70:	4298      	cmp	r0, r3
 8000e72:	d9f5      	bls.n	8000e60 <HAL_RCC_ClockConfig+0x108>
 8000e74:	e7d5      	b.n	8000e22 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e76:	f7ff fac5 	bl	8000404 <HAL_GetTick>
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_RCC_ClockConfig+0x168>)
 8000e7c:	1bc0      	subs	r0, r0, r7
 8000e7e:	4298      	cmp	r0, r3
 8000e80:	d8cf      	bhi.n	8000e22 <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e82:	220c      	movs	r2, #12
 8000e84:	68eb      	ldr	r3, [r5, #12]
 8000e86:	4013      	ands	r3, r2
 8000e88:	2b04      	cmp	r3, #4
 8000e8a:	d1f4      	bne.n	8000e76 <HAL_RCC_ClockConfig+0x11e>
 8000e8c:	e776      	b.n	8000d7c <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e8e:	6822      	ldr	r2, [r4, #0]
 8000e90:	439a      	bics	r2, r3
 8000e92:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e94:	6822      	ldr	r2, [r4, #0]
 8000e96:	421a      	tst	r2, r3
 8000e98:	d100      	bne.n	8000e9c <HAL_RCC_ClockConfig+0x144>
 8000e9a:	e776      	b.n	8000d8a <HAL_RCC_ClockConfig+0x32>
 8000e9c:	e760      	b.n	8000d60 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e9e:	68e3      	ldr	r3, [r4, #12]
 8000ea0:	4908      	ldr	r1, [pc, #32]	; (8000ec4 <HAL_RCC_ClockConfig+0x16c>)
 8000ea2:	400b      	ands	r3, r1
 8000ea4:	68f1      	ldr	r1, [r6, #12]
 8000ea6:	430b      	orrs	r3, r1
 8000ea8:	60e3      	str	r3, [r4, #12]
 8000eaa:	e773      	b.n	8000d94 <HAL_RCC_ClockConfig+0x3c>
 8000eac:	40022000 	.word	0x40022000
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	ffffc7ff 	.word	0xffffc7ff
 8000eb8:	08001661 	.word	0x08001661
 8000ebc:	2000000c 	.word	0x2000000c
 8000ec0:	00001388 	.word	0x00001388
 8000ec4:	fffff8ff 	.word	0xfffff8ff

08000ec8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8000ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eca:	0004      	movs	r4, r0
 8000ecc:	000d      	movs	r5, r1
 8000ece:	0017      	movs	r7, r2
 8000ed0:	001e      	movs	r6, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000ed2:	6822      	ldr	r2, [r4, #0]
 8000ed4:	6893      	ldr	r3, [r2, #8]
 8000ed6:	402b      	ands	r3, r5
 8000ed8:	1b5b      	subs	r3, r3, r5
 8000eda:	4259      	negs	r1, r3
 8000edc:	414b      	adcs	r3, r1
 8000ede:	42bb      	cmp	r3, r7
 8000ee0:	d101      	bne.n	8000ee6 <SPI_WaitFlagStateUntilTimeout+0x1e>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	e032      	b.n	8000f4c <SPI_WaitFlagStateUntilTimeout+0x84>
    if (Timeout != HAL_MAX_DELAY)
 8000ee6:	1c73      	adds	r3, r6, #1
 8000ee8:	d0f4      	beq.n	8000ed4 <SPI_WaitFlagStateUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000eea:	f7ff fa8b 	bl	8000404 <HAL_GetTick>
 8000eee:	9b06      	ldr	r3, [sp, #24]
 8000ef0:	1ac0      	subs	r0, r0, r3
 8000ef2:	42b0      	cmp	r0, r6
 8000ef4:	d3ed      	bcc.n	8000ed2 <SPI_WaitFlagStateUntilTimeout+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000ef6:	21e0      	movs	r1, #224	; 0xe0
 8000ef8:	6823      	ldr	r3, [r4, #0]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	438a      	bics	r2, r1
 8000efe:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f00:	2282      	movs	r2, #130	; 0x82
 8000f02:	6861      	ldr	r1, [r4, #4]
 8000f04:	0052      	lsls	r2, r2, #1
 8000f06:	4291      	cmp	r1, r2
 8000f08:	d10c      	bne.n	8000f24 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8000f0a:	2180      	movs	r1, #128	; 0x80
 8000f0c:	68a2      	ldr	r2, [r4, #8]
 8000f0e:	0209      	lsls	r1, r1, #8
 8000f10:	428a      	cmp	r2, r1
 8000f12:	d003      	beq.n	8000f1c <SPI_WaitFlagStateUntilTimeout+0x54>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000f14:	2180      	movs	r1, #128	; 0x80
 8000f16:	00c9      	lsls	r1, r1, #3
 8000f18:	428a      	cmp	r2, r1
 8000f1a:	d103      	bne.n	8000f24 <SPI_WaitFlagStateUntilTimeout+0x5c>
          __HAL_SPI_DISABLE(hspi);
 8000f1c:	2140      	movs	r1, #64	; 0x40
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	438a      	bics	r2, r1
 8000f22:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f28:	0189      	lsls	r1, r1, #6
 8000f2a:	428a      	cmp	r2, r1
 8000f2c:	d106      	bne.n	8000f3c <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8000f2e:	6819      	ldr	r1, [r3, #0]
 8000f30:	4807      	ldr	r0, [pc, #28]	; (8000f50 <SPI_WaitFlagStateUntilTimeout+0x88>)
 8000f32:	4001      	ands	r1, r0
 8000f34:	6019      	str	r1, [r3, #0]
 8000f36:	6819      	ldr	r1, [r3, #0]
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000f3c:	0023      	movs	r3, r4
 8000f3e:	2201      	movs	r2, #1
 8000f40:	3351      	adds	r3, #81	; 0x51
 8000f42:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8000f44:	2300      	movs	r3, #0
 8000f46:	2003      	movs	r0, #3
 8000f48:	3450      	adds	r4, #80	; 0x50
 8000f4a:	7023      	strb	r3, [r4, #0]
}
 8000f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	ffffdfff 	.word	0xffffdfff

08000f54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000f54:	b513      	push	{r0, r1, r4, lr}
 8000f56:	000b      	movs	r3, r1
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000f58:	2182      	movs	r1, #130	; 0x82
{
 8000f5a:	0004      	movs	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000f5c:	6840      	ldr	r0, [r0, #4]
 8000f5e:	0049      	lsls	r1, r1, #1
 8000f60:	4288      	cmp	r0, r1
 8000f62:	d109      	bne.n	8000f78 <SPI_EndRxTxTransaction+0x24>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000f64:	9200      	str	r2, [sp, #0]
 8000f66:	2200      	movs	r2, #0
 8000f68:	3984      	subs	r1, #132	; 0x84
 8000f6a:	0020      	movs	r0, r4
 8000f6c:	f7ff ffac 	bl	8000ec8 <SPI_WaitFlagStateUntilTimeout>
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d10a      	bne.n	8000f8a <SPI_EndRxTxTransaction+0x36>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8000f74:	2000      	movs	r0, #0
}
 8000f76:	bd16      	pop	{r1, r2, r4, pc}
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8000f78:	0021      	movs	r1, r4
 8000f7a:	3151      	adds	r1, #81	; 0x51
 8000f7c:	7809      	ldrb	r1, [r1, #0]
 8000f7e:	2905      	cmp	r1, #5
 8000f80:	d1f8      	bne.n	8000f74 <SPI_EndRxTxTransaction+0x20>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8000f82:	9200      	str	r2, [sp, #0]
 8000f84:	3904      	subs	r1, #4
 8000f86:	2200      	movs	r2, #0
 8000f88:	e7ef      	b.n	8000f6a <SPI_EndRxTxTransaction+0x16>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000f8a:	2320      	movs	r3, #32
 8000f8c:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8000f8e:	2003      	movs	r0, #3
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000f90:	4313      	orrs	r3, r2
 8000f92:	6563      	str	r3, [r4, #84]	; 0x54
 8000f94:	e7ef      	b.n	8000f76 <SPI_EndRxTxTransaction+0x22>

08000f96 <SPI_EndRxTransaction>:
{
 8000f96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f98:	000b      	movs	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f9a:	2182      	movs	r1, #130	; 0x82
{
 8000f9c:	0004      	movs	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f9e:	6840      	ldr	r0, [r0, #4]
 8000fa0:	0049      	lsls	r1, r1, #1
 8000fa2:	4288      	cmp	r0, r1
 8000fa4:	d11f      	bne.n	8000fe6 <SPI_EndRxTransaction+0x50>
 8000fa6:	2080      	movs	r0, #128	; 0x80
 8000fa8:	2580      	movs	r5, #128	; 0x80
 8000faa:	68a1      	ldr	r1, [r4, #8]
 8000fac:	0200      	lsls	r0, r0, #8
 8000fae:	00ed      	lsls	r5, r5, #3
 8000fb0:	4281      	cmp	r1, r0
 8000fb2:	d001      	beq.n	8000fb8 <SPI_EndRxTransaction+0x22>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000fb4:	42a9      	cmp	r1, r5
 8000fb6:	d106      	bne.n	8000fc6 <SPI_EndRxTransaction+0x30>
    __HAL_SPI_DISABLE(hspi);
 8000fb8:	2740      	movs	r7, #64	; 0x40
 8000fba:	6826      	ldr	r6, [r4, #0]
 8000fbc:	6830      	ldr	r0, [r6, #0]
 8000fbe:	43b8      	bics	r0, r7
 8000fc0:	6030      	str	r0, [r6, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8000fc2:	42a9      	cmp	r1, r5
 8000fc4:	d00f      	beq.n	8000fe6 <SPI_EndRxTransaction+0x50>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000fc6:	9200      	str	r2, [sp, #0]
 8000fc8:	2180      	movs	r1, #128	; 0x80
 8000fca:	2200      	movs	r2, #0
 8000fcc:	0020      	movs	r0, r4
 8000fce:	f7ff ff7b 	bl	8000ec8 <SPI_WaitFlagStateUntilTimeout>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d101      	bne.n	8000fda <SPI_EndRxTransaction+0x44>
  return HAL_OK;
 8000fd6:	2000      	movs	r0, #0
}
 8000fd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000fda:	2320      	movs	r3, #32
 8000fdc:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000fde:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000fe4:	e7f8      	b.n	8000fd8 <SPI_EndRxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8000fe6:	9200      	str	r2, [sp, #0]
 8000fe8:	2101      	movs	r1, #1
 8000fea:	2200      	movs	r2, #0
 8000fec:	e7ee      	b.n	8000fcc <SPI_EndRxTransaction+0x36>
	...

08000ff0 <HAL_SPI_Init>:
{
 8000ff0:	b570      	push	{r4, r5, r6, lr}
 8000ff2:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000ff4:	2001      	movs	r0, #1
  if (hspi == NULL)
 8000ff6:	2c00      	cmp	r4, #0
 8000ff8:	d03b      	beq.n	8001072 <HAL_SPI_Init+0x82>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000ffa:	0025      	movs	r5, r4
 8000ffc:	3551      	adds	r5, #81	; 0x51
 8000ffe:	782b      	ldrb	r3, [r5, #0]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d105      	bne.n	8001012 <HAL_SPI_Init+0x22>
    hspi->Lock = HAL_UNLOCKED;
 8001006:	0022      	movs	r2, r4
 8001008:	3250      	adds	r2, #80	; 0x50
 800100a:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 800100c:	0020      	movs	r0, r4
 800100e:	f000 fa4d 	bl	80014ac <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001012:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001014:	2240      	movs	r2, #64	; 0x40
 8001016:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001018:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800101a:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800101c:	68a6      	ldr	r6, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 800101e:	4393      	bics	r3, r2
 8001020:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001022:	6863      	ldr	r3, [r4, #4]
 8001024:	69a2      	ldr	r2, [r4, #24]
 8001026:	4333      	orrs	r3, r6
 8001028:	68e6      	ldr	r6, [r4, #12]
 800102a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800102c:	4333      	orrs	r3, r6
 800102e:	6926      	ldr	r6, [r4, #16]
 8001030:	4333      	orrs	r3, r6
 8001032:	6966      	ldr	r6, [r4, #20]
 8001034:	4333      	orrs	r3, r6
 8001036:	69e6      	ldr	r6, [r4, #28]
 8001038:	4333      	orrs	r3, r6
 800103a:	6a26      	ldr	r6, [r4, #32]
 800103c:	4333      	orrs	r3, r6
 800103e:	2680      	movs	r6, #128	; 0x80
 8001040:	00b6      	lsls	r6, r6, #2
 8001042:	4016      	ands	r6, r2
 8001044:	4303      	orrs	r3, r0
 8001046:	4333      	orrs	r3, r6
 8001048:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800104a:	2304      	movs	r3, #4
 800104c:	0c12      	lsrs	r2, r2, #16
 800104e:	401a      	ands	r2, r3
 8001050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001052:	431a      	orrs	r2, r3
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001054:	2380      	movs	r3, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001056:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001058:	019b      	lsls	r3, r3, #6
 800105a:	4298      	cmp	r0, r3
 800105c:	d101      	bne.n	8001062 <HAL_SPI_Init+0x72>
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800105e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001060:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001062:	69cb      	ldr	r3, [r1, #28]
 8001064:	4a03      	ldr	r2, [pc, #12]	; (8001074 <HAL_SPI_Init+0x84>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001066:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001068:	4013      	ands	r3, r2
 800106a:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800106c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800106e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001070:	702b      	strb	r3, [r5, #0]
}
 8001072:	bd70      	pop	{r4, r5, r6, pc}
 8001074:	fffff7ff 	.word	0xfffff7ff

08001078 <HAL_SPI_TransmitReceive_DMA>:
{
 8001078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 800107a:	0006      	movs	r6, r0
{
 800107c:	9101      	str	r1, [sp, #4]
  __HAL_LOCK(hspi);
 800107e:	3650      	adds	r6, #80	; 0x50
 8001080:	7835      	ldrb	r5, [r6, #0]
{
 8001082:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8001084:	2002      	movs	r0, #2
 8001086:	2d01      	cmp	r5, #1
 8001088:	d054      	beq.n	8001134 <HAL_SPI_TransmitReceive_DMA+0xbc>
  tmp_state           = hspi->State;
 800108a:	0025      	movs	r5, r4
  __HAL_LOCK(hspi);
 800108c:	3801      	subs	r0, #1
 800108e:	7030      	strb	r0, [r6, #0]
  tmp_state           = hspi->State;
 8001090:	3551      	adds	r5, #81	; 0x51
 8001092:	782f      	ldrb	r7, [r5, #0]
 8001094:	b2ff      	uxtb	r7, r7
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8001096:	4287      	cmp	r7, r0
 8001098:	d00c      	beq.n	80010b4 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800109a:	3004      	adds	r0, #4
 800109c:	30ff      	adds	r0, #255	; 0xff
 800109e:	4684      	mov	ip, r0
 80010a0:	6861      	ldr	r1, [r4, #4]
    errorcode = HAL_BUSY;
 80010a2:	3803      	subs	r0, #3
 80010a4:	38ff      	subs	r0, #255	; 0xff
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80010a6:	4561      	cmp	r1, ip
 80010a8:	d142      	bne.n	8001130 <HAL_SPI_TransmitReceive_DMA+0xb8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80010aa:	68a1      	ldr	r1, [r4, #8]
 80010ac:	2900      	cmp	r1, #0
 80010ae:	d13f      	bne.n	8001130 <HAL_SPI_TransmitReceive_DMA+0xb8>
 80010b0:	2f04      	cmp	r7, #4
 80010b2:	d13d      	bne.n	8001130 <HAL_SPI_TransmitReceive_DMA+0xb8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80010b4:	9901      	ldr	r1, [sp, #4]
    errorcode = HAL_ERROR;
 80010b6:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80010b8:	2900      	cmp	r1, #0
 80010ba:	d039      	beq.n	8001130 <HAL_SPI_TransmitReceive_DMA+0xb8>
 80010bc:	2a00      	cmp	r2, #0
 80010be:	d037      	beq.n	8001130 <HAL_SPI_TransmitReceive_DMA+0xb8>
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d035      	beq.n	8001130 <HAL_SPI_TransmitReceive_DMA+0xb8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80010c4:	7828      	ldrb	r0, [r5, #0]
 80010c6:	2804      	cmp	r0, #4
 80010c8:	d001      	beq.n	80010ce <HAL_SPI_TransmitReceive_DMA+0x56>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80010ca:	2005      	movs	r0, #5
 80010cc:	7028      	strb	r0, [r5, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80010ce:	2000      	movs	r0, #0
 80010d0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80010d2:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80010d4:	6460      	str	r0, [r4, #68]	; 0x44
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80010d6:	2080      	movs	r0, #128	; 0x80
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80010d8:	9901      	ldr	r1, [sp, #4]
  hspi->TxXferCount = Size;
 80010da:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80010dc:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->RxXferSize  = Size;
 80010de:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80010e0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80010e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80010e4:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80010e6:	63a2      	str	r2, [r4, #56]	; 0x38
 80010e8:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80010ea:	0180      	lsls	r0, r0, #6
 80010ec:	4283      	cmp	r3, r0
 80010ee:	d106      	bne.n	80010fe <HAL_SPI_TransmitReceive_DMA+0x86>
    SPI_RESET_CRC(hspi);
 80010f0:	6808      	ldr	r0, [r1, #0]
 80010f2:	4f28      	ldr	r7, [pc, #160]	; (8001194 <HAL_SPI_TransmitReceive_DMA+0x11c>)
 80010f4:	4038      	ands	r0, r7
 80010f6:	6008      	str	r0, [r1, #0]
 80010f8:	6808      	ldr	r0, [r1, #0]
 80010fa:	4303      	orrs	r3, r0
 80010fc:	600b      	str	r3, [r1, #0]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80010fe:	782b      	ldrb	r3, [r5, #0]
 8001100:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001102:	2b04      	cmp	r3, #4
 8001104:	d117      	bne.n	8001136 <HAL_SPI_TransmitReceive_DMA+0xbe>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8001106:	4b24      	ldr	r3, [pc, #144]	; (8001198 <HAL_SPI_TransmitReceive_DMA+0x120>)
 8001108:	6303      	str	r3, [r0, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800110a:	4b24      	ldr	r3, [pc, #144]	; (800119c <HAL_SPI_TransmitReceive_DMA+0x124>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800110c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800110e:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <HAL_SPI_TransmitReceive_DMA+0x128>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8001110:	310c      	adds	r1, #12
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8001112:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 8001114:	2300      	movs	r3, #0
 8001116:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8001118:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800111a:	b29b      	uxth	r3, r3
 800111c:	f7ff fa0a 	bl	8000534 <HAL_DMA_Start_IT>
 8001120:	1e03      	subs	r3, r0, #0
 8001122:	d00c      	beq.n	800113e <HAL_SPI_TransmitReceive_DMA+0xc6>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001124:	2310      	movs	r3, #16
    hspi->State = HAL_SPI_STATE_READY;
 8001126:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001128:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800112a:	4313      	orrs	r3, r2
 800112c:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 800112e:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hspi);
 8001130:	2300      	movs	r3, #0
 8001132:	7033      	strb	r3, [r6, #0]
}
 8001134:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8001136:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <HAL_SPI_TransmitReceive_DMA+0x12c>)
 8001138:	6303      	str	r3, [r0, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <HAL_SPI_TransmitReceive_DMA+0x130>)
 800113c:	e7e6      	b.n	800110c <HAL_SPI_TransmitReceive_DMA+0x94>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800113e:	2701      	movs	r7, #1
 8001140:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8001142:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001144:	6851      	ldr	r1, [r2, #4]
 8001146:	4339      	orrs	r1, r7
 8001148:	6051      	str	r1, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800114a:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800114c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800114e:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8001150:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8001152:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001154:	320c      	adds	r2, #12
 8001156:	b29b      	uxth	r3, r3
 8001158:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800115a:	f7ff f9eb 	bl	8000534 <HAL_DMA_Start_IT>
 800115e:	2800      	cmp	r0, #0
 8001160:	d006      	beq.n	8001170 <HAL_SPI_TransmitReceive_DMA+0xf8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001162:	2310      	movs	r3, #16
 8001164:	6d62      	ldr	r2, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001166:	0038      	movs	r0, r7
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001168:	4313      	orrs	r3, r2
 800116a:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 800116c:	702f      	strb	r7, [r5, #0]
    goto error;
 800116e:	e7df      	b.n	8001130 <HAL_SPI_TransmitReceive_DMA+0xb8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001170:	2240      	movs	r2, #64	; 0x40
 8001172:	6823      	ldr	r3, [r4, #0]
 8001174:	6819      	ldr	r1, [r3, #0]
 8001176:	4211      	tst	r1, r2
 8001178:	d102      	bne.n	8001180 <HAL_SPI_TransmitReceive_DMA+0x108>
    __HAL_SPI_ENABLE(hspi);
 800117a:	6819      	ldr	r1, [r3, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001180:	2220      	movs	r2, #32
 8001182:	6859      	ldr	r1, [r3, #4]
 8001184:	430a      	orrs	r2, r1
 8001186:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001188:	2202      	movs	r2, #2
 800118a:	6859      	ldr	r1, [r3, #4]
 800118c:	430a      	orrs	r2, r1
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	e7ce      	b.n	8001130 <HAL_SPI_TransmitReceive_DMA+0xb8>
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	ffffdfff 	.word	0xffffdfff
 8001198:	080011b1 	.word	0x080011b1
 800119c:	080011ed 	.word	0x080011ed
 80011a0:	080011c7 	.word	0x080011c7
 80011a4:	080011bd 	.word	0x080011bd
 80011a8:	08001289 	.word	0x08001289

080011ac <HAL_SPI_RxCpltCallback>:
 80011ac:	4770      	bx	lr

080011ae <HAL_SPI_RxHalfCpltCallback>:
 80011ae:	4770      	bx	lr

080011b0 <SPI_DMAHalfReceiveCplt>:
{
 80011b0:	b510      	push	{r4, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 80011b2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80011b4:	f7ff fffb 	bl	80011ae <HAL_SPI_RxHalfCpltCallback>
}
 80011b8:	bd10      	pop	{r4, pc}

080011ba <HAL_SPI_TxRxHalfCpltCallback>:
 80011ba:	4770      	bx	lr

080011bc <SPI_DMAHalfTransmitReceiveCplt>:
{
 80011bc:	b510      	push	{r4, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80011be:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80011c0:	f7ff fffb 	bl	80011ba <HAL_SPI_TxRxHalfCpltCallback>
}
 80011c4:	bd10      	pop	{r4, pc}

080011c6 <SPI_DMAError>:
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80011c6:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80011c8:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80011ca:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80011cc:	6802      	ldr	r2, [r0, #0]
 80011ce:	6853      	ldr	r3, [r2, #4]
 80011d0:	438b      	bics	r3, r1
 80011d2:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80011d4:	2310      	movs	r3, #16
 80011d6:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80011d8:	4313      	orrs	r3, r2
 80011da:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80011dc:	0003      	movs	r3, r0
 80011de:	2201      	movs	r2, #1
 80011e0:	3351      	adds	r3, #81	; 0x51
 80011e2:	701a      	strb	r2, [r3, #0]
  HAL_SPI_ErrorCallback(hspi);
 80011e4:	f000 f961 	bl	80014aa <HAL_SPI_ErrorCallback>
}
 80011e8:	bd10      	pop	{r4, pc}
	...

080011ec <SPI_DMAReceiveCplt>:
{
 80011ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80011ee:	0006      	movs	r6, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80011f0:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 80011f2:	f7ff f907 	bl	8000404 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80011f6:	2120      	movs	r1, #32
 80011f8:	6833      	ldr	r3, [r6, #0]
  tickstart = HAL_GetTick();
 80011fa:	0005      	movs	r5, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	420b      	tst	r3, r1
 8001200:	d13c      	bne.n	800127c <SPI_DMAReceiveCplt+0x90>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001202:	6822      	ldr	r2, [r4, #0]
 8001204:	6853      	ldr	r3, [r2, #4]
 8001206:	438b      	bics	r3, r1
 8001208:	6053      	str	r3, [r2, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800120e:	019b      	lsls	r3, r3, #6
 8001210:	429a      	cmp	r2, r3
 8001212:	d10e      	bne.n	8001232 <SPI_DMAReceiveCplt+0x46>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001214:	2201      	movs	r2, #1
 8001216:	9000      	str	r0, [sp, #0]
 8001218:	2364      	movs	r3, #100	; 0x64
 800121a:	0011      	movs	r1, r2
 800121c:	0020      	movs	r0, r4
 800121e:	f7ff fe53 	bl	8000ec8 <SPI_WaitFlagStateUntilTimeout>
 8001222:	2800      	cmp	r0, #0
 8001224:	d003      	beq.n	800122e <SPI_DMAReceiveCplt+0x42>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001226:	2302      	movs	r3, #2
 8001228:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800122a:	4313      	orrs	r3, r2
 800122c:	6563      	str	r3, [r4, #84]	; 0x54
      READ_REG(hspi->Instance->DR);
 800122e:	6823      	ldr	r3, [r4, #0]
 8001230:	68db      	ldr	r3, [r3, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001232:	2103      	movs	r1, #3
 8001234:	6822      	ldr	r2, [r4, #0]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001236:	0020      	movs	r0, r4
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001238:	6853      	ldr	r3, [r2, #4]
 800123a:	438b      	bics	r3, r1
 800123c:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800123e:	3161      	adds	r1, #97	; 0x61
 8001240:	002a      	movs	r2, r5
 8001242:	f7ff fea8 	bl	8000f96 <SPI_EndRxTransaction>
 8001246:	2800      	cmp	r0, #0
 8001248:	d001      	beq.n	800124e <SPI_DMAReceiveCplt+0x62>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800124a:	2320      	movs	r3, #32
 800124c:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->RxXferCount = 0U;
 800124e:	2300      	movs	r3, #0
 8001250:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8001252:	0023      	movs	r3, r4
 8001254:	2201      	movs	r2, #1
 8001256:	3351      	adds	r3, #81	; 0x51
 8001258:	701a      	strb	r2, [r3, #0]
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800125a:	6822      	ldr	r2, [r4, #0]
 800125c:	6893      	ldr	r3, [r2, #8]
 800125e:	06db      	lsls	r3, r3, #27
 8001260:	d505      	bpl.n	800126e <SPI_DMAReceiveCplt+0x82>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001262:	2302      	movs	r3, #2
 8001264:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001266:	430b      	orrs	r3, r1
 8001268:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <SPI_DMAReceiveCplt+0x98>)
 800126c:	6093      	str	r3, [r2, #8]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800126e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <SPI_DMAReceiveCplt+0x90>
      HAL_SPI_ErrorCallback(hspi);
 8001274:	0020      	movs	r0, r4
 8001276:	f000 f918 	bl	80014aa <HAL_SPI_ErrorCallback>
}
 800127a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
  HAL_SPI_RxCpltCallback(hspi);
 800127c:	0020      	movs	r0, r4
 800127e:	f7ff ff95 	bl	80011ac <HAL_SPI_RxCpltCallback>
 8001282:	e7fa      	b.n	800127a <SPI_DMAReceiveCplt+0x8e>
 8001284:	0000ffef 	.word	0x0000ffef

08001288 <SPI_DMATransmitReceiveCplt>:
{
 8001288:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800128a:	0006      	movs	r6, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800128c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 800128e:	f7ff f8b9 	bl	8000404 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001292:	2120      	movs	r1, #32
 8001294:	6833      	ldr	r3, [r6, #0]
  tickstart = HAL_GetTick();
 8001296:	0005      	movs	r5, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	420b      	tst	r3, r1
 800129c:	d13e      	bne.n	800131c <SPI_DMATransmitReceiveCplt+0x94>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800129e:	6822      	ldr	r2, [r4, #0]
 80012a0:	6853      	ldr	r3, [r2, #4]
 80012a2:	438b      	bics	r3, r1
 80012a4:	6053      	str	r3, [r2, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80012aa:	019b      	lsls	r3, r3, #6
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d10e      	bne.n	80012ce <SPI_DMATransmitReceiveCplt+0x46>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80012b0:	2201      	movs	r2, #1
 80012b2:	9000      	str	r0, [sp, #0]
 80012b4:	2364      	movs	r3, #100	; 0x64
 80012b6:	0011      	movs	r1, r2
 80012b8:	0020      	movs	r0, r4
 80012ba:	f7ff fe05 	bl	8000ec8 <SPI_WaitFlagStateUntilTimeout>
 80012be:	2800      	cmp	r0, #0
 80012c0:	d003      	beq.n	80012ca <SPI_DMATransmitReceiveCplt+0x42>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80012c2:	2302      	movs	r3, #2
 80012c4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80012c6:	4313      	orrs	r3, r2
 80012c8:	6563      	str	r3, [r4, #84]	; 0x54
      READ_REG(hspi->Instance->DR);
 80012ca:	6823      	ldr	r3, [r4, #0]
 80012cc:	68db      	ldr	r3, [r3, #12]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80012ce:	002a      	movs	r2, r5
 80012d0:	2164      	movs	r1, #100	; 0x64
 80012d2:	0020      	movs	r0, r4
 80012d4:	f7ff fe3e 	bl	8000f54 <SPI_EndRxTxTransaction>
 80012d8:	2800      	cmp	r0, #0
 80012da:	d003      	beq.n	80012e4 <SPI_DMATransmitReceiveCplt+0x5c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80012dc:	2320      	movs	r3, #32
 80012de:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80012e0:	4313      	orrs	r3, r2
 80012e2:	6563      	str	r3, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80012e4:	2103      	movs	r1, #3
 80012e6:	6823      	ldr	r3, [r4, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	438a      	bics	r2, r1
 80012ec:	605a      	str	r2, [r3, #4]
    hspi->TxXferCount = 0U;
 80012ee:	2200      	movs	r2, #0
 80012f0:	86e2      	strh	r2, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80012f2:	87e2      	strh	r2, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80012f4:	0022      	movs	r2, r4
 80012f6:	3902      	subs	r1, #2
 80012f8:	3251      	adds	r2, #81	; 0x51
 80012fa:	7011      	strb	r1, [r2, #0]
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	06d2      	lsls	r2, r2, #27
 8001300:	d505      	bpl.n	800130e <SPI_DMATransmitReceiveCplt+0x86>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001302:	2202      	movs	r2, #2
 8001304:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001306:	430a      	orrs	r2, r1
 8001308:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800130a:	4a06      	ldr	r2, [pc, #24]	; (8001324 <SPI_DMATransmitReceiveCplt+0x9c>)
 800130c:	609a      	str	r2, [r3, #8]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800130e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <SPI_DMATransmitReceiveCplt+0x94>
      HAL_SPI_ErrorCallback(hspi);
 8001314:	0020      	movs	r0, r4
 8001316:	f000 f8c8 	bl	80014aa <HAL_SPI_ErrorCallback>
}
 800131a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
  HAL_SPI_TxRxCpltCallback(hspi);
 800131c:	0020      	movs	r0, r4
 800131e:	f000 f8c3 	bl	80014a8 <HAL_SPI_TxRxCpltCallback>
 8001322:	e7fa      	b.n	800131a <SPI_DMATransmitReceiveCplt+0x92>
 8001324:	0000ffef 	.word	0x0000ffef

08001328 <HAL_SPI_GetState>:
  return hspi->State;
 8001328:	3051      	adds	r0, #81	; 0x51
 800132a:	7800      	ldrb	r0, [r0, #0]
 800132c:	b2c0      	uxtb	r0, r0
}
 800132e:	4770      	bx	lr

08001330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001332:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001334:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001336:	e003      	b.n	8001340 <LoopCopyDataInit>

08001338 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800133a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800133c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800133e:	3104      	adds	r1, #4

08001340 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001340:	480b      	ldr	r0, [pc, #44]	; (8001370 <LoopForever+0xa>)
  ldr  r3, =_edata
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <LoopForever+0xe>)
  adds  r2, r0, r1
 8001344:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001346:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001348:	d3f6      	bcc.n	8001338 <CopyDataInit>
  ldr  r2, =_sbss
 800134a:	4a0b      	ldr	r2, [pc, #44]	; (8001378 <LoopForever+0x12>)
  b  LoopFillZerobss
 800134c:	e002      	b.n	8001354 <LoopFillZerobss>

0800134e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800134e:	2300      	movs	r3, #0
  str  r3, [r2]
 8001350:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001352:	3204      	adds	r2, #4

08001354 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <LoopForever+0x16>)
  cmp  r2, r3
 8001356:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001358:	d3f9      	bcc.n	800134e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800135a:	f7fe ffef 	bl	800033c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135e:	f000 f94b 	bl	80015f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001362:	f000 f80f 	bl	8001384 <main>

08001366 <LoopForever>:

LoopForever:
    b LoopForever
 8001366:	e7fe      	b.n	8001366 <LoopForever>
  ldr   r0, =_estack
 8001368:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 800136c:	08001684 	.word	0x08001684
  ldr  r0, =_sdata
 8001370:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001374:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 8001378:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 800137c:	200001c0 	.word	0x200001c0

08001380 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <ADC1_COMP_IRQHandler>
	...

08001384 <main>:
  * @brief  Main program.
  * @param  None
  * @retval None
  */
int main(void)
{
 8001384:	b570      	push	{r4, r5, r6, lr}
 8001386:	b094      	sub	sp, #80	; 0x50
             timer for example or other time source), keeping in mind that Time base 
             duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
             handled in milliseconds basis.
       - Low Level Initialization
     */
  HAL_Init();
 8001388:	f7ff f820 	bl	80003cc <HAL_Init>

  /* Configure LED2 */
  BSP_LED_Init(LED2);
 800138c:	2000      	movs	r0, #0
 800138e:	f7fe ff47 	bl	8000220 <BSP_LED_Init>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	2380      	movs	r3, #128	; 0x80
 8001394:	4a3d      	ldr	r2, [pc, #244]	; (800148c <main+0x108>)
 8001396:	055b      	lsls	r3, r3, #21
 8001398:	6b91      	ldr	r1, [r2, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
  RCC_OscInitStruct.MSICalibrationValue=0x00;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139a:	a806      	add	r0, sp, #24
  __HAL_RCC_PWR_CLK_ENABLE();
 800139c:	430b      	orrs	r3, r1
 800139e:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013a0:	23c0      	movs	r3, #192	; 0xc0
 80013a2:	4a3b      	ldr	r2, [pc, #236]	; (8001490 <main+0x10c>)
 80013a4:	015b      	lsls	r3, r3, #5
 80013a6:	6811      	ldr	r1, [r2, #0]
 80013a8:	430b      	orrs	r3, r1
 80013aa:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013ac:	2310      	movs	r3, #16
 80013ae:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013b0:	3b0f      	subs	r3, #15
 80013b2:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80013b4:	23a0      	movs	r3, #160	; 0xa0
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.MSICalibrationValue=0x00;
 80013ba:	2300      	movs	r3, #0
 80013bc:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013be:	9310      	str	r3, [sp, #64]	; 0x40
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c0:	f7ff fa46 	bl	8000850 <HAL_RCC_OscConfig>
 80013c4:	1e01      	subs	r1, r0, #0
 80013c6:	d000      	beq.n	80013ca <main+0x46>
 80013c8:	e7fe      	b.n	80013c8 <main+0x44>
  }
  
  
  /* Select MSI as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80013ca:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80013cc:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ce:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;  
 80013d0:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 80013d2:	9005      	str	r0, [sp, #20]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013d4:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80013d6:	9301      	str	r3, [sp, #4]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013d8:	f7ff fcbe 	bl	8000d58 <HAL_RCC_ClockConfig>
 80013dc:	2800      	cmp	r0, #0
 80013de:	d000      	beq.n	80013e2 <main+0x5e>
 80013e0:	e7fe      	b.n	80013e0 <main+0x5c>
  SpiHandle.Instance               = SPIx;
 80013e2:	4c2c      	ldr	r4, [pc, #176]	; (8001494 <main+0x110>)
 80013e4:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <main+0x114>)
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 80013e6:	60a0      	str	r0, [r4, #8]
  SpiHandle.Instance               = SPIx;
 80013e8:	6023      	str	r3, [r4, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013ea:	2320      	movs	r3, #32
 80013ec:	61e3      	str	r3, [r4, #28]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_ENABLE;
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	019b      	lsls	r3, r3, #6
 80013f2:	62a3      	str	r3, [r4, #40]	; 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 80013f4:	2307      	movs	r3, #7
 80013f6:	62e3      	str	r3, [r4, #44]	; 0x2c
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 80013f8:	33fa      	adds	r3, #250	; 0xfa
 80013fa:	33ff      	adds	r3, #255	; 0xff
  SpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80013fc:	6160      	str	r0, [r4, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80013fe:	6120      	str	r0, [r4, #16]
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8001400:	60e0      	str	r0, [r4, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001402:	6220      	str	r0, [r4, #32]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001404:	6260      	str	r0, [r4, #36]	; 0x24
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8001406:	61a3      	str	r3, [r4, #24]
  if(HAL_SPI_Init(&SpiHandle) != HAL_OK)
 8001408:	0020      	movs	r0, r4
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800140a:	3bfc      	subs	r3, #252	; 0xfc
 800140c:	6063      	str	r3, [r4, #4]
  if(HAL_SPI_Init(&SpiHandle) != HAL_OK)
 800140e:	f7ff fdef 	bl	8000ff0 <HAL_SPI_Init>
 8001412:	1e05      	subs	r5, r0, #0
 8001414:	d000      	beq.n	8001418 <main+0x94>
 8001416:	e7fe      	b.n	8001416 <main+0x92>
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 8001418:	0001      	movs	r1, r0
 800141a:	f7fe ff41 	bl	80002a0 <BSP_PB_Init>
  BSP_LED_On(LED2);
 800141e:	0028      	movs	r0, r5
 8001420:	f7fe ff26 	bl	8000270 <BSP_LED_On>
  while(BSP_PB_GetState(BUTTON_KEY) != 0)
 8001424:	2000      	movs	r0, #0
 8001426:	f7fe ff75 	bl	8000314 <BSP_PB_GetState>
 800142a:	2800      	cmp	r0, #0
 800142c:	d1fa      	bne.n	8001424 <main+0xa0>
  while(GPIO_read_NSS_state(GPIO_PIN_10) != 0)
 800142e:	2580      	movs	r5, #128	; 0x80
  BSP_LED_Off(LED2);
 8001430:	f7fe ff2a 	bl	8000288 <BSP_LED_Off>
  while(GPIO_read_NSS_state(GPIO_PIN_10) != 0)
 8001434:	00ed      	lsls	r5, r5, #3
 8001436:	0028      	movs	r0, r5
 8001438:	f7fe ff78 	bl	800032c <GPIO_read_NSS_state>
 800143c:	2800      	cmp	r0, #0
 800143e:	d1fa      	bne.n	8001436 <main+0xb2>
  if(HAL_SPI_TransmitReceive_DMA(&SpiHandle, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, BUFFERSIZE) != HAL_OK)
 8001440:	4d16      	ldr	r5, [pc, #88]	; (800149c <main+0x118>)
 8001442:	4e17      	ldr	r6, [pc, #92]	; (80014a0 <main+0x11c>)
 8001444:	2306      	movs	r3, #6
 8001446:	002a      	movs	r2, r5
 8001448:	0031      	movs	r1, r6
 800144a:	0020      	movs	r0, r4
 800144c:	f7ff fe14 	bl	8001078 <HAL_SPI_TransmitReceive_DMA>
 8001450:	2800      	cmp	r0, #0
 8001452:	d000      	beq.n	8001456 <main+0xd2>
 8001454:	e7fe      	b.n	8001454 <main+0xd0>
  while (HAL_SPI_GetState(&SpiHandle) != HAL_SPI_STATE_READY)
 8001456:	0020      	movs	r0, r4
 8001458:	f7ff ff66 	bl	8001328 <HAL_SPI_GetState>
 800145c:	2801      	cmp	r0, #1
 800145e:	d1fa      	bne.n	8001456 <main+0xd2>
 8001460:	2200      	movs	r2, #0
 8001462:	2306      	movs	r3, #6
  * @retval 0  : pBuffer1 identical to pBuffer2
  *         >0 : pBuffer1 differs from pBuffer2
  */
static uint16_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
  while (BufferLength--)
 8001464:	490f      	ldr	r1, [pc, #60]	; (80014a4 <main+0x120>)
  {
    if((*pBuffer1) != *pBuffer2)
 8001466:	3607      	adds	r6, #7
  while (BufferLength--)
 8001468:	3b01      	subs	r3, #1
 800146a:	b29b      	uxth	r3, r3
 800146c:	428b      	cmp	r3, r1
 800146e:	d103      	bne.n	8001478 <main+0xf4>
  BSP_LED_On(LED2);
 8001470:	2000      	movs	r0, #0
 8001472:	f7fe fefd 	bl	8000270 <BSP_LED_On>
 8001476:	e7fe      	b.n	8001476 <main+0xf2>
 8001478:	1c50      	adds	r0, r2, #1
    if((*pBuffer1) != *pBuffer2)
 800147a:	5d94      	ldrb	r4, [r2, r6]
 800147c:	5caa      	ldrb	r2, [r5, r2]
 800147e:	4294      	cmp	r4, r2
 8001480:	d101      	bne.n	8001486 <main+0x102>
 8001482:	0002      	movs	r2, r0
 8001484:	e7f0      	b.n	8001468 <main+0xe4>
  if(Buffercmp((uint8_t*)aCompareBuffer, (uint8_t*)aRxBuffer, BUFFERSIZE))
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f2      	beq.n	8001470 <main+0xec>
 800148a:	e7fe      	b.n	800148a <main+0x106>
 800148c:	40021000 	.word	0x40021000
 8001490:	40007000 	.word	0x40007000
 8001494:	20000160 	.word	0x20000160
 8001498:	40003800 	.word	0x40003800
 800149c:	200001b8 	.word	0x200001b8
 80014a0:	20000010 	.word	0x20000010
 80014a4:	0000ffff 	.word	0x0000ffff

080014a8 <HAL_SPI_TxRxCpltCallback>:
}
 80014a8:	4770      	bx	lr

080014aa <HAL_SPI_ErrorCallback>:
{
 80014aa:	e7fe      	b.n	80014aa <HAL_SPI_ErrorCallback>

080014ac <HAL_SPI_MspInit>:
 *           - NVIC configuration for DMA interrupt request enable
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80014ac:	b5f0      	push	{r4, r5, r6, r7, lr}

	GPIO_InitTypeDef  GPIO_InitStruct;

	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* Enable GPIO TX/RX clock */
	SPIx_SCK_GPIO_CLK_ENABLE();
 80014ae:	2602      	movs	r6, #2
	SPIx_MISO_GPIO_CLK_ENABLE();
	SPIx_MOSI_GPIO_CLK_ENABLE();
	/* Enable SPI2 clock */
	SPIx_CLK_ENABLE();
 80014b0:	2180      	movs	r1, #128	; 0x80
	SPIx_SCK_GPIO_CLK_ENABLE();
 80014b2:	4b42      	ldr	r3, [pc, #264]	; (80015bc <HAL_SPI_MspInit+0x110>)
{
 80014b4:	b08b      	sub	sp, #44	; 0x2c
	SPIx_SCK_GPIO_CLK_ENABLE();
 80014b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	SPIx_CLK_ENABLE();
 80014b8:	01c9      	lsls	r1, r1, #7
	SPIx_SCK_GPIO_CLK_ENABLE();
 80014ba:	4332      	orrs	r2, r6
 80014bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80014be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	/* SPI SCK GPIO pin configuration  */
	GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull      = GPIO_PULLUP;
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH  ;
	GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 80014c0:	2500      	movs	r5, #0
	SPIx_SCK_GPIO_CLK_ENABLE();
 80014c2:	4032      	ands	r2, r6
 80014c4:	9201      	str	r2, [sp, #4]
 80014c6:	9a01      	ldr	r2, [sp, #4]
	SPIx_MISO_GPIO_CLK_ENABLE();
 80014c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c

	HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 80014ca:	4c3d      	ldr	r4, [pc, #244]	; (80015c0 <HAL_SPI_MspInit+0x114>)
	SPIx_MISO_GPIO_CLK_ENABLE();
 80014cc:	4332      	orrs	r2, r6
 80014ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80014d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
{
 80014d2:	0007      	movs	r7, r0
	SPIx_MISO_GPIO_CLK_ENABLE();
 80014d4:	4032      	ands	r2, r6
 80014d6:	9202      	str	r2, [sp, #8]
 80014d8:	9a02      	ldr	r2, [sp, #8]
	SPIx_MOSI_GPIO_CLK_ENABLE();
 80014da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 80014dc:	0020      	movs	r0, r4
	SPIx_MOSI_GPIO_CLK_ENABLE();
 80014de:	4332      	orrs	r2, r6
 80014e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80014e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e4:	4032      	ands	r2, r6
 80014e6:	9203      	str	r2, [sp, #12]
 80014e8:	9a03      	ldr	r2, [sp, #12]
	SPIx_CLK_ENABLE();
 80014ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014ec:	430a      	orrs	r2, r1
 80014ee:	639a      	str	r2, [r3, #56]	; 0x38
	DMAx_CLK_ENABLE();
 80014f0:	2201      	movs	r2, #1
 80014f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014f4:	4311      	orrs	r1, r2
 80014f6:	6319      	str	r1, [r3, #48]	; 0x30
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80014fa:	9207      	str	r2, [sp, #28]
	DMAx_CLK_ENABLE();
 80014fc:	4013      	ands	r3, r2
 80014fe:	9304      	str	r3, [sp, #16]
 8001500:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
 8001502:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001504:	aa05      	add	r2, sp, #20
 8001506:	0011      	movs	r1, r2
	GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
 8001508:	019b      	lsls	r3, r3, #6
 800150a:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800150c:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH  ;
 800150e:	9608      	str	r6, [sp, #32]
	GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8001510:	9509      	str	r5, [sp, #36]	; 0x24
	HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001512:	f7ff f89b 	bl	800064c <HAL_GPIO_Init>

	/* SPI MISO GPIO pin configuration  */
	GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8001516:	2180      	movs	r1, #128	; 0x80
 8001518:	01c9      	lsls	r1, r1, #7
 800151a:	9105      	str	r1, [sp, #20]
	GPIO_InitStruct.Alternate = SPIx_MISO_AF;

	HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 800151c:	0020      	movs	r0, r4
 800151e:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 8001520:	9509      	str	r5, [sp, #36]	; 0x24
	HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001522:	f7ff f893 	bl	800064c <HAL_GPIO_Init>

	/* SPI MOSI GPIO pin configuration  */
	GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8001526:	2380      	movs	r3, #128	; 0x80
	GPIO_InitStruct.Alternate = SPIx_MOSI_AF;

	HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001528:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 800152a:	021b      	lsls	r3, r3, #8
	HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800152c:	0020      	movs	r0, r4
	GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 800152e:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 8001530:	9509      	str	r5, [sp, #36]	; 0x24
	HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001532:	f7ff f88b 	bl	800064c <HAL_GPIO_Init>

	/* SPI NSS GPIO pin configuration  */
	GPIO_InitStruct.Pin = SPIx_NSS_PIN;
 8001536:	2380      	movs	r3, #128	; 0x80
	GPIO_InitStruct.Alternate = SPIx_NSS_AF;
	HAL_GPIO_Init(SPIx_NSS_GPIO_PORT, &GPIO_InitStruct);
 8001538:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = SPIx_NSS_PIN;
 800153a:	015b      	lsls	r3, r3, #5
	HAL_GPIO_Init(SPIx_NSS_GPIO_PORT, &GPIO_InitStruct);
 800153c:	0020      	movs	r0, r4
	GPIO_InitStruct.Pin = SPIx_NSS_PIN;
 800153e:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Alternate = SPIx_NSS_AF;
 8001540:	9509      	str	r5, [sp, #36]	; 0x24
	HAL_GPIO_Init(SPIx_NSS_GPIO_PORT, &GPIO_InitStruct);
 8001542:	f7ff f883 	bl	800064c <HAL_GPIO_Init>

	/* SPI MASTERCOM TRIG GPIO pin configuration  */
	GPIO_InitStruct.Pin = SPIx_MASTERCOM_TRIG_PIN;
 8001546:	2380      	movs	r3, #128	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
	GPIO_InitStruct.Alternate = SPIx_MASTERCOM_TRIG_AF;
	HAL_GPIO_Init(SPIx_MASTERCOM_TRIG_GPIO_PORT, &GPIO_InitStruct);
 8001548:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = SPIx_MASTERCOM_TRIG_PIN;
 800154a:	00db      	lsls	r3, r3, #3
	HAL_GPIO_Init(SPIx_MASTERCOM_TRIG_GPIO_PORT, &GPIO_InitStruct);
 800154c:	0020      	movs	r0, r4
	GPIO_InitStruct.Pin = SPIx_MASTERCOM_TRIG_PIN;
 800154e:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
 8001550:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Alternate = SPIx_MASTERCOM_TRIG_AF;
 8001552:	9509      	str	r5, [sp, #36]	; 0x24
	HAL_GPIO_Init(SPIx_MASTERCOM_TRIG_GPIO_PORT, &GPIO_InitStruct);
 8001554:	f7ff f87a 	bl	800064c <HAL_GPIO_Init>

	/*##-3- Configure the DMA channel ##########################################*/
	/* Configure the DMA handler for Transmission process */
	hdma_tx.Init.Request             = SPIx_TX_DMA_REQUEST;

	hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001558:	2310      	movs	r3, #16
	hdma_tx.Init.Request             = SPIx_TX_DMA_REQUEST;
 800155a:	4c1a      	ldr	r4, [pc, #104]	; (80015c4 <HAL_SPI_MspInit+0x118>)
	hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
	hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800155c:	2280      	movs	r2, #128	; 0x80
	hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800155e:	60a3      	str	r3, [r4, #8]
	hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
	hdma_tx.Init.Mode                = DMA_NORMAL;
	hdma_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	019b      	lsls	r3, r3, #6
 8001564:	6223      	str	r3, [r4, #32]
	hdma_tx.Instance = SPIx_TX_DMA_CHANNEL;
 8001566:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <HAL_SPI_MspInit+0x11c>)

	HAL_DMA_Init(&hdma_tx);
 8001568:	0020      	movs	r0, r4
	hdma_tx.Init.Request             = SPIx_TX_DMA_REQUEST;
 800156a:	6066      	str	r6, [r4, #4]
	hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800156c:	6122      	str	r2, [r4, #16]
	hdma_tx.Instance = SPIx_TX_DMA_CHANNEL;
 800156e:	6023      	str	r3, [r4, #0]
	hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001570:	60e5      	str	r5, [r4, #12]
	hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001572:	6165      	str	r5, [r4, #20]
	hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8001574:	61a5      	str	r5, [r4, #24]
	hdma_tx.Init.Mode                = DMA_NORMAL;
 8001576:	61e5      	str	r5, [r4, #28]
	HAL_DMA_Init(&hdma_tx);
 8001578:	f7fe ff98 	bl	80004ac <HAL_DMA_Init>
	hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
	hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
	hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
	hdma_rx.Init.Mode                = DMA_NORMAL;
	hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800157c:	2380      	movs	r3, #128	; 0x80
	hdma_rx.Init.Request             = SPIx_RX_DMA_REQUEST;
 800157e:	64e6      	str	r6, [r4, #76]	; 0x4c
	hdma_rx.Instance = SPIx_RX_DMA_CHANNEL;


	HAL_DMA_Init(&hdma_rx);
 8001580:	0026      	movs	r6, r4
	hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8001582:	2280      	movs	r2, #128	; 0x80
	hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001584:	019b      	lsls	r3, r3, #6
 8001586:	66a3      	str	r3, [r4, #104]	; 0x68
	HAL_DMA_Init(&hdma_rx);
 8001588:	3648      	adds	r6, #72	; 0x48
	hdma_rx.Instance = SPIx_RX_DMA_CHANNEL;
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_SPI_MspInit+0x120>)
	__HAL_LINKDMA(hspi, hdmatx, hdma_tx);
 800158c:	64bc      	str	r4, [r7, #72]	; 0x48
	HAL_DMA_Init(&hdma_rx);
 800158e:	0030      	movs	r0, r6
	hdma_rx.Instance = SPIx_RX_DMA_CHANNEL;
 8001590:	64a3      	str	r3, [r4, #72]	; 0x48
	hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8001592:	65a2      	str	r2, [r4, #88]	; 0x58
	__HAL_LINKDMA(hspi, hdmatx, hdma_tx);
 8001594:	62a7      	str	r7, [r4, #40]	; 0x28
	hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001596:	6525      	str	r5, [r4, #80]	; 0x50
	hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001598:	6565      	str	r5, [r4, #84]	; 0x54
	hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800159a:	65e5      	str	r5, [r4, #92]	; 0x5c
	hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 800159c:	6625      	str	r5, [r4, #96]	; 0x60
	hdma_rx.Init.Mode                = DMA_NORMAL;
 800159e:	6665      	str	r5, [r4, #100]	; 0x64
	HAL_DMA_Init(&hdma_rx);
 80015a0:	f7fe ff84 	bl	80004ac <HAL_DMA_Init>

	/* Associate the initialized DMA handle to the the SPI handle */
	__HAL_LINKDMA(hspi, hdmarx, hdma_rx);

	/* NVIC configuration for DMA transfer complete interrupt (SPI2_RX) */
	HAL_NVIC_SetPriority(SPIx_DMA_RX_IRQn, 0, 0);
 80015a4:	002a      	movs	r2, r5
 80015a6:	0029      	movs	r1, r5
	__HAL_LINKDMA(hspi, hdmarx, hdma_rx);
 80015a8:	64fe      	str	r6, [r7, #76]	; 0x4c
	HAL_NVIC_SetPriority(SPIx_DMA_RX_IRQn, 0, 0);
 80015aa:	200b      	movs	r0, #11
	__HAL_LINKDMA(hspi, hdmarx, hdma_rx);
 80015ac:	6727      	str	r7, [r4, #112]	; 0x70
	HAL_NVIC_SetPriority(SPIx_DMA_RX_IRQn, 0, 0);
 80015ae:	f7fe ff2f 	bl	8000410 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SPIx_DMA_RX_IRQn);
 80015b2:	200b      	movs	r0, #11
 80015b4:	f7fe ff56 	bl	8000464 <HAL_NVIC_EnableIRQ>
}
 80015b8:	b00b      	add	sp, #44	; 0x2c
 80015ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015bc:	40021000 	.word	0x40021000
 80015c0:	50000400 	.word	0x50000400
 80015c4:	2000003c 	.word	0x2000003c
 80015c8:	40020058 	.word	0x40020058
 80015cc:	40020044 	.word	0x40020044

080015d0 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80015d0:	4770      	bx	lr

080015d2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80015d2:	e7fe      	b.n	80015d2 <HardFault_Handler>

080015d4 <SVC_Handler>:
 80015d4:	4770      	bx	lr

080015d6 <PendSV_Handler>:
 80015d6:	4770      	bx	lr

080015d8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80015d8:	b510      	push	{r4, lr}
  HAL_IncTick();
 80015da:	f7fe ff0b 	bl	80003f4 <HAL_IncTick>
}
 80015de:	bd10      	pop	{r4, pc}

080015e0 <DMA1_Channel4_5_6_7_IRQHandler>:
  * @brief  This function handles DMA Rx interrupt request.  
  * @param  None
  * @retval None    
  */
void SPIx_DMA_RX_IRQHandler(void)
{
 80015e0:	b510      	push	{r4, lr}
  HAL_DMA_IRQHandler(SpiHandle.hdmarx);
 80015e2:	4c04      	ldr	r4, [pc, #16]	; (80015f4 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 80015e4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80015e6:	f7fe ffe5 	bl	80005b4 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(SpiHandle.hdmatx);
 80015ea:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80015ec:	f7fe ffe2 	bl	80005b4 <HAL_DMA_IRQHandler>
}
 80015f0:	bd10      	pop	{r4, pc}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	20000160 	.word	0x20000160

080015f8 <__libc_init_array>:
 80015f8:	b570      	push	{r4, r5, r6, lr}
 80015fa:	2600      	movs	r6, #0
 80015fc:	4d0c      	ldr	r5, [pc, #48]	; (8001630 <__libc_init_array+0x38>)
 80015fe:	4c0d      	ldr	r4, [pc, #52]	; (8001634 <__libc_init_array+0x3c>)
 8001600:	1b64      	subs	r4, r4, r5
 8001602:	10a4      	asrs	r4, r4, #2
 8001604:	42a6      	cmp	r6, r4
 8001606:	d109      	bne.n	800161c <__libc_init_array+0x24>
 8001608:	2600      	movs	r6, #0
 800160a:	f000 f819 	bl	8001640 <_init>
 800160e:	4d0a      	ldr	r5, [pc, #40]	; (8001638 <__libc_init_array+0x40>)
 8001610:	4c0a      	ldr	r4, [pc, #40]	; (800163c <__libc_init_array+0x44>)
 8001612:	1b64      	subs	r4, r4, r5
 8001614:	10a4      	asrs	r4, r4, #2
 8001616:	42a6      	cmp	r6, r4
 8001618:	d105      	bne.n	8001626 <__libc_init_array+0x2e>
 800161a:	bd70      	pop	{r4, r5, r6, pc}
 800161c:	00b3      	lsls	r3, r6, #2
 800161e:	58eb      	ldr	r3, [r5, r3]
 8001620:	4798      	blx	r3
 8001622:	3601      	adds	r6, #1
 8001624:	e7ee      	b.n	8001604 <__libc_init_array+0xc>
 8001626:	00b3      	lsls	r3, r6, #2
 8001628:	58eb      	ldr	r3, [r5, r3]
 800162a:	4798      	blx	r3
 800162c:	3601      	adds	r6, #1
 800162e:	e7f2      	b.n	8001616 <__libc_init_array+0x1e>
 8001630:	0800167c 	.word	0x0800167c
 8001634:	0800167c 	.word	0x0800167c
 8001638:	0800167c 	.word	0x0800167c
 800163c:	08001680 	.word	0x08001680

08001640 <_init>:
 8001640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001646:	bc08      	pop	{r3}
 8001648:	469e      	mov	lr, r3
 800164a:	4770      	bx	lr

0800164c <_fini>:
 800164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001652:	bc08      	pop	{r3}
 8001654:	469e      	mov	lr, r3
 8001656:	4770      	bx	lr
