
STM32L073RZ_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001588  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001648  08001648  00011648  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800166c  0800166c  0001166c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001670  08001670  00011670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  08001674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000114  20000020  08001694  00020020  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000134  08001694  00020134  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000846b  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001969  00000000  00000000  000284b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003693  00000000  00000000  00029e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000638  00000000  00000000  0002d4b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000938  00000000  00000000  0002dae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000131a4  00000000  00000000  0002e420  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006c84  00000000  00000000  000415c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00077c74  00000000  00000000  00048248  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000bfebc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000010c4  00000000  00000000  000bff38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001630 	.word	0x08001630

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08001630 	.word	0x08001630

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpioinitstruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000224:	2800      	cmp	r0, #0
 8000226:	d108      	bne.n	800023a <BSP_LED_Init+0x1a>
 8000228:	2401      	movs	r4, #1
 800022a:	4a0f      	ldr	r2, [pc, #60]	; (8000268 <BSP_LED_Init+0x48>)
 800022c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800022e:	4321      	orrs	r1, r4
 8000230:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000232:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000234:	4023      	ands	r3, r4
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	9b00      	ldr	r3, [sp, #0]

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = LED_PIN[Led];
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800023a:	2301      	movs	r3, #1
  gpioinitstruct.Pin = LED_PIN[Led];
 800023c:	2520      	movs	r5, #32
  gpioinitstruct.Pull = GPIO_NOPULL;
 800023e:	2600      	movs	r6, #0
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &gpioinitstruct);
 8000240:	4c0a      	ldr	r4, [pc, #40]	; (800026c <BSP_LED_Init+0x4c>)
 8000242:	0080      	lsls	r0, r0, #2
 8000244:	1824      	adds	r4, r4, r0
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000246:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(LED_PORT[Led], &gpioinitstruct);
 8000248:	a901      	add	r1, sp, #4
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800024a:	3302      	adds	r3, #2
  HAL_GPIO_Init(LED_PORT[Led], &gpioinitstruct);
 800024c:	6860      	ldr	r0, [r4, #4]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800024e:	9304      	str	r3, [sp, #16]
  gpioinitstruct.Pin = LED_PIN[Led];
 8000250:	9501      	str	r5, [sp, #4]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8000252:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(LED_PORT[Led], &gpioinitstruct);
 8000254:	f000 f9c8 	bl	80005e8 <HAL_GPIO_Init>

  /* Reset PIN to switch off the LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8000258:	0032      	movs	r2, r6
 800025a:	0029      	movs	r1, r5
 800025c:	6860      	ldr	r0, [r4, #4]
 800025e:	f000 fa7d 	bl	800075c <HAL_GPIO_WritePin>
}
 8000262:	b006      	add	sp, #24
 8000264:	bd70      	pop	{r4, r5, r6, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	40021000 	.word	0x40021000
 800026c:	20000000 	.word	0x20000000

08000270 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000270:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8000272:	0083      	lsls	r3, r0, #2
 8000274:	4803      	ldr	r0, [pc, #12]	; (8000284 <BSP_LED_On+0x14>)
 8000276:	2201      	movs	r2, #1
 8000278:	18c0      	adds	r0, r0, r3
 800027a:	2120      	movs	r1, #32
 800027c:	6840      	ldr	r0, [r0, #4]
 800027e:	f000 fa6d 	bl	800075c <HAL_GPIO_WritePin>
}
 8000282:	bd10      	pop	{r4, pc}
 8000284:	20000000 	.word	0x20000000

08000288 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000288:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800028a:	0083      	lsls	r3, r0, #2
 800028c:	4803      	ldr	r0, [pc, #12]	; (800029c <BSP_LED_Off+0x14>)
 800028e:	2200      	movs	r2, #0
 8000290:	18c0      	adds	r0, r0, r3
 8000292:	2120      	movs	r1, #32
 8000294:	6840      	ldr	r0, [r0, #4]
 8000296:	f000 fa61 	bl	800075c <HAL_GPIO_WritePin>
}
 800029a:	bd10      	pop	{r4, pc}
 800029c:	20000000 	.word	0x20000000

080002a0 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80002a0:	b510      	push	{r4, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80002a2:	0083      	lsls	r3, r0, #2
 80002a4:	4803      	ldr	r0, [pc, #12]	; (80002b4 <BSP_LED_Toggle+0x14>)
 80002a6:	2120      	movs	r1, #32
 80002a8:	18c0      	adds	r0, r0, r3
 80002aa:	6840      	ldr	r0, [r0, #4]
 80002ac:	f000 fa5c 	bl	8000768 <HAL_GPIO_TogglePin>
}
 80002b0:	bd10      	pop	{r4, pc}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	20000000 	.word	0x20000000

080002b8 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{    
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80002b8:	2280      	movs	r2, #128	; 0x80
 80002ba:	4b10      	ldr	r3, [pc, #64]	; (80002fc <SystemInit+0x44>)
 80002bc:	0052      	lsls	r2, r2, #1
 80002be:	6819      	ldr	r1, [r3, #0]
 80002c0:	430a      	orrs	r2, r1
 80002c2:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80002c4:	68da      	ldr	r2, [r3, #12]
 80002c6:	490e      	ldr	r1, [pc, #56]	; (8000300 <SystemInit+0x48>)
 80002c8:	400a      	ands	r2, r1
 80002ca:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80002cc:	681a      	ldr	r2, [r3, #0]
 80002ce:	490d      	ldr	r1, [pc, #52]	; (8000304 <SystemInit+0x4c>)
 80002d0:	400a      	ands	r2, r1
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80002d2:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80002d4:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80002d6:	689a      	ldr	r2, [r3, #8]
 80002d8:	438a      	bics	r2, r1
 80002da:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	490a      	ldr	r1, [pc, #40]	; (8000308 <SystemInit+0x50>)
 80002e0:	400a      	ands	r2, r1
 80002e2:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80002e4:	68da      	ldr	r2, [r3, #12]
 80002e6:	4909      	ldr	r1, [pc, #36]	; (800030c <SystemInit+0x54>)
 80002e8:	400a      	ands	r2, r1
 80002ea:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80002ec:	2200      	movs	r2, #0
 80002ee:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80002f0:	2280      	movs	r2, #128	; 0x80
 80002f2:	4b07      	ldr	r3, [pc, #28]	; (8000310 <SystemInit+0x58>)
 80002f4:	0512      	lsls	r2, r2, #20
 80002f6:	609a      	str	r2, [r3, #8]
#endif
}
 80002f8:	4770      	bx	lr
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	40021000 	.word	0x40021000
 8000300:	88ff400c 	.word	0x88ff400c
 8000304:	fef6fff6 	.word	0xfef6fff6
 8000308:	fffbffff 	.word	0xfffbffff
 800030c:	ff02ffff 	.word	0xff02ffff
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000314:	4770      	bx	lr
	...

08000318 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000318:	21fa      	movs	r1, #250	; 0xfa
 800031a:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <HAL_InitTick+0x2c>)
{
 800031c:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800031e:	0089      	lsls	r1, r1, #2
{
 8000320:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000322:	6818      	ldr	r0, [r3, #0]
 8000324:	f7ff fef0 	bl	8000108 <__udivsi3>
 8000328:	f000 f874 	bl	8000414 <HAL_SYSTICK_Config>
 800032c:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 800032e:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000330:	2c00      	cmp	r4, #0
 8000332:	d105      	bne.n	8000340 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000334:	3802      	subs	r0, #2
 8000336:	0022      	movs	r2, r4
 8000338:	0029      	movs	r1, r5
 800033a:	f000 f837 	bl	80003ac <HAL_NVIC_SetPriority>
 800033e:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8000340:	bd70      	pop	{r4, r5, r6, pc}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	2000000c 	.word	0x2000000c

08000348 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000348:	2302      	movs	r3, #2
 800034a:	4a08      	ldr	r2, [pc, #32]	; (800036c <HAL_Init+0x24>)
{
 800034c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800034e:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000350:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000352:	430b      	orrs	r3, r1
 8000354:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000356:	f7ff ffdf 	bl	8000318 <HAL_InitTick>
 800035a:	1e04      	subs	r4, r0, #0
 800035c:	d103      	bne.n	8000366 <HAL_Init+0x1e>
    HAL_MspInit();
 800035e:	f7ff ffd9 	bl	8000314 <HAL_MspInit>
}
 8000362:	0020      	movs	r0, r4
 8000364:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000366:	2401      	movs	r4, #1
 8000368:	e7fb      	b.n	8000362 <HAL_Init+0x1a>
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	40022000 	.word	0x40022000

08000370 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000370:	4a02      	ldr	r2, [pc, #8]	; (800037c <HAL_IncTick+0xc>)
 8000372:	6813      	ldr	r3, [r2, #0]
 8000374:	3301      	adds	r3, #1
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	4770      	bx	lr
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	200000d0 	.word	0x200000d0

08000380 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000380:	4b01      	ldr	r3, [pc, #4]	; (8000388 <HAL_GetTick+0x8>)
 8000382:	6818      	ldr	r0, [r3, #0]
}
 8000384:	4770      	bx	lr
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	200000d0 	.word	0x200000d0

0800038c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800038c:	b570      	push	{r4, r5, r6, lr}
 800038e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000390:	f7ff fff6 	bl	8000380 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 8000394:	1c63      	adds	r3, r4, #1
 8000396:	1e5a      	subs	r2, r3, #1
 8000398:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 800039a:	0005      	movs	r5, r0
    wait++;
 800039c:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800039e:	f7ff ffef 	bl	8000380 <HAL_GetTick>
 80003a2:	1b40      	subs	r0, r0, r5
 80003a4:	42a0      	cmp	r0, r4
 80003a6:	d3fa      	bcc.n	800039e <HAL_Delay+0x12>
  {
  }
}
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080003ac <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	25ff      	movs	r5, #255	; 0xff
 80003b0:	2403      	movs	r4, #3
 80003b2:	002a      	movs	r2, r5
 80003b4:	b2c3      	uxtb	r3, r0
 80003b6:	401c      	ands	r4, r3
 80003b8:	00e4      	lsls	r4, r4, #3
 80003ba:	40a2      	lsls	r2, r4
 80003bc:	0189      	lsls	r1, r1, #6
 80003be:	4029      	ands	r1, r5
 80003c0:	43d2      	mvns	r2, r2
 80003c2:	40a1      	lsls	r1, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80003c4:	2800      	cmp	r0, #0
 80003c6:	da0b      	bge.n	80003e0 <HAL_NVIC_SetPriority+0x34>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003c8:	200f      	movs	r0, #15
 80003ca:	4003      	ands	r3, r0
 80003cc:	3b08      	subs	r3, #8
 80003ce:	480a      	ldr	r0, [pc, #40]	; (80003f8 <HAL_NVIC_SetPriority+0x4c>)
 80003d0:	089b      	lsrs	r3, r3, #2
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	181b      	adds	r3, r3, r0
 80003d6:	69d8      	ldr	r0, [r3, #28]
 80003d8:	4002      	ands	r2, r0
 80003da:	4311      	orrs	r1, r2
 80003dc:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <HAL_NVIC_SetPriority+0x50>)
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003e2:	0880      	lsrs	r0, r0, #2
 80003e4:	0080      	lsls	r0, r0, #2
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	23c0      	movs	r3, #192	; 0xc0
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	58c4      	ldr	r4, [r0, r3]
 80003ee:	4022      	ands	r2, r4
 80003f0:	4311      	orrs	r1, r2
 80003f2:	50c1      	str	r1, [r0, r3]
 80003f4:	e7f3      	b.n	80003de <HAL_NVIC_SetPriority+0x32>
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	e000ed00 	.word	0xe000ed00
 80003fc:	e000e100 	.word	0xe000e100

08000400 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000400:	231f      	movs	r3, #31
 8000402:	4018      	ands	r0, r3
 8000404:	3b1e      	subs	r3, #30
 8000406:	4083      	lsls	r3, r0
 8000408:	4a01      	ldr	r2, [pc, #4]	; (8000410 <HAL_NVIC_EnableIRQ+0x10>)
 800040a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	e000e100 	.word	0xe000e100

08000414 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000414:	4a09      	ldr	r2, [pc, #36]	; (800043c <HAL_SYSTICK_Config+0x28>)
 8000416:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000418:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800041a:	4293      	cmp	r3, r2
 800041c:	d80d      	bhi.n	800043a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800041e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000420:	4a07      	ldr	r2, [pc, #28]	; (8000440 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000422:	4808      	ldr	r0, [pc, #32]	; (8000444 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000424:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000426:	6a03      	ldr	r3, [r0, #32]
 8000428:	0609      	lsls	r1, r1, #24
 800042a:	021b      	lsls	r3, r3, #8
 800042c:	0a1b      	lsrs	r3, r3, #8
 800042e:	430b      	orrs	r3, r1
 8000430:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000432:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000434:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000436:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000438:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800043a:	4770      	bx	lr
 800043c:	00ffffff 	.word	0x00ffffff
 8000440:	e000e010 	.word	0xe000e010
 8000444:	e000ed00 	.word	0xe000ed00

08000448 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044a:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 800044c:	2001      	movs	r0, #1
  if(hdma == NULL)
 800044e:	2c00      	cmp	r4, #0
 8000450:	d035      	beq.n	80004be <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000452:	6825      	ldr	r5, [r4, #0]
 8000454:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <HAL_DMA_Init+0x78>)
 8000456:	2114      	movs	r1, #20
 8000458:	18e8      	adds	r0, r5, r3
 800045a:	f7ff fe55 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 800045e:	4b19      	ldr	r3, [pc, #100]	; (80004c4 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000460:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8000462:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000464:	2302      	movs	r3, #2
 8000466:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000468:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 800046a:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800046c:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800046e:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000470:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000472:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8000474:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000476:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8000478:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800047a:	433b      	orrs	r3, r7
 800047c:	6967      	ldr	r7, [r4, #20]
 800047e:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000480:	69a7      	ldr	r7, [r4, #24]
 8000482:	433b      	orrs	r3, r7
 8000484:	69e7      	ldr	r7, [r4, #28]
 8000486:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8000488:	6a27      	ldr	r7, [r4, #32]
 800048a:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 800048c:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800048e:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000490:	2380      	movs	r3, #128	; 0x80
 8000492:	01db      	lsls	r3, r3, #7
 8000494:	4299      	cmp	r1, r3
 8000496:	d00c      	beq.n	80004b2 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000498:	251c      	movs	r5, #28
 800049a:	4028      	ands	r0, r5
 800049c:	3d0d      	subs	r5, #13
 800049e:	4085      	lsls	r5, r0
 80004a0:	490a      	ldr	r1, [pc, #40]	; (80004cc <HAL_DMA_Init+0x84>)
 80004a2:	680b      	ldr	r3, [r1, #0]
 80004a4:	43ab      	bics	r3, r5
 80004a6:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80004a8:	6863      	ldr	r3, [r4, #4]
 80004aa:	680d      	ldr	r5, [r1, #0]
 80004ac:	4083      	lsls	r3, r0
 80004ae:	432b      	orrs	r3, r5
 80004b0:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80004b2:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80004b4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80004b6:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80004b8:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 80004ba:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 80004bc:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 80004be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004c0:	bffdfff8 	.word	0xbffdfff8
 80004c4:	40020000 	.word	0x40020000
 80004c8:	ffff800f 	.word	0xffff800f
 80004cc:	400200a8 	.word	0x400200a8

080004d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80004d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80004d2:	1d44      	adds	r4, r0, #5
 80004d4:	7fe6      	ldrb	r6, [r4, #31]
{
 80004d6:	0005      	movs	r5, r0
  __HAL_LOCK(hdma);
 80004d8:	2002      	movs	r0, #2
 80004da:	2e01      	cmp	r6, #1
 80004dc:	d02b      	beq.n	8000536 <HAL_DMA_Start_IT+0x66>
 80004de:	3801      	subs	r0, #1
 80004e0:	77e0      	strb	r0, [r4, #31]

  if(HAL_DMA_STATE_READY == hdma->State)
 80004e2:	1da8      	adds	r0, r5, #6
 80004e4:	7fc6      	ldrb	r6, [r0, #31]
 80004e6:	4684      	mov	ip, r0
 80004e8:	b2f6      	uxtb	r6, r6
 80004ea:	2002      	movs	r0, #2
 80004ec:	2700      	movs	r7, #0
 80004ee:	2e01      	cmp	r6, #1
 80004f0:	d12c      	bne.n	800054c <HAL_DMA_Start_IT+0x7c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80004f2:	4664      	mov	r4, ip
 80004f4:	77e0      	strb	r0, [r4, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80004f6:	682c      	ldr	r4, [r5, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80004f8:	63ef      	str	r7, [r5, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80004fa:	6820      	ldr	r0, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80004fc:	371c      	adds	r7, #28
    __HAL_DMA_DISABLE(hdma);
 80004fe:	43b0      	bics	r0, r6
 8000500:	6020      	str	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000502:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8000504:	9001      	str	r0, [sp, #4]
 8000506:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8000508:	4007      	ands	r7, r0
 800050a:	40be      	lsls	r6, r7
 800050c:	9801      	ldr	r0, [sp, #4]
 800050e:	6046      	str	r6, [r0, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000510:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000512:	68ab      	ldr	r3, [r5, #8]
 8000514:	6828      	ldr	r0, [r5, #0]
 8000516:	2b10      	cmp	r3, #16
 8000518:	d10e      	bne.n	8000538 <HAL_DMA_Start_IT+0x68>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800051a:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800051c:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800051e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000520:	2b00      	cmp	r3, #0
 8000522:	d00c      	beq.n	800053e <HAL_DMA_Start_IT+0x6e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000524:	230e      	movs	r3, #14
 8000526:	6822      	ldr	r2, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000528:	4313      	orrs	r3, r2
 800052a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800052c:	2301      	movs	r3, #1
 800052e:	6802      	ldr	r2, [r0, #0]
 8000530:	4313      	orrs	r3, r2
 8000532:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000534:	2000      	movs	r0, #0
}
 8000536:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000538:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800053a:	60e2      	str	r2, [r4, #12]
 800053c:	e7ef      	b.n	800051e <HAL_DMA_Start_IT+0x4e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800053e:	2204      	movs	r2, #4
 8000540:	6823      	ldr	r3, [r4, #0]
 8000542:	4393      	bics	r3, r2
 8000544:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000546:	6822      	ldr	r2, [r4, #0]
 8000548:	230a      	movs	r3, #10
 800054a:	e7ed      	b.n	8000528 <HAL_DMA_Start_IT+0x58>
    __HAL_UNLOCK(hdma);
 800054c:	77e7      	strb	r7, [r4, #31]
 800054e:	e7f2      	b.n	8000536 <HAL_DMA_Start_IT+0x66>

08000550 <HAL_DMA_IRQHandler>:
{
 8000550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000552:	221c      	movs	r2, #28
 8000554:	2704      	movs	r7, #4
 8000556:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000558:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800055a:	4032      	ands	r2, r6
 800055c:	003e      	movs	r6, r7
 800055e:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000560:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000562:	6803      	ldr	r3, [r0, #0]
 8000564:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000566:	4235      	tst	r5, r6
 8000568:	d00d      	beq.n	8000586 <HAL_DMA_IRQHandler+0x36>
 800056a:	423c      	tst	r4, r7
 800056c:	d00b      	beq.n	8000586 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	0692      	lsls	r2, r2, #26
 8000572:	d402      	bmi.n	800057a <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	43ba      	bics	r2, r7
 8000578:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 800057a:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800057c:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 800057e:	2b00      	cmp	r3, #0
 8000580:	d019      	beq.n	80005b6 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8000582:	4798      	blx	r3
  return;
 8000584:	e017      	b.n	80005b6 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000586:	2702      	movs	r7, #2
 8000588:	003e      	movs	r6, r7
 800058a:	4096      	lsls	r6, r2
 800058c:	4235      	tst	r5, r6
 800058e:	d013      	beq.n	80005b8 <HAL_DMA_IRQHandler+0x68>
 8000590:	423c      	tst	r4, r7
 8000592:	d011      	beq.n	80005b8 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	0692      	lsls	r2, r2, #26
 8000598:	d406      	bmi.n	80005a8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800059a:	240a      	movs	r4, #10
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	43a2      	bics	r2, r4
 80005a0:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80005a2:	2201      	movs	r2, #1
 80005a4:	1d83      	adds	r3, r0, #6
 80005a6:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 80005a8:	2200      	movs	r2, #0
 80005aa:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80005ac:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 80005ae:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 80005b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d1e5      	bne.n	8000582 <HAL_DMA_IRQHandler+0x32>
}
 80005b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80005b8:	2608      	movs	r6, #8
 80005ba:	0037      	movs	r7, r6
 80005bc:	4097      	lsls	r7, r2
 80005be:	423d      	tst	r5, r7
 80005c0:	d0f9      	beq.n	80005b6 <HAL_DMA_IRQHandler+0x66>
 80005c2:	4234      	tst	r4, r6
 80005c4:	d0f7      	beq.n	80005b6 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80005c6:	250e      	movs	r5, #14
 80005c8:	681c      	ldr	r4, [r3, #0]
 80005ca:	43ac      	bics	r4, r5
 80005cc:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80005ce:	2301      	movs	r3, #1
 80005d0:	001c      	movs	r4, r3
 80005d2:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 80005d4:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80005d6:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80005d8:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80005da:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 80005dc:	2200      	movs	r2, #0
 80005de:	1d43      	adds	r3, r0, #5
 80005e0:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 80005e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80005e4:	e7e5      	b.n	80005b2 <HAL_DMA_IRQHandler+0x62>
	...

080005e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005e8:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80005ea:	4a54      	ldr	r2, [pc, #336]	; (800073c <HAL_GPIO_Init+0x154>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80005ec:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80005ee:	1882      	adds	r2, r0, r2
 80005f0:	1e54      	subs	r4, r2, #1
 80005f2:	41a2      	sbcs	r2, r4
{
 80005f4:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0)
 80005f6:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00U;
 80005f8:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80005fa:	3205      	adds	r2, #5
 80005fc:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80005fe:	9a03      	ldr	r2, [sp, #12]
 8000600:	40da      	lsrs	r2, r3
 8000602:	d101      	bne.n	8000608 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8000604:	b007      	add	sp, #28
 8000606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000608:	2501      	movs	r5, #1
 800060a:	409d      	lsls	r5, r3
 800060c:	9a03      	ldr	r2, [sp, #12]
 800060e:	402a      	ands	r2, r5
 8000610:	9202      	str	r2, [sp, #8]
    if(iocurrent)
 8000612:	d100      	bne.n	8000616 <HAL_GPIO_Init+0x2e>
 8000614:	e08f      	b.n	8000736 <HAL_GPIO_Init+0x14e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000616:	684a      	ldr	r2, [r1, #4]
 8000618:	9201      	str	r2, [sp, #4]
 800061a:	2210      	movs	r2, #16
 800061c:	9e01      	ldr	r6, [sp, #4]
 800061e:	4396      	bics	r6, r2
 8000620:	2e02      	cmp	r6, #2
 8000622:	d10f      	bne.n	8000644 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 8000624:	08da      	lsrs	r2, r3, #3
 8000626:	0092      	lsls	r2, r2, #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000628:	2407      	movs	r4, #7
 800062a:	1882      	adds	r2, r0, r2
        temp = GPIOx->AFR[position >> 3U];
 800062c:	6a17      	ldr	r7, [r2, #32]
 800062e:	9204      	str	r2, [sp, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000630:	220f      	movs	r2, #15
 8000632:	401c      	ands	r4, r3
 8000634:	00a4      	lsls	r4, r4, #2
 8000636:	40a2      	lsls	r2, r4
 8000638:	4397      	bics	r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800063a:	690a      	ldr	r2, [r1, #16]
 800063c:	40a2      	lsls	r2, r4
 800063e:	4317      	orrs	r7, r2
        GPIOx->AFR[position >> 3U] = temp;
 8000640:	9a04      	ldr	r2, [sp, #16]
 8000642:	6217      	str	r7, [r2, #32]
 8000644:	2203      	movs	r2, #3
 8000646:	005c      	lsls	r4, r3, #1
 8000648:	40a2      	lsls	r2, r4
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800064a:	3e01      	subs	r6, #1
 800064c:	43d2      	mvns	r2, r2
 800064e:	2e01      	cmp	r6, #1
 8000650:	d80d      	bhi.n	800066e <HAL_GPIO_Init+0x86>
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000652:	68ce      	ldr	r6, [r1, #12]
        temp = GPIOx->OSPEEDR;
 8000654:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000656:	40a6      	lsls	r6, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000658:	4017      	ands	r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800065a:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800065c:	6086      	str	r6, [r0, #8]
        temp= GPIOx->OTYPER;
 800065e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000660:	43ae      	bics	r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000662:	9d01      	ldr	r5, [sp, #4]
 8000664:	06ed      	lsls	r5, r5, #27
 8000666:	0fed      	lsrs	r5, r5, #31
 8000668:	409d      	lsls	r5, r3
 800066a:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800066c:	6045      	str	r5, [r0, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800066e:	2603      	movs	r6, #3
 8000670:	9d01      	ldr	r5, [sp, #4]
      temp = GPIOx->MODER;
 8000672:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000674:	4035      	ands	r5, r6
 8000676:	40a5      	lsls	r5, r4
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000678:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800067a:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 800067c:	6005      	str	r5, [r0, #0]
      temp = GPIOx->PUPDR;
 800067e:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000680:	402a      	ands	r2, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000682:	688d      	ldr	r5, [r1, #8]
 8000684:	40a5      	lsls	r5, r4
 8000686:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8000688:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800068a:	9a01      	ldr	r2, [sp, #4]
 800068c:	00d2      	lsls	r2, r2, #3
 800068e:	d552      	bpl.n	8000736 <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000690:	2501      	movs	r5, #1
 8000692:	4c2b      	ldr	r4, [pc, #172]	; (8000740 <HAL_GPIO_Init+0x158>)
 8000694:	46ac      	mov	ip, r5
 8000696:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000698:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069a:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800069c:	001d      	movs	r5, r3
 800069e:	4035      	ands	r5, r6
 80006a0:	00ad      	lsls	r5, r5, #2
 80006a2:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a4:	6362      	str	r2, [r4, #52]	; 0x34
 80006a6:	4a27      	ldr	r2, [pc, #156]	; (8000744 <HAL_GPIO_Init+0x15c>)
        temp = SYSCFG->EXTICR[position >> 2U];
 80006a8:	089c      	lsrs	r4, r3, #2
 80006aa:	00a4      	lsls	r4, r4, #2
 80006ac:	18a4      	adds	r4, r4, r2
 80006ae:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80006b0:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80006b2:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80006b4:	9204      	str	r2, [sp, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80006b6:	05ff      	lsls	r7, r7, #23
 80006b8:	2200      	movs	r2, #0
 80006ba:	42b8      	cmp	r0, r7
 80006bc:	d010      	beq.n	80006e0 <HAL_GPIO_Init+0xf8>
 80006be:	4f22      	ldr	r7, [pc, #136]	; (8000748 <HAL_GPIO_Init+0x160>)
 80006c0:	4662      	mov	r2, ip
 80006c2:	42b8      	cmp	r0, r7
 80006c4:	d00c      	beq.n	80006e0 <HAL_GPIO_Init+0xf8>
 80006c6:	4f21      	ldr	r7, [pc, #132]	; (800074c <HAL_GPIO_Init+0x164>)
 80006c8:	1892      	adds	r2, r2, r2
 80006ca:	42b8      	cmp	r0, r7
 80006cc:	d008      	beq.n	80006e0 <HAL_GPIO_Init+0xf8>
 80006ce:	4f20      	ldr	r7, [pc, #128]	; (8000750 <HAL_GPIO_Init+0x168>)
 80006d0:	0032      	movs	r2, r6
 80006d2:	42b8      	cmp	r0, r7
 80006d4:	d004      	beq.n	80006e0 <HAL_GPIO_Init+0xf8>
 80006d6:	4e1f      	ldr	r6, [pc, #124]	; (8000754 <HAL_GPIO_Init+0x16c>)
 80006d8:	4462      	add	r2, ip
 80006da:	42b0      	cmp	r0, r6
 80006dc:	d000      	beq.n	80006e0 <HAL_GPIO_Init+0xf8>
 80006de:	9a05      	ldr	r2, [sp, #20]
 80006e0:	40aa      	lsls	r2, r5
 80006e2:	9d04      	ldr	r5, [sp, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006e4:	9f01      	ldr	r7, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80006e6:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80006e8:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 80006ea:	4a1b      	ldr	r2, [pc, #108]	; (8000758 <HAL_GPIO_Init+0x170>)
        temp &= ~((uint32_t)iocurrent);
 80006ec:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 80006ee:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 80006f0:	9d02      	ldr	r5, [sp, #8]
        temp &= ~((uint32_t)iocurrent);
 80006f2:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80006f4:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006f6:	03ff      	lsls	r7, r7, #15
 80006f8:	d401      	bmi.n	80006fe <HAL_GPIO_Init+0x116>
        temp &= ~((uint32_t)iocurrent);
 80006fa:	0035      	movs	r5, r6
 80006fc:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 80006fe:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000700:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000702:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000704:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8000706:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000708:	03bf      	lsls	r7, r7, #14
 800070a:	d401      	bmi.n	8000710 <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 800070c:	0035      	movs	r5, r6
 800070e:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8000710:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000712:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000714:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000716:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8000718:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800071a:	02ff      	lsls	r7, r7, #11
 800071c:	d401      	bmi.n	8000722 <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 800071e:	0035      	movs	r5, r6
 8000720:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8000722:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000724:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000726:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000728:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 800072a:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800072c:	02bf      	lsls	r7, r7, #10
 800072e:	d401      	bmi.n	8000734 <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 8000730:	4025      	ands	r5, r4
 8000732:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000734:	60d6      	str	r6, [r2, #12]
    position++;
 8000736:	3301      	adds	r3, #1
 8000738:	e761      	b.n	80005fe <HAL_GPIO_Init+0x16>
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	afffe400 	.word	0xafffe400
 8000740:	40021000 	.word	0x40021000
 8000744:	40010000 	.word	0x40010000
 8000748:	50000400 	.word	0x50000400
 800074c:	50000800 	.word	0x50000800
 8000750:	50000c00 	.word	0x50000c00
 8000754:	50001000 	.word	0x50001000
 8000758:	40010400 	.word	0x40010400

0800075c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800075c:	2a00      	cmp	r2, #0
 800075e:	d001      	beq.n	8000764 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000760:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000762:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8000764:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000766:	e7fc      	b.n	8000762 <HAL_GPIO_WritePin+0x6>

08000768 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000768:	6943      	ldr	r3, [r0, #20]
 800076a:	4059      	eors	r1, r3
 800076c:	6141      	str	r1, [r0, #20]
}
 800076e:	4770      	bx	lr

08000770 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000770:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000772:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000774:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000776:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000778:	400a      	ands	r2, r1
 800077a:	2a08      	cmp	r2, #8
 800077c:	d029      	beq.n	80007d2 <HAL_RCC_GetSysClockFreq+0x62>
 800077e:	2a0c      	cmp	r2, #12
 8000780:	d009      	beq.n	8000796 <HAL_RCC_GetSysClockFreq+0x26>
 8000782:	2a04      	cmp	r2, #4
 8000784:	d11d      	bne.n	80007c2 <HAL_RCC_GetSysClockFreq+0x52>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000786:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <HAL_RCC_GetSysClockFreq+0x6c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800078a:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 800078c:	17c0      	asrs	r0, r0, #31
 800078e:	4018      	ands	r0, r3
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <HAL_RCC_GetSysClockFreq+0x70>)
 8000792:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8000794:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000796:	028a      	lsls	r2, r1, #10
 8000798:	4812      	ldr	r0, [pc, #72]	; (80007e4 <HAL_RCC_GetSysClockFreq+0x74>)
 800079a:	0f12      	lsrs	r2, r2, #28
 800079c:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800079e:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80007a0:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80007a2:	0f89      	lsrs	r1, r1, #30
 80007a4:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80007a6:	03c0      	lsls	r0, r0, #15
 80007a8:	d504      	bpl.n	80007b4 <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = (HSE_VALUE * pllm) / plld;
 80007aa:	480f      	ldr	r0, [pc, #60]	; (80007e8 <HAL_RCC_GetSysClockFreq+0x78>)
         pllvco = (HSI_VALUE * pllm) / plld;
 80007ac:	4350      	muls	r0, r2
 80007ae:	f7ff fcab 	bl	8000108 <__udivsi3>
 80007b2:	e7ef      	b.n	8000794 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	06db      	lsls	r3, r3, #27
 80007b8:	d501      	bpl.n	80007be <HAL_RCC_GetSysClockFreq+0x4e>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80007ba:	480c      	ldr	r0, [pc, #48]	; (80007ec <HAL_RCC_GetSysClockFreq+0x7c>)
 80007bc:	e7f6      	b.n	80007ac <HAL_RCC_GetSysClockFreq+0x3c>
         pllvco = (HSI_VALUE * pllm) / plld;
 80007be:	4808      	ldr	r0, [pc, #32]	; (80007e0 <HAL_RCC_GetSysClockFreq+0x70>)
 80007c0:	e7f4      	b.n	80007ac <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80007c2:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80007c4:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80007c6:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80007c8:	041b      	lsls	r3, r3, #16
 80007ca:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80007cc:	3301      	adds	r3, #1
 80007ce:	4098      	lsls	r0, r3
 80007d0:	e7e0      	b.n	8000794 <HAL_RCC_GetSysClockFreq+0x24>
      sysclockfreq = HSE_VALUE;
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <HAL_RCC_GetSysClockFreq+0x78>)
 80007d4:	e7de      	b.n	8000794 <HAL_RCC_GetSysClockFreq+0x24>
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	40021000 	.word	0x40021000
 80007dc:	ff48e500 	.word	0xff48e500
 80007e0:	00f42400 	.word	0x00f42400
 80007e4:	08001648 	.word	0x08001648
 80007e8:	007a1200 	.word	0x007a1200
 80007ec:	003d0900 	.word	0x003d0900

080007f0 <HAL_RCC_OscConfig>:
{
 80007f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007f2:	0005      	movs	r5, r0
 80007f4:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 80007f6:	2800      	cmp	r0, #0
 80007f8:	d102      	bne.n	8000800 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80007fa:	2001      	movs	r0, #1
}
 80007fc:	b007      	add	sp, #28
 80007fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000800:	230c      	movs	r3, #12
 8000802:	4cc2      	ldr	r4, [pc, #776]	; (8000b0c <HAL_RCC_OscConfig+0x31c>)
 8000804:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000806:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000808:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800080a:	2380      	movs	r3, #128	; 0x80
 800080c:	025b      	lsls	r3, r3, #9
 800080e:	401a      	ands	r2, r3
 8000810:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000812:	6802      	ldr	r2, [r0, #0]
 8000814:	07d2      	lsls	r2, r2, #31
 8000816:	d441      	bmi.n	800089c <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000818:	682b      	ldr	r3, [r5, #0]
 800081a:	079b      	lsls	r3, r3, #30
 800081c:	d500      	bpl.n	8000820 <HAL_RCC_OscConfig+0x30>
 800081e:	e087      	b.n	8000930 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000820:	682b      	ldr	r3, [r5, #0]
 8000822:	06db      	lsls	r3, r3, #27
 8000824:	d528      	bpl.n	8000878 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000826:	2e00      	cmp	r6, #0
 8000828:	d000      	beq.n	800082c <HAL_RCC_OscConfig+0x3c>
 800082a:	e0e1      	b.n	80009f0 <HAL_RCC_OscConfig+0x200>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800082c:	6823      	ldr	r3, [r4, #0]
 800082e:	059b      	lsls	r3, r3, #22
 8000830:	d502      	bpl.n	8000838 <HAL_RCC_OscConfig+0x48>
 8000832:	69eb      	ldr	r3, [r5, #28]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d0e0      	beq.n	80007fa <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000838:	6862      	ldr	r2, [r4, #4]
 800083a:	49b5      	ldr	r1, [pc, #724]	; (8000b10 <HAL_RCC_OscConfig+0x320>)
 800083c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800083e:	400a      	ands	r2, r1
 8000840:	431a      	orrs	r2, r3
 8000842:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000844:	6861      	ldr	r1, [r4, #4]
 8000846:	6a2a      	ldr	r2, [r5, #32]
 8000848:	0209      	lsls	r1, r1, #8
 800084a:	0a09      	lsrs	r1, r1, #8
 800084c:	0612      	lsls	r2, r2, #24
 800084e:	430a      	orrs	r2, r1
 8000850:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000852:	2280      	movs	r2, #128	; 0x80
 8000854:	0b5b      	lsrs	r3, r3, #13
 8000856:	3301      	adds	r3, #1
 8000858:	0212      	lsls	r2, r2, #8
 800085a:	409a      	lsls	r2, r3
 800085c:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800085e:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000860:	2003      	movs	r0, #3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000862:	060a      	lsls	r2, r1, #24
 8000864:	49ab      	ldr	r1, [pc, #684]	; (8000b14 <HAL_RCC_OscConfig+0x324>)
 8000866:	0f12      	lsrs	r2, r2, #28
 8000868:	5c8a      	ldrb	r2, [r1, r2]
 800086a:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800086c:	4aaa      	ldr	r2, [pc, #680]	; (8000b18 <HAL_RCC_OscConfig+0x328>)
 800086e:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000870:	f7ff fd52 	bl	8000318 <HAL_InitTick>
        if(status != HAL_OK)
 8000874:	2800      	cmp	r0, #0
 8000876:	d1c1      	bne.n	80007fc <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000878:	682b      	ldr	r3, [r5, #0]
 800087a:	071b      	lsls	r3, r3, #28
 800087c:	d500      	bpl.n	8000880 <HAL_RCC_OscConfig+0x90>
 800087e:	e0ee      	b.n	8000a5e <HAL_RCC_OscConfig+0x26e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000880:	682b      	ldr	r3, [r5, #0]
 8000882:	075b      	lsls	r3, r3, #29
 8000884:	d500      	bpl.n	8000888 <HAL_RCC_OscConfig+0x98>
 8000886:	e110      	b.n	8000aaa <HAL_RCC_OscConfig+0x2ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000888:	682b      	ldr	r3, [r5, #0]
 800088a:	069b      	lsls	r3, r3, #26
 800088c:	d500      	bpl.n	8000890 <HAL_RCC_OscConfig+0xa0>
 800088e:	e195      	b.n	8000bbc <HAL_RCC_OscConfig+0x3cc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000890:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000892:	2b00      	cmp	r3, #0
 8000894:	d000      	beq.n	8000898 <HAL_RCC_OscConfig+0xa8>
 8000896:	e1c4      	b.n	8000c22 <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8000898:	2000      	movs	r0, #0
 800089a:	e7af      	b.n	80007fc <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800089c:	2e08      	cmp	r6, #8
 800089e:	d004      	beq.n	80008aa <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80008a0:	2e0c      	cmp	r6, #12
 80008a2:	d109      	bne.n	80008b8 <HAL_RCC_OscConfig+0xc8>
 80008a4:	9a01      	ldr	r2, [sp, #4]
 80008a6:	2a00      	cmp	r2, #0
 80008a8:	d006      	beq.n	80008b8 <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008aa:	6823      	ldr	r3, [r4, #0]
 80008ac:	039b      	lsls	r3, r3, #14
 80008ae:	d5b3      	bpl.n	8000818 <HAL_RCC_OscConfig+0x28>
 80008b0:	686b      	ldr	r3, [r5, #4]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d1b0      	bne.n	8000818 <HAL_RCC_OscConfig+0x28>
 80008b6:	e7a0      	b.n	80007fa <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008b8:	686a      	ldr	r2, [r5, #4]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d111      	bne.n	80008e2 <HAL_RCC_OscConfig+0xf2>
 80008be:	6822      	ldr	r2, [r4, #0]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008c4:	f7ff fd5c 	bl	8000380 <HAL_GetTick>
 80008c8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80008ca:	2280      	movs	r2, #128	; 0x80
 80008cc:	6823      	ldr	r3, [r4, #0]
 80008ce:	0292      	lsls	r2, r2, #10
 80008d0:	4213      	tst	r3, r2
 80008d2:	d1a1      	bne.n	8000818 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008d4:	f7ff fd54 	bl	8000380 <HAL_GetTick>
 80008d8:	1bc0      	subs	r0, r0, r7
 80008da:	2864      	cmp	r0, #100	; 0x64
 80008dc:	d9f5      	bls.n	80008ca <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 80008de:	2003      	movs	r0, #3
 80008e0:	e78c      	b.n	80007fc <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e2:	21a0      	movs	r1, #160	; 0xa0
 80008e4:	02c9      	lsls	r1, r1, #11
 80008e6:	428a      	cmp	r2, r1
 80008e8:	d105      	bne.n	80008f6 <HAL_RCC_OscConfig+0x106>
 80008ea:	2280      	movs	r2, #128	; 0x80
 80008ec:	6821      	ldr	r1, [r4, #0]
 80008ee:	02d2      	lsls	r2, r2, #11
 80008f0:	430a      	orrs	r2, r1
 80008f2:	6022      	str	r2, [r4, #0]
 80008f4:	e7e3      	b.n	80008be <HAL_RCC_OscConfig+0xce>
 80008f6:	6821      	ldr	r1, [r4, #0]
 80008f8:	4888      	ldr	r0, [pc, #544]	; (8000b1c <HAL_RCC_OscConfig+0x32c>)
 80008fa:	4001      	ands	r1, r0
 80008fc:	6021      	str	r1, [r4, #0]
 80008fe:	6821      	ldr	r1, [r4, #0]
 8000900:	400b      	ands	r3, r1
 8000902:	9305      	str	r3, [sp, #20]
 8000904:	9b05      	ldr	r3, [sp, #20]
 8000906:	4986      	ldr	r1, [pc, #536]	; (8000b20 <HAL_RCC_OscConfig+0x330>)
 8000908:	6823      	ldr	r3, [r4, #0]
 800090a:	400b      	ands	r3, r1
 800090c:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800090e:	2a00      	cmp	r2, #0
 8000910:	d1d8      	bne.n	80008c4 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8000912:	f7ff fd35 	bl	8000380 <HAL_GetTick>
 8000916:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000918:	2280      	movs	r2, #128	; 0x80
 800091a:	6823      	ldr	r3, [r4, #0]
 800091c:	0292      	lsls	r2, r2, #10
 800091e:	4213      	tst	r3, r2
 8000920:	d100      	bne.n	8000924 <HAL_RCC_OscConfig+0x134>
 8000922:	e779      	b.n	8000818 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000924:	f7ff fd2c 	bl	8000380 <HAL_GetTick>
 8000928:	1bc0      	subs	r0, r0, r7
 800092a:	2864      	cmp	r0, #100	; 0x64
 800092c:	d9f4      	bls.n	8000918 <HAL_RCC_OscConfig+0x128>
 800092e:	e7d6      	b.n	80008de <HAL_RCC_OscConfig+0xee>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000930:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8000932:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000934:	4213      	tst	r3, r2
 8000936:	d003      	beq.n	8000940 <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000938:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 800093a:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800093c:	4311      	orrs	r1, r2
 800093e:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000940:	2e04      	cmp	r6, #4
 8000942:	d004      	beq.n	800094e <HAL_RCC_OscConfig+0x15e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000944:	2e0c      	cmp	r6, #12
 8000946:	d125      	bne.n	8000994 <HAL_RCC_OscConfig+0x1a4>
 8000948:	9a01      	ldr	r2, [sp, #4]
 800094a:	2a00      	cmp	r2, #0
 800094c:	d122      	bne.n	8000994 <HAL_RCC_OscConfig+0x1a4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800094e:	6822      	ldr	r2, [r4, #0]
 8000950:	0752      	lsls	r2, r2, #29
 8000952:	d502      	bpl.n	800095a <HAL_RCC_OscConfig+0x16a>
 8000954:	2b00      	cmp	r3, #0
 8000956:	d100      	bne.n	800095a <HAL_RCC_OscConfig+0x16a>
 8000958:	e74f      	b.n	80007fa <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800095a:	6861      	ldr	r1, [r4, #4]
 800095c:	692a      	ldr	r2, [r5, #16]
 800095e:	4871      	ldr	r0, [pc, #452]	; (8000b24 <HAL_RCC_OscConfig+0x334>)
 8000960:	0212      	lsls	r2, r2, #8
 8000962:	4001      	ands	r1, r0
 8000964:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000966:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000968:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800096a:	6822      	ldr	r2, [r4, #0]
 800096c:	438a      	bics	r2, r1
 800096e:	4313      	orrs	r3, r2
 8000970:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000972:	f7ff fefd 	bl	8000770 <HAL_RCC_GetSysClockFreq>
 8000976:	68e3      	ldr	r3, [r4, #12]
 8000978:	4a66      	ldr	r2, [pc, #408]	; (8000b14 <HAL_RCC_OscConfig+0x324>)
 800097a:	061b      	lsls	r3, r3, #24
 800097c:	0f1b      	lsrs	r3, r3, #28
 800097e:	5cd3      	ldrb	r3, [r2, r3]
 8000980:	40d8      	lsrs	r0, r3
 8000982:	4b65      	ldr	r3, [pc, #404]	; (8000b18 <HAL_RCC_OscConfig+0x328>)
 8000984:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8000986:	2003      	movs	r0, #3
 8000988:	f7ff fcc6 	bl	8000318 <HAL_InitTick>
      if(status != HAL_OK)
 800098c:	2800      	cmp	r0, #0
 800098e:	d100      	bne.n	8000992 <HAL_RCC_OscConfig+0x1a2>
 8000990:	e746      	b.n	8000820 <HAL_RCC_OscConfig+0x30>
 8000992:	e733      	b.n	80007fc <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 8000994:	2b00      	cmp	r3, #0
 8000996:	d019      	beq.n	80009cc <HAL_RCC_OscConfig+0x1dc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000998:	2109      	movs	r1, #9
 800099a:	6822      	ldr	r2, [r4, #0]
 800099c:	438a      	bics	r2, r1
 800099e:	4313      	orrs	r3, r2
 80009a0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009a2:	f7ff fced 	bl	8000380 <HAL_GetTick>
 80009a6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80009a8:	2204      	movs	r2, #4
 80009aa:	6823      	ldr	r3, [r4, #0]
 80009ac:	4213      	tst	r3, r2
 80009ae:	d007      	beq.n	80009c0 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009b0:	6862      	ldr	r2, [r4, #4]
 80009b2:	692b      	ldr	r3, [r5, #16]
 80009b4:	495b      	ldr	r1, [pc, #364]	; (8000b24 <HAL_RCC_OscConfig+0x334>)
 80009b6:	021b      	lsls	r3, r3, #8
 80009b8:	400a      	ands	r2, r1
 80009ba:	4313      	orrs	r3, r2
 80009bc:	6063      	str	r3, [r4, #4]
 80009be:	e72f      	b.n	8000820 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009c0:	f7ff fcde 	bl	8000380 <HAL_GetTick>
 80009c4:	1bc0      	subs	r0, r0, r7
 80009c6:	2802      	cmp	r0, #2
 80009c8:	d9ee      	bls.n	80009a8 <HAL_RCC_OscConfig+0x1b8>
 80009ca:	e788      	b.n	80008de <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 80009cc:	2201      	movs	r2, #1
 80009ce:	6823      	ldr	r3, [r4, #0]
 80009d0:	4393      	bics	r3, r2
 80009d2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009d4:	f7ff fcd4 	bl	8000380 <HAL_GetTick>
 80009d8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80009da:	2204      	movs	r2, #4
 80009dc:	6823      	ldr	r3, [r4, #0]
 80009de:	4213      	tst	r3, r2
 80009e0:	d100      	bne.n	80009e4 <HAL_RCC_OscConfig+0x1f4>
 80009e2:	e71d      	b.n	8000820 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009e4:	f7ff fccc 	bl	8000380 <HAL_GetTick>
 80009e8:	1bc0      	subs	r0, r0, r7
 80009ea:	2802      	cmp	r0, #2
 80009ec:	d9f5      	bls.n	80009da <HAL_RCC_OscConfig+0x1ea>
 80009ee:	e776      	b.n	80008de <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80009f0:	69eb      	ldr	r3, [r5, #28]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d020      	beq.n	8000a38 <HAL_RCC_OscConfig+0x248>
        __HAL_RCC_MSI_ENABLE();
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	6822      	ldr	r2, [r4, #0]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	4313      	orrs	r3, r2
 80009fe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a00:	f7ff fcbe 	bl	8000380 <HAL_GetTick>
 8000a04:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000a06:	2280      	movs	r2, #128	; 0x80
 8000a08:	6823      	ldr	r3, [r4, #0]
 8000a0a:	0092      	lsls	r2, r2, #2
 8000a0c:	4213      	tst	r3, r2
 8000a0e:	d00d      	beq.n	8000a2c <HAL_RCC_OscConfig+0x23c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a10:	6863      	ldr	r3, [r4, #4]
 8000a12:	4a3f      	ldr	r2, [pc, #252]	; (8000b10 <HAL_RCC_OscConfig+0x320>)
 8000a14:	4013      	ands	r3, r2
 8000a16:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a1c:	6862      	ldr	r2, [r4, #4]
 8000a1e:	6a2b      	ldr	r3, [r5, #32]
 8000a20:	0212      	lsls	r2, r2, #8
 8000a22:	061b      	lsls	r3, r3, #24
 8000a24:	0a12      	lsrs	r2, r2, #8
 8000a26:	4313      	orrs	r3, r2
 8000a28:	6063      	str	r3, [r4, #4]
 8000a2a:	e725      	b.n	8000878 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a2c:	f7ff fca8 	bl	8000380 <HAL_GetTick>
 8000a30:	1bc0      	subs	r0, r0, r7
 8000a32:	2802      	cmp	r0, #2
 8000a34:	d9e7      	bls.n	8000a06 <HAL_RCC_OscConfig+0x216>
 8000a36:	e752      	b.n	80008de <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 8000a38:	6823      	ldr	r3, [r4, #0]
 8000a3a:	4a3b      	ldr	r2, [pc, #236]	; (8000b28 <HAL_RCC_OscConfig+0x338>)
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a40:	f7ff fc9e 	bl	8000380 <HAL_GetTick>
 8000a44:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	6823      	ldr	r3, [r4, #0]
 8000a4a:	0092      	lsls	r2, r2, #2
 8000a4c:	4213      	tst	r3, r2
 8000a4e:	d100      	bne.n	8000a52 <HAL_RCC_OscConfig+0x262>
 8000a50:	e712      	b.n	8000878 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a52:	f7ff fc95 	bl	8000380 <HAL_GetTick>
 8000a56:	1bc0      	subs	r0, r0, r7
 8000a58:	2802      	cmp	r0, #2
 8000a5a:	d9f4      	bls.n	8000a46 <HAL_RCC_OscConfig+0x256>
 8000a5c:	e73f      	b.n	80008de <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a5e:	696a      	ldr	r2, [r5, #20]
 8000a60:	2301      	movs	r3, #1
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d010      	beq.n	8000a88 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8000a66:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000a6c:	f7ff fc88 	bl	8000380 <HAL_GetTick>
 8000a70:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000a72:	2202      	movs	r2, #2
 8000a74:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000a76:	4213      	tst	r3, r2
 8000a78:	d000      	beq.n	8000a7c <HAL_RCC_OscConfig+0x28c>
 8000a7a:	e701      	b.n	8000880 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a7c:	f7ff fc80 	bl	8000380 <HAL_GetTick>
 8000a80:	1bc0      	subs	r0, r0, r7
 8000a82:	2802      	cmp	r0, #2
 8000a84:	d9f5      	bls.n	8000a72 <HAL_RCC_OscConfig+0x282>
 8000a86:	e72a      	b.n	80008de <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 8000a88:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000a8a:	439a      	bics	r2, r3
 8000a8c:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000a8e:	f7ff fc77 	bl	8000380 <HAL_GetTick>
 8000a92:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000a94:	2202      	movs	r2, #2
 8000a96:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000a98:	4213      	tst	r3, r2
 8000a9a:	d100      	bne.n	8000a9e <HAL_RCC_OscConfig+0x2ae>
 8000a9c:	e6f0      	b.n	8000880 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a9e:	f7ff fc6f 	bl	8000380 <HAL_GetTick>
 8000aa2:	1bc0      	subs	r0, r0, r7
 8000aa4:	2802      	cmp	r0, #2
 8000aa6:	d9f5      	bls.n	8000a94 <HAL_RCC_OscConfig+0x2a4>
 8000aa8:	e719      	b.n	80008de <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000aaa:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000aac:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000aae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000ab0:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8000ab2:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ab4:	421a      	tst	r2, r3
 8000ab6:	d104      	bne.n	8000ac2 <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ab8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000aba:	4313      	orrs	r3, r2
 8000abc:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ac2:	2280      	movs	r2, #128	; 0x80
 8000ac4:	4f19      	ldr	r7, [pc, #100]	; (8000b2c <HAL_RCC_OscConfig+0x33c>)
 8000ac6:	0052      	lsls	r2, r2, #1
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	4213      	tst	r3, r2
 8000acc:	d008      	beq.n	8000ae0 <HAL_RCC_OscConfig+0x2f0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ace:	2280      	movs	r2, #128	; 0x80
 8000ad0:	68ab      	ldr	r3, [r5, #8]
 8000ad2:	0052      	lsls	r2, r2, #1
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d12b      	bne.n	8000b30 <HAL_RCC_OscConfig+0x340>
 8000ad8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000ada:	4313      	orrs	r3, r2
 8000adc:	6523      	str	r3, [r4, #80]	; 0x50
 8000ade:	e04c      	b.n	8000b7a <HAL_RCC_OscConfig+0x38a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ae0:	2280      	movs	r2, #128	; 0x80
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	0052      	lsls	r2, r2, #1
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000aea:	f7ff fc49 	bl	8000380 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8000af2:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000af4:	9303      	str	r3, [sp, #12]
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	9a03      	ldr	r2, [sp, #12]
 8000afa:	4213      	tst	r3, r2
 8000afc:	d1e7      	bne.n	8000ace <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000afe:	f7ff fc3f 	bl	8000380 <HAL_GetTick>
 8000b02:	9b02      	ldr	r3, [sp, #8]
 8000b04:	1ac0      	subs	r0, r0, r3
 8000b06:	2864      	cmp	r0, #100	; 0x64
 8000b08:	d9f5      	bls.n	8000af6 <HAL_RCC_OscConfig+0x306>
 8000b0a:	e6e8      	b.n	80008de <HAL_RCC_OscConfig+0xee>
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	ffff1fff 	.word	0xffff1fff
 8000b14:	08001651 	.word	0x08001651
 8000b18:	2000000c 	.word	0x2000000c
 8000b1c:	fffeffff 	.word	0xfffeffff
 8000b20:	fffbffff 	.word	0xfffbffff
 8000b24:	ffffe0ff 	.word	0xffffe0ff
 8000b28:	fffffeff 	.word	0xfffffeff
 8000b2c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d116      	bne.n	8000b62 <HAL_RCC_OscConfig+0x372>
 8000b34:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b36:	4a6c      	ldr	r2, [pc, #432]	; (8000ce8 <HAL_RCC_OscConfig+0x4f8>)
 8000b38:	4013      	ands	r3, r2
 8000b3a:	6523      	str	r3, [r4, #80]	; 0x50
 8000b3c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b3e:	4a6b      	ldr	r2, [pc, #428]	; (8000cec <HAL_RCC_OscConfig+0x4fc>)
 8000b40:	4013      	ands	r3, r2
 8000b42:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000b44:	f7ff fc1c 	bl	8000380 <HAL_GetTick>
 8000b48:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000b4a:	2280      	movs	r2, #128	; 0x80
 8000b4c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b4e:	0092      	lsls	r2, r2, #2
 8000b50:	4213      	tst	r3, r2
 8000b52:	d02a      	beq.n	8000baa <HAL_RCC_OscConfig+0x3ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b54:	f7ff fc14 	bl	8000380 <HAL_GetTick>
 8000b58:	4b65      	ldr	r3, [pc, #404]	; (8000cf0 <HAL_RCC_OscConfig+0x500>)
 8000b5a:	1bc0      	subs	r0, r0, r7
 8000b5c:	4298      	cmp	r0, r3
 8000b5e:	d9f4      	bls.n	8000b4a <HAL_RCC_OscConfig+0x35a>
 8000b60:	e6bd      	b.n	80008de <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b62:	21a0      	movs	r1, #160	; 0xa0
 8000b64:	00c9      	lsls	r1, r1, #3
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d10b      	bne.n	8000b82 <HAL_RCC_OscConfig+0x392>
 8000b6a:	2380      	movs	r3, #128	; 0x80
 8000b6c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	430b      	orrs	r3, r1
 8000b72:	6523      	str	r3, [r4, #80]	; 0x50
 8000b74:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b76:	431a      	orrs	r2, r3
 8000b78:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000b7a:	f7ff fc01 	bl	8000380 <HAL_GetTick>
 8000b7e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000b80:	e00e      	b.n	8000ba0 <HAL_RCC_OscConfig+0x3b0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b82:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b84:	4a58      	ldr	r2, [pc, #352]	; (8000ce8 <HAL_RCC_OscConfig+0x4f8>)
 8000b86:	4013      	ands	r3, r2
 8000b88:	6523      	str	r3, [r4, #80]	; 0x50
 8000b8a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b8c:	4a57      	ldr	r2, [pc, #348]	; (8000cec <HAL_RCC_OscConfig+0x4fc>)
 8000b8e:	4013      	ands	r3, r2
 8000b90:	e7a4      	b.n	8000adc <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b92:	f7ff fbf5 	bl	8000380 <HAL_GetTick>
 8000b96:	4b56      	ldr	r3, [pc, #344]	; (8000cf0 <HAL_RCC_OscConfig+0x500>)
 8000b98:	1bc0      	subs	r0, r0, r7
 8000b9a:	4298      	cmp	r0, r3
 8000b9c:	d900      	bls.n	8000ba0 <HAL_RCC_OscConfig+0x3b0>
 8000b9e:	e69e      	b.n	80008de <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ba4:	0092      	lsls	r2, r2, #2
 8000ba6:	4213      	tst	r3, r2
 8000ba8:	d0f3      	beq.n	8000b92 <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8000baa:	9b01      	ldr	r3, [sp, #4]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d000      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x3c2>
 8000bb0:	e66a      	b.n	8000888 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000bb4:	4a4f      	ldr	r2, [pc, #316]	; (8000cf4 <HAL_RCC_OscConfig+0x504>)
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	63a3      	str	r3, [r4, #56]	; 0x38
 8000bba:	e665      	b.n	8000888 <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000bbc:	69a9      	ldr	r1, [r5, #24]
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	4a4d      	ldr	r2, [pc, #308]	; (8000cf8 <HAL_RCC_OscConfig+0x508>)
 8000bc2:	2900      	cmp	r1, #0
 8000bc4:	d018      	beq.n	8000bf8 <HAL_RCC_OscConfig+0x408>
        __HAL_RCC_HSI48_ENABLE();
 8000bc6:	68a1      	ldr	r1, [r4, #8]
 8000bc8:	4319      	orrs	r1, r3
 8000bca:	60a1      	str	r1, [r4, #8]
 8000bcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bce:	430b      	orrs	r3, r1
 8000bd0:	6363      	str	r3, [r4, #52]	; 0x34
 8000bd2:	2380      	movs	r3, #128	; 0x80
 8000bd4:	6a11      	ldr	r1, [r2, #32]
 8000bd6:	019b      	lsls	r3, r3, #6
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000bdc:	f7ff fbd0 	bl	8000380 <HAL_GetTick>
 8000be0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000be2:	2202      	movs	r2, #2
 8000be4:	68a3      	ldr	r3, [r4, #8]
 8000be6:	4213      	tst	r3, r2
 8000be8:	d000      	beq.n	8000bec <HAL_RCC_OscConfig+0x3fc>
 8000bea:	e651      	b.n	8000890 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000bec:	f7ff fbc8 	bl	8000380 <HAL_GetTick>
 8000bf0:	1bc0      	subs	r0, r0, r7
 8000bf2:	2802      	cmp	r0, #2
 8000bf4:	d9f5      	bls.n	8000be2 <HAL_RCC_OscConfig+0x3f2>
 8000bf6:	e672      	b.n	80008de <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 8000bf8:	68a1      	ldr	r1, [r4, #8]
 8000bfa:	4399      	bics	r1, r3
 8000bfc:	60a1      	str	r1, [r4, #8]
 8000bfe:	6a13      	ldr	r3, [r2, #32]
 8000c00:	493e      	ldr	r1, [pc, #248]	; (8000cfc <HAL_RCC_OscConfig+0x50c>)
 8000c02:	400b      	ands	r3, r1
 8000c04:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000c06:	f7ff fbbb 	bl	8000380 <HAL_GetTick>
 8000c0a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	68a3      	ldr	r3, [r4, #8]
 8000c10:	4213      	tst	r3, r2
 8000c12:	d100      	bne.n	8000c16 <HAL_RCC_OscConfig+0x426>
 8000c14:	e63c      	b.n	8000890 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000c16:	f7ff fbb3 	bl	8000380 <HAL_GetTick>
 8000c1a:	1bc0      	subs	r0, r0, r7
 8000c1c:	2802      	cmp	r0, #2
 8000c1e:	d9f5      	bls.n	8000c0c <HAL_RCC_OscConfig+0x41c>
 8000c20:	e65d      	b.n	80008de <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c22:	2e0c      	cmp	r6, #12
 8000c24:	d043      	beq.n	8000cae <HAL_RCC_OscConfig+0x4be>
 8000c26:	4a36      	ldr	r2, [pc, #216]	; (8000d00 <HAL_RCC_OscConfig+0x510>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d12e      	bne.n	8000c8a <HAL_RCC_OscConfig+0x49a>
        __HAL_RCC_PLL_DISABLE();
 8000c2c:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000c2e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000c30:	4013      	ands	r3, r2
 8000c32:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c34:	f7ff fba4 	bl	8000380 <HAL_GetTick>
 8000c38:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000c3a:	04b6      	lsls	r6, r6, #18
 8000c3c:	6823      	ldr	r3, [r4, #0]
 8000c3e:	4233      	tst	r3, r6
 8000c40:	d11d      	bne.n	8000c7e <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c42:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8000c44:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000c46:	68e2      	ldr	r2, [r4, #12]
 8000c48:	430b      	orrs	r3, r1
 8000c4a:	492e      	ldr	r1, [pc, #184]	; (8000d04 <HAL_RCC_OscConfig+0x514>)
 8000c4c:	400a      	ands	r2, r1
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000c52:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c54:	4313      	orrs	r3, r2
 8000c56:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	6822      	ldr	r2, [r4, #0]
 8000c5c:	045b      	lsls	r3, r3, #17
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c62:	f7ff fb8d 	bl	8000380 <HAL_GetTick>
 8000c66:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000c68:	04ad      	lsls	r5, r5, #18
 8000c6a:	6823      	ldr	r3, [r4, #0]
 8000c6c:	422b      	tst	r3, r5
 8000c6e:	d000      	beq.n	8000c72 <HAL_RCC_OscConfig+0x482>
 8000c70:	e612      	b.n	8000898 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c72:	f7ff fb85 	bl	8000380 <HAL_GetTick>
 8000c76:	1b80      	subs	r0, r0, r6
 8000c78:	2802      	cmp	r0, #2
 8000c7a:	d9f6      	bls.n	8000c6a <HAL_RCC_OscConfig+0x47a>
 8000c7c:	e62f      	b.n	80008de <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c7e:	f7ff fb7f 	bl	8000380 <HAL_GetTick>
 8000c82:	1bc0      	subs	r0, r0, r7
 8000c84:	2802      	cmp	r0, #2
 8000c86:	d9d9      	bls.n	8000c3c <HAL_RCC_OscConfig+0x44c>
 8000c88:	e629      	b.n	80008de <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 8000c8a:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000c8c:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000c8e:	4013      	ands	r3, r2
 8000c90:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c92:	f7ff fb75 	bl	8000380 <HAL_GetTick>
 8000c96:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000c98:	04ad      	lsls	r5, r5, #18
 8000c9a:	6823      	ldr	r3, [r4, #0]
 8000c9c:	422b      	tst	r3, r5
 8000c9e:	d100      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x4b2>
 8000ca0:	e5fa      	b.n	8000898 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ca2:	f7ff fb6d 	bl	8000380 <HAL_GetTick>
 8000ca6:	1b80      	subs	r0, r0, r6
 8000ca8:	2802      	cmp	r0, #2
 8000caa:	d9f6      	bls.n	8000c9a <HAL_RCC_OscConfig+0x4aa>
 8000cac:	e617      	b.n	80008de <HAL_RCC_OscConfig+0xee>
        return HAL_ERROR;
 8000cae:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d100      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x4c6>
 8000cb4:	e5a2      	b.n	80007fc <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cb6:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8000cb8:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cba:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8000cbc:	0252      	lsls	r2, r2, #9
 8000cbe:	401a      	ands	r2, r3
        return HAL_ERROR;
 8000cc0:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cc2:	428a      	cmp	r2, r1
 8000cc4:	d000      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x4d8>
 8000cc6:	e599      	b.n	80007fc <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000cc8:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cca:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000ccc:	0392      	lsls	r2, r2, #14
 8000cce:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cd0:	428a      	cmp	r2, r1
 8000cd2:	d000      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x4e6>
 8000cd4:	e592      	b.n	80007fc <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000cd6:	20c0      	movs	r0, #192	; 0xc0
 8000cd8:	0400      	lsls	r0, r0, #16
 8000cda:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000cdc:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000cde:	1a18      	subs	r0, r3, r0
 8000ce0:	1e43      	subs	r3, r0, #1
 8000ce2:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8000ce4:	b2c0      	uxtb	r0, r0
 8000ce6:	e589      	b.n	80007fc <HAL_RCC_OscConfig+0xc>
 8000ce8:	fffffeff 	.word	0xfffffeff
 8000cec:	fffffbff 	.word	0xfffffbff
 8000cf0:	00001388 	.word	0x00001388
 8000cf4:	efffffff 	.word	0xefffffff
 8000cf8:	40010000 	.word	0x40010000
 8000cfc:	ffffdfff 	.word	0xffffdfff
 8000d00:	feffffff 	.word	0xfeffffff
 8000d04:	ff02ffff 	.word	0xff02ffff

08000d08 <HAL_RCC_ClockConfig>:
{
 8000d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d0a:	1e06      	subs	r6, r0, #0
 8000d0c:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8000d0e:	d101      	bne.n	8000d14 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8000d10:	2001      	movs	r0, #1
}
 8000d12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d14:	2201      	movs	r2, #1
 8000d16:	4c51      	ldr	r4, [pc, #324]	; (8000e5c <HAL_RCC_ClockConfig+0x154>)
 8000d18:	9901      	ldr	r1, [sp, #4]
 8000d1a:	6823      	ldr	r3, [r4, #0]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d327      	bcc.n	8000d72 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d22:	6832      	ldr	r2, [r6, #0]
 8000d24:	0793      	lsls	r3, r2, #30
 8000d26:	d42f      	bmi.n	8000d88 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d28:	07d3      	lsls	r3, r2, #31
 8000d2a:	d435      	bmi.n	8000d98 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	6822      	ldr	r2, [r4, #0]
 8000d30:	9901      	ldr	r1, [sp, #4]
 8000d32:	401a      	ands	r2, r3
 8000d34:	428a      	cmp	r2, r1
 8000d36:	d900      	bls.n	8000d3a <HAL_RCC_ClockConfig+0x32>
 8000d38:	e081      	b.n	8000e3e <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d3a:	6832      	ldr	r2, [r6, #0]
 8000d3c:	4c48      	ldr	r4, [pc, #288]	; (8000e60 <HAL_RCC_ClockConfig+0x158>)
 8000d3e:	0753      	lsls	r3, r2, #29
 8000d40:	d500      	bpl.n	8000d44 <HAL_RCC_ClockConfig+0x3c>
 8000d42:	e084      	b.n	8000e4e <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d44:	0713      	lsls	r3, r2, #28
 8000d46:	d506      	bpl.n	8000d56 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d48:	68e2      	ldr	r2, [r4, #12]
 8000d4a:	6933      	ldr	r3, [r6, #16]
 8000d4c:	4945      	ldr	r1, [pc, #276]	; (8000e64 <HAL_RCC_ClockConfig+0x15c>)
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	400a      	ands	r2, r1
 8000d52:	4313      	orrs	r3, r2
 8000d54:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d56:	f7ff fd0b 	bl	8000770 <HAL_RCC_GetSysClockFreq>
 8000d5a:	68e3      	ldr	r3, [r4, #12]
 8000d5c:	4a42      	ldr	r2, [pc, #264]	; (8000e68 <HAL_RCC_ClockConfig+0x160>)
 8000d5e:	061b      	lsls	r3, r3, #24
 8000d60:	0f1b      	lsrs	r3, r3, #28
 8000d62:	5cd3      	ldrb	r3, [r2, r3]
 8000d64:	40d8      	lsrs	r0, r3
 8000d66:	4b41      	ldr	r3, [pc, #260]	; (8000e6c <HAL_RCC_ClockConfig+0x164>)
 8000d68:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8000d6a:	2003      	movs	r0, #3
 8000d6c:	f7ff fad4 	bl	8000318 <HAL_InitTick>
 8000d70:	e7cf      	b.n	8000d12 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d72:	6823      	ldr	r3, [r4, #0]
 8000d74:	9901      	ldr	r1, [sp, #4]
 8000d76:	4393      	bics	r3, r2
 8000d78:	430b      	orrs	r3, r1
 8000d7a:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d7c:	6823      	ldr	r3, [r4, #0]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	9a01      	ldr	r2, [sp, #4]
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d1c4      	bne.n	8000d10 <HAL_RCC_ClockConfig+0x8>
 8000d86:	e7cc      	b.n	8000d22 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d88:	20f0      	movs	r0, #240	; 0xf0
 8000d8a:	4935      	ldr	r1, [pc, #212]	; (8000e60 <HAL_RCC_ClockConfig+0x158>)
 8000d8c:	68cb      	ldr	r3, [r1, #12]
 8000d8e:	4383      	bics	r3, r0
 8000d90:	68b0      	ldr	r0, [r6, #8]
 8000d92:	4303      	orrs	r3, r0
 8000d94:	60cb      	str	r3, [r1, #12]
 8000d96:	e7c7      	b.n	8000d28 <HAL_RCC_ClockConfig+0x20>
 8000d98:	4d31      	ldr	r5, [pc, #196]	; (8000e60 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d9a:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d9c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d9e:	2a02      	cmp	r2, #2
 8000da0:	d119      	bne.n	8000dd6 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000da2:	039b      	lsls	r3, r3, #14
 8000da4:	d5b4      	bpl.n	8000d10 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000da6:	2103      	movs	r1, #3
 8000da8:	68eb      	ldr	r3, [r5, #12]
 8000daa:	438b      	bics	r3, r1
 8000dac:	4313      	orrs	r3, r2
 8000dae:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8000db0:	f7ff fae6 	bl	8000380 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000db4:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000db6:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d119      	bne.n	8000df0 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dbc:	220c      	movs	r2, #12
 8000dbe:	68eb      	ldr	r3, [r5, #12]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	2b08      	cmp	r3, #8
 8000dc4:	d0b2      	beq.n	8000d2c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dc6:	f7ff fadb 	bl	8000380 <HAL_GetTick>
 8000dca:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <HAL_RCC_ClockConfig+0x168>)
 8000dcc:	1bc0      	subs	r0, r0, r7
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d9f4      	bls.n	8000dbc <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8000dd2:	2003      	movs	r0, #3
 8000dd4:	e79d      	b.n	8000d12 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dd6:	2a03      	cmp	r2, #3
 8000dd8:	d102      	bne.n	8000de0 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000dda:	019b      	lsls	r3, r3, #6
 8000ddc:	d4e3      	bmi.n	8000da6 <HAL_RCC_ClockConfig+0x9e>
 8000dde:	e797      	b.n	8000d10 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000de0:	2a01      	cmp	r2, #1
 8000de2:	d102      	bne.n	8000dea <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000de4:	075b      	lsls	r3, r3, #29
 8000de6:	d4de      	bmi.n	8000da6 <HAL_RCC_ClockConfig+0x9e>
 8000de8:	e792      	b.n	8000d10 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000dea:	059b      	lsls	r3, r3, #22
 8000dec:	d4db      	bmi.n	8000da6 <HAL_RCC_ClockConfig+0x9e>
 8000dee:	e78f      	b.n	8000d10 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d10b      	bne.n	8000e0c <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000df4:	220c      	movs	r2, #12
 8000df6:	68eb      	ldr	r3, [r5, #12]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d096      	beq.n	8000d2c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dfe:	f7ff fabf 	bl	8000380 <HAL_GetTick>
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <HAL_RCC_ClockConfig+0x168>)
 8000e04:	1bc0      	subs	r0, r0, r7
 8000e06:	4298      	cmp	r0, r3
 8000e08:	d9f4      	bls.n	8000df4 <HAL_RCC_ClockConfig+0xec>
 8000e0a:	e7e2      	b.n	8000dd2 <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d010      	beq.n	8000e32 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000e10:	220c      	movs	r2, #12
 8000e12:	68eb      	ldr	r3, [r5, #12]
 8000e14:	4213      	tst	r3, r2
 8000e16:	d089      	beq.n	8000d2c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e18:	f7ff fab2 	bl	8000380 <HAL_GetTick>
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <HAL_RCC_ClockConfig+0x168>)
 8000e1e:	1bc0      	subs	r0, r0, r7
 8000e20:	4298      	cmp	r0, r3
 8000e22:	d9f5      	bls.n	8000e10 <HAL_RCC_ClockConfig+0x108>
 8000e24:	e7d5      	b.n	8000dd2 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e26:	f7ff faab 	bl	8000380 <HAL_GetTick>
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <HAL_RCC_ClockConfig+0x168>)
 8000e2c:	1bc0      	subs	r0, r0, r7
 8000e2e:	4298      	cmp	r0, r3
 8000e30:	d8cf      	bhi.n	8000dd2 <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e32:	220c      	movs	r2, #12
 8000e34:	68eb      	ldr	r3, [r5, #12]
 8000e36:	4013      	ands	r3, r2
 8000e38:	2b04      	cmp	r3, #4
 8000e3a:	d1f4      	bne.n	8000e26 <HAL_RCC_ClockConfig+0x11e>
 8000e3c:	e776      	b.n	8000d2c <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e3e:	6822      	ldr	r2, [r4, #0]
 8000e40:	439a      	bics	r2, r3
 8000e42:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e44:	6822      	ldr	r2, [r4, #0]
 8000e46:	421a      	tst	r2, r3
 8000e48:	d100      	bne.n	8000e4c <HAL_RCC_ClockConfig+0x144>
 8000e4a:	e776      	b.n	8000d3a <HAL_RCC_ClockConfig+0x32>
 8000e4c:	e760      	b.n	8000d10 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e4e:	68e3      	ldr	r3, [r4, #12]
 8000e50:	4908      	ldr	r1, [pc, #32]	; (8000e74 <HAL_RCC_ClockConfig+0x16c>)
 8000e52:	400b      	ands	r3, r1
 8000e54:	68f1      	ldr	r1, [r6, #12]
 8000e56:	430b      	orrs	r3, r1
 8000e58:	60e3      	str	r3, [r4, #12]
 8000e5a:	e773      	b.n	8000d44 <HAL_RCC_ClockConfig+0x3c>
 8000e5c:	40022000 	.word	0x40022000
 8000e60:	40021000 	.word	0x40021000
 8000e64:	ffffc7ff 	.word	0xffffc7ff
 8000e68:	08001651 	.word	0x08001651
 8000e6c:	2000000c 	.word	0x2000000c
 8000e70:	00001388 	.word	0x00001388
 8000e74:	fffff8ff 	.word	0xfffff8ff

08000e78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8000e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e7a:	0004      	movs	r4, r0
 8000e7c:	000d      	movs	r5, r1
 8000e7e:	0017      	movs	r7, r2
 8000e80:	001e      	movs	r6, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000e82:	6822      	ldr	r2, [r4, #0]
 8000e84:	6893      	ldr	r3, [r2, #8]
 8000e86:	402b      	ands	r3, r5
 8000e88:	1b5b      	subs	r3, r3, r5
 8000e8a:	4259      	negs	r1, r3
 8000e8c:	414b      	adcs	r3, r1
 8000e8e:	42bb      	cmp	r3, r7
 8000e90:	d101      	bne.n	8000e96 <SPI_WaitFlagStateUntilTimeout+0x1e>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000e92:	2000      	movs	r0, #0
 8000e94:	e032      	b.n	8000efc <SPI_WaitFlagStateUntilTimeout+0x84>
    if (Timeout != HAL_MAX_DELAY)
 8000e96:	1c73      	adds	r3, r6, #1
 8000e98:	d0f4      	beq.n	8000e84 <SPI_WaitFlagStateUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000e9a:	f7ff fa71 	bl	8000380 <HAL_GetTick>
 8000e9e:	9b06      	ldr	r3, [sp, #24]
 8000ea0:	1ac0      	subs	r0, r0, r3
 8000ea2:	42b0      	cmp	r0, r6
 8000ea4:	d3ed      	bcc.n	8000e82 <SPI_WaitFlagStateUntilTimeout+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000ea6:	21e0      	movs	r1, #224	; 0xe0
 8000ea8:	6823      	ldr	r3, [r4, #0]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	438a      	bics	r2, r1
 8000eae:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000eb0:	2282      	movs	r2, #130	; 0x82
 8000eb2:	6861      	ldr	r1, [r4, #4]
 8000eb4:	0052      	lsls	r2, r2, #1
 8000eb6:	4291      	cmp	r1, r2
 8000eb8:	d10c      	bne.n	8000ed4 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8000eba:	2180      	movs	r1, #128	; 0x80
 8000ebc:	68a2      	ldr	r2, [r4, #8]
 8000ebe:	0209      	lsls	r1, r1, #8
 8000ec0:	428a      	cmp	r2, r1
 8000ec2:	d003      	beq.n	8000ecc <SPI_WaitFlagStateUntilTimeout+0x54>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000ec4:	2180      	movs	r1, #128	; 0x80
 8000ec6:	00c9      	lsls	r1, r1, #3
 8000ec8:	428a      	cmp	r2, r1
 8000eca:	d103      	bne.n	8000ed4 <SPI_WaitFlagStateUntilTimeout+0x5c>
          __HAL_SPI_DISABLE(hspi);
 8000ecc:	2140      	movs	r1, #64	; 0x40
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	438a      	bics	r2, r1
 8000ed2:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000ed4:	2180      	movs	r1, #128	; 0x80
 8000ed6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ed8:	0189      	lsls	r1, r1, #6
 8000eda:	428a      	cmp	r2, r1
 8000edc:	d106      	bne.n	8000eec <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8000ede:	6819      	ldr	r1, [r3, #0]
 8000ee0:	4807      	ldr	r0, [pc, #28]	; (8000f00 <SPI_WaitFlagStateUntilTimeout+0x88>)
 8000ee2:	4001      	ands	r1, r0
 8000ee4:	6019      	str	r1, [r3, #0]
 8000ee6:	6819      	ldr	r1, [r3, #0]
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000eec:	0023      	movs	r3, r4
 8000eee:	2201      	movs	r2, #1
 8000ef0:	3351      	adds	r3, #81	; 0x51
 8000ef2:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	3450      	adds	r4, #80	; 0x50
 8000efa:	7023      	strb	r3, [r4, #0]
}
 8000efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	ffffdfff 	.word	0xffffdfff

08000f04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000f04:	b513      	push	{r0, r1, r4, lr}
 8000f06:	000b      	movs	r3, r1
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000f08:	2182      	movs	r1, #130	; 0x82
{
 8000f0a:	0004      	movs	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000f0c:	6840      	ldr	r0, [r0, #4]
 8000f0e:	0049      	lsls	r1, r1, #1
 8000f10:	4288      	cmp	r0, r1
 8000f12:	d109      	bne.n	8000f28 <SPI_EndRxTxTransaction+0x24>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000f14:	9200      	str	r2, [sp, #0]
 8000f16:	2200      	movs	r2, #0
 8000f18:	3984      	subs	r1, #132	; 0x84
 8000f1a:	0020      	movs	r0, r4
 8000f1c:	f7ff ffac 	bl	8000e78 <SPI_WaitFlagStateUntilTimeout>
 8000f20:	2800      	cmp	r0, #0
 8000f22:	d10a      	bne.n	8000f3a <SPI_EndRxTxTransaction+0x36>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8000f24:	2000      	movs	r0, #0
}
 8000f26:	bd16      	pop	{r1, r2, r4, pc}
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8000f28:	0021      	movs	r1, r4
 8000f2a:	3151      	adds	r1, #81	; 0x51
 8000f2c:	7809      	ldrb	r1, [r1, #0]
 8000f2e:	2905      	cmp	r1, #5
 8000f30:	d1f8      	bne.n	8000f24 <SPI_EndRxTxTransaction+0x20>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8000f32:	9200      	str	r2, [sp, #0]
 8000f34:	3904      	subs	r1, #4
 8000f36:	2200      	movs	r2, #0
 8000f38:	e7ef      	b.n	8000f1a <SPI_EndRxTxTransaction+0x16>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000f3a:	2320      	movs	r3, #32
 8000f3c:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8000f3e:	2003      	movs	r0, #3
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000f40:	4313      	orrs	r3, r2
 8000f42:	6563      	str	r3, [r4, #84]	; 0x54
 8000f44:	e7ef      	b.n	8000f26 <SPI_EndRxTxTransaction+0x22>

08000f46 <SPI_EndRxTransaction>:
{
 8000f46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f48:	000b      	movs	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f4a:	2182      	movs	r1, #130	; 0x82
{
 8000f4c:	0004      	movs	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f4e:	6840      	ldr	r0, [r0, #4]
 8000f50:	0049      	lsls	r1, r1, #1
 8000f52:	4288      	cmp	r0, r1
 8000f54:	d11f      	bne.n	8000f96 <SPI_EndRxTransaction+0x50>
 8000f56:	2080      	movs	r0, #128	; 0x80
 8000f58:	2580      	movs	r5, #128	; 0x80
 8000f5a:	68a1      	ldr	r1, [r4, #8]
 8000f5c:	0200      	lsls	r0, r0, #8
 8000f5e:	00ed      	lsls	r5, r5, #3
 8000f60:	4281      	cmp	r1, r0
 8000f62:	d001      	beq.n	8000f68 <SPI_EndRxTransaction+0x22>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000f64:	42a9      	cmp	r1, r5
 8000f66:	d106      	bne.n	8000f76 <SPI_EndRxTransaction+0x30>
    __HAL_SPI_DISABLE(hspi);
 8000f68:	2740      	movs	r7, #64	; 0x40
 8000f6a:	6826      	ldr	r6, [r4, #0]
 8000f6c:	6830      	ldr	r0, [r6, #0]
 8000f6e:	43b8      	bics	r0, r7
 8000f70:	6030      	str	r0, [r6, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8000f72:	42a9      	cmp	r1, r5
 8000f74:	d00f      	beq.n	8000f96 <SPI_EndRxTransaction+0x50>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000f76:	9200      	str	r2, [sp, #0]
 8000f78:	2180      	movs	r1, #128	; 0x80
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	0020      	movs	r0, r4
 8000f7e:	f7ff ff7b 	bl	8000e78 <SPI_WaitFlagStateUntilTimeout>
 8000f82:	2800      	cmp	r0, #0
 8000f84:	d101      	bne.n	8000f8a <SPI_EndRxTransaction+0x44>
  return HAL_OK;
 8000f86:	2000      	movs	r0, #0
}
 8000f88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000f8a:	2320      	movs	r3, #32
 8000f8c:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000f8e:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000f90:	4313      	orrs	r3, r2
 8000f92:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000f94:	e7f8      	b.n	8000f88 <SPI_EndRxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8000f96:	9200      	str	r2, [sp, #0]
 8000f98:	2101      	movs	r1, #1
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	e7ee      	b.n	8000f7c <SPI_EndRxTransaction+0x36>
	...

08000fa0 <HAL_SPI_Init>:
{
 8000fa0:	b570      	push	{r4, r5, r6, lr}
 8000fa2:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000fa4:	2001      	movs	r0, #1
  if (hspi == NULL)
 8000fa6:	2c00      	cmp	r4, #0
 8000fa8:	d03b      	beq.n	8001022 <HAL_SPI_Init+0x82>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000faa:	0025      	movs	r5, r4
 8000fac:	3551      	adds	r5, #81	; 0x51
 8000fae:	782b      	ldrb	r3, [r5, #0]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d105      	bne.n	8000fc2 <HAL_SPI_Init+0x22>
    hspi->Lock = HAL_UNLOCKED;
 8000fb6:	0022      	movs	r2, r4
 8000fb8:	3250      	adds	r2, #80	; 0x50
 8000fba:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8000fbc:	0020      	movs	r0, r4
 8000fbe:	f000 fa5d 	bl	800147c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8000fc2:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8000fc4:	2240      	movs	r2, #64	; 0x40
 8000fc6:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000fc8:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8000fca:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000fcc:	68a6      	ldr	r6, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8000fce:	4393      	bics	r3, r2
 8000fd0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000fd2:	6863      	ldr	r3, [r4, #4]
 8000fd4:	69a2      	ldr	r2, [r4, #24]
 8000fd6:	4333      	orrs	r3, r6
 8000fd8:	68e6      	ldr	r6, [r4, #12]
 8000fda:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000fdc:	4333      	orrs	r3, r6
 8000fde:	6926      	ldr	r6, [r4, #16]
 8000fe0:	4333      	orrs	r3, r6
 8000fe2:	6966      	ldr	r6, [r4, #20]
 8000fe4:	4333      	orrs	r3, r6
 8000fe6:	69e6      	ldr	r6, [r4, #28]
 8000fe8:	4333      	orrs	r3, r6
 8000fea:	6a26      	ldr	r6, [r4, #32]
 8000fec:	4333      	orrs	r3, r6
 8000fee:	2680      	movs	r6, #128	; 0x80
 8000ff0:	00b6      	lsls	r6, r6, #2
 8000ff2:	4016      	ands	r6, r2
 8000ff4:	4303      	orrs	r3, r0
 8000ff6:	4333      	orrs	r3, r6
 8000ff8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	0c12      	lsrs	r2, r2, #16
 8000ffe:	401a      	ands	r2, r3
 8001000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001002:	431a      	orrs	r2, r3
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001004:	2380      	movs	r3, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001006:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001008:	019b      	lsls	r3, r3, #6
 800100a:	4298      	cmp	r0, r3
 800100c:	d101      	bne.n	8001012 <HAL_SPI_Init+0x72>
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800100e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001010:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001012:	69cb      	ldr	r3, [r1, #28]
 8001014:	4a03      	ldr	r2, [pc, #12]	; (8001024 <HAL_SPI_Init+0x84>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001016:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001018:	4013      	ands	r3, r2
 800101a:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800101c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800101e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001020:	702b      	strb	r3, [r5, #0]
}
 8001022:	bd70      	pop	{r4, r5, r6, pc}
 8001024:	fffff7ff 	.word	0xfffff7ff

08001028 <HAL_SPI_TransmitReceive_DMA>:
{
 8001028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 800102a:	0006      	movs	r6, r0
{
 800102c:	9101      	str	r1, [sp, #4]
  __HAL_LOCK(hspi);
 800102e:	3650      	adds	r6, #80	; 0x50
 8001030:	7835      	ldrb	r5, [r6, #0]
{
 8001032:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8001034:	2002      	movs	r0, #2
 8001036:	2d01      	cmp	r5, #1
 8001038:	d054      	beq.n	80010e4 <HAL_SPI_TransmitReceive_DMA+0xbc>
  tmp_state           = hspi->State;
 800103a:	0025      	movs	r5, r4
  __HAL_LOCK(hspi);
 800103c:	3801      	subs	r0, #1
 800103e:	7030      	strb	r0, [r6, #0]
  tmp_state           = hspi->State;
 8001040:	3551      	adds	r5, #81	; 0x51
 8001042:	782f      	ldrb	r7, [r5, #0]
 8001044:	b2ff      	uxtb	r7, r7
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8001046:	4287      	cmp	r7, r0
 8001048:	d00c      	beq.n	8001064 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800104a:	3004      	adds	r0, #4
 800104c:	30ff      	adds	r0, #255	; 0xff
 800104e:	4684      	mov	ip, r0
 8001050:	6861      	ldr	r1, [r4, #4]
    errorcode = HAL_BUSY;
 8001052:	3803      	subs	r0, #3
 8001054:	38ff      	subs	r0, #255	; 0xff
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8001056:	4561      	cmp	r1, ip
 8001058:	d142      	bne.n	80010e0 <HAL_SPI_TransmitReceive_DMA+0xb8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800105a:	68a1      	ldr	r1, [r4, #8]
 800105c:	2900      	cmp	r1, #0
 800105e:	d13f      	bne.n	80010e0 <HAL_SPI_TransmitReceive_DMA+0xb8>
 8001060:	2f04      	cmp	r7, #4
 8001062:	d13d      	bne.n	80010e0 <HAL_SPI_TransmitReceive_DMA+0xb8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001064:	9901      	ldr	r1, [sp, #4]
    errorcode = HAL_ERROR;
 8001066:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001068:	2900      	cmp	r1, #0
 800106a:	d039      	beq.n	80010e0 <HAL_SPI_TransmitReceive_DMA+0xb8>
 800106c:	2a00      	cmp	r2, #0
 800106e:	d037      	beq.n	80010e0 <HAL_SPI_TransmitReceive_DMA+0xb8>
 8001070:	2b00      	cmp	r3, #0
 8001072:	d035      	beq.n	80010e0 <HAL_SPI_TransmitReceive_DMA+0xb8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001074:	7828      	ldrb	r0, [r5, #0]
 8001076:	2804      	cmp	r0, #4
 8001078:	d001      	beq.n	800107e <HAL_SPI_TransmitReceive_DMA+0x56>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800107a:	2005      	movs	r0, #5
 800107c:	7028      	strb	r0, [r5, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800107e:	2000      	movs	r0, #0
 8001080:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001082:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001084:	6460      	str	r0, [r4, #68]	; 0x44
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001086:	2080      	movs	r0, #128	; 0x80
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001088:	9901      	ldr	r1, [sp, #4]
  hspi->TxXferCount = Size;
 800108a:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800108c:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->RxXferSize  = Size;
 800108e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001090:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001092:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001094:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001096:	63a2      	str	r2, [r4, #56]	; 0x38
 8001098:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800109a:	0180      	lsls	r0, r0, #6
 800109c:	4283      	cmp	r3, r0
 800109e:	d106      	bne.n	80010ae <HAL_SPI_TransmitReceive_DMA+0x86>
    SPI_RESET_CRC(hspi);
 80010a0:	6808      	ldr	r0, [r1, #0]
 80010a2:	4f28      	ldr	r7, [pc, #160]	; (8001144 <HAL_SPI_TransmitReceive_DMA+0x11c>)
 80010a4:	4038      	ands	r0, r7
 80010a6:	6008      	str	r0, [r1, #0]
 80010a8:	6808      	ldr	r0, [r1, #0]
 80010aa:	4303      	orrs	r3, r0
 80010ac:	600b      	str	r3, [r1, #0]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80010ae:	782b      	ldrb	r3, [r5, #0]
 80010b0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d117      	bne.n	80010e6 <HAL_SPI_TransmitReceive_DMA+0xbe>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80010b6:	4b24      	ldr	r3, [pc, #144]	; (8001148 <HAL_SPI_TransmitReceive_DMA+0x120>)
 80010b8:	6303      	str	r3, [r0, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80010ba:	4b24      	ldr	r3, [pc, #144]	; (800114c <HAL_SPI_TransmitReceive_DMA+0x124>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80010bc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80010be:	4b24      	ldr	r3, [pc, #144]	; (8001150 <HAL_SPI_TransmitReceive_DMA+0x128>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80010c0:	310c      	adds	r1, #12
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80010c2:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80010c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	f7ff fa00 	bl	80004d0 <HAL_DMA_Start_IT>
 80010d0:	1e03      	subs	r3, r0, #0
 80010d2:	d00c      	beq.n	80010ee <HAL_SPI_TransmitReceive_DMA+0xc6>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80010d4:	2310      	movs	r3, #16
    hspi->State = HAL_SPI_STATE_READY;
 80010d6:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80010d8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80010da:	4313      	orrs	r3, r2
 80010dc:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 80010de:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hspi);
 80010e0:	2300      	movs	r3, #0
 80010e2:	7033      	strb	r3, [r6, #0]
}
 80010e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_SPI_TransmitReceive_DMA+0x12c>)
 80010e8:	6303      	str	r3, [r0, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80010ea:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <HAL_SPI_TransmitReceive_DMA+0x130>)
 80010ec:	e7e6      	b.n	80010bc <HAL_SPI_TransmitReceive_DMA+0x94>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80010ee:	2701      	movs	r7, #1
 80010f0:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80010f2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80010f4:	6851      	ldr	r1, [r2, #4]
 80010f6:	4339      	orrs	r1, r7
 80010f8:	6051      	str	r1, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80010fa:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80010fc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80010fe:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8001100:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8001102:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001104:	320c      	adds	r2, #12
 8001106:	b29b      	uxth	r3, r3
 8001108:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800110a:	f7ff f9e1 	bl	80004d0 <HAL_DMA_Start_IT>
 800110e:	2800      	cmp	r0, #0
 8001110:	d006      	beq.n	8001120 <HAL_SPI_TransmitReceive_DMA+0xf8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001112:	2310      	movs	r3, #16
 8001114:	6d62      	ldr	r2, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001116:	0038      	movs	r0, r7
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001118:	4313      	orrs	r3, r2
 800111a:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 800111c:	702f      	strb	r7, [r5, #0]
    goto error;
 800111e:	e7df      	b.n	80010e0 <HAL_SPI_TransmitReceive_DMA+0xb8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001120:	2240      	movs	r2, #64	; 0x40
 8001122:	6823      	ldr	r3, [r4, #0]
 8001124:	6819      	ldr	r1, [r3, #0]
 8001126:	4211      	tst	r1, r2
 8001128:	d102      	bne.n	8001130 <HAL_SPI_TransmitReceive_DMA+0x108>
    __HAL_SPI_ENABLE(hspi);
 800112a:	6819      	ldr	r1, [r3, #0]
 800112c:	430a      	orrs	r2, r1
 800112e:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001130:	2220      	movs	r2, #32
 8001132:	6859      	ldr	r1, [r3, #4]
 8001134:	430a      	orrs	r2, r1
 8001136:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001138:	2202      	movs	r2, #2
 800113a:	6859      	ldr	r1, [r3, #4]
 800113c:	430a      	orrs	r2, r1
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	e7ce      	b.n	80010e0 <HAL_SPI_TransmitReceive_DMA+0xb8>
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	ffffdfff 	.word	0xffffdfff
 8001148:	08001161 	.word	0x08001161
 800114c:	0800119d 	.word	0x0800119d
 8001150:	08001177 	.word	0x08001177
 8001154:	0800116d 	.word	0x0800116d
 8001158:	08001239 	.word	0x08001239

0800115c <HAL_SPI_RxCpltCallback>:
 800115c:	4770      	bx	lr

0800115e <HAL_SPI_RxHalfCpltCallback>:
 800115e:	4770      	bx	lr

08001160 <SPI_DMAHalfReceiveCplt>:
{
 8001160:	b510      	push	{r4, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8001162:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001164:	f7ff fffb 	bl	800115e <HAL_SPI_RxHalfCpltCallback>
}
 8001168:	bd10      	pop	{r4, pc}

0800116a <HAL_SPI_TxRxHalfCpltCallback>:
 800116a:	4770      	bx	lr

0800116c <SPI_DMAHalfTransmitReceiveCplt>:
{
 800116c:	b510      	push	{r4, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800116e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001170:	f7ff fffb 	bl	800116a <HAL_SPI_TxRxHalfCpltCallback>
}
 8001174:	bd10      	pop	{r4, pc}

08001176 <SPI_DMAError>:
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001176:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001178:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800117a:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800117c:	6802      	ldr	r2, [r0, #0]
 800117e:	6853      	ldr	r3, [r2, #4]
 8001180:	438b      	bics	r3, r1
 8001182:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001184:	2310      	movs	r3, #16
 8001186:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001188:	4313      	orrs	r3, r2
 800118a:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800118c:	0003      	movs	r3, r0
 800118e:	2201      	movs	r2, #1
 8001190:	3351      	adds	r3, #81	; 0x51
 8001192:	701a      	strb	r2, [r3, #0]
  HAL_SPI_ErrorCallback(hspi);
 8001194:	f000 f96c 	bl	8001470 <HAL_SPI_ErrorCallback>
}
 8001198:	bd10      	pop	{r4, pc}
	...

0800119c <SPI_DMAReceiveCplt>:
{
 800119c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800119e:	0006      	movs	r6, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80011a0:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 80011a2:	f7ff f8ed 	bl	8000380 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80011a6:	2120      	movs	r1, #32
 80011a8:	6833      	ldr	r3, [r6, #0]
  tickstart = HAL_GetTick();
 80011aa:	0005      	movs	r5, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	420b      	tst	r3, r1
 80011b0:	d13c      	bne.n	800122c <SPI_DMAReceiveCplt+0x90>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80011b2:	6822      	ldr	r2, [r4, #0]
 80011b4:	6853      	ldr	r3, [r2, #4]
 80011b6:	438b      	bics	r3, r1
 80011b8:	6053      	str	r3, [r2, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011be:	019b      	lsls	r3, r3, #6
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d10e      	bne.n	80011e2 <SPI_DMAReceiveCplt+0x46>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80011c4:	2201      	movs	r2, #1
 80011c6:	9000      	str	r0, [sp, #0]
 80011c8:	2364      	movs	r3, #100	; 0x64
 80011ca:	0011      	movs	r1, r2
 80011cc:	0020      	movs	r0, r4
 80011ce:	f7ff fe53 	bl	8000e78 <SPI_WaitFlagStateUntilTimeout>
 80011d2:	2800      	cmp	r0, #0
 80011d4:	d003      	beq.n	80011de <SPI_DMAReceiveCplt+0x42>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80011d6:	2302      	movs	r3, #2
 80011d8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80011da:	4313      	orrs	r3, r2
 80011dc:	6563      	str	r3, [r4, #84]	; 0x54
      READ_REG(hspi->Instance->DR);
 80011de:	6823      	ldr	r3, [r4, #0]
 80011e0:	68db      	ldr	r3, [r3, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80011e2:	2103      	movs	r1, #3
 80011e4:	6822      	ldr	r2, [r4, #0]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80011e6:	0020      	movs	r0, r4
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80011e8:	6853      	ldr	r3, [r2, #4]
 80011ea:	438b      	bics	r3, r1
 80011ec:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80011ee:	3161      	adds	r1, #97	; 0x61
 80011f0:	002a      	movs	r2, r5
 80011f2:	f7ff fea8 	bl	8000f46 <SPI_EndRxTransaction>
 80011f6:	2800      	cmp	r0, #0
 80011f8:	d001      	beq.n	80011fe <SPI_DMAReceiveCplt+0x62>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80011fa:	2320      	movs	r3, #32
 80011fc:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->RxXferCount = 0U;
 80011fe:	2300      	movs	r3, #0
 8001200:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8001202:	0023      	movs	r3, r4
 8001204:	2201      	movs	r2, #1
 8001206:	3351      	adds	r3, #81	; 0x51
 8001208:	701a      	strb	r2, [r3, #0]
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800120a:	6822      	ldr	r2, [r4, #0]
 800120c:	6893      	ldr	r3, [r2, #8]
 800120e:	06db      	lsls	r3, r3, #27
 8001210:	d505      	bpl.n	800121e <SPI_DMAReceiveCplt+0x82>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001212:	2302      	movs	r3, #2
 8001214:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001216:	430b      	orrs	r3, r1
 8001218:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <SPI_DMAReceiveCplt+0x98>)
 800121c:	6093      	str	r3, [r2, #8]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800121e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <SPI_DMAReceiveCplt+0x90>
      HAL_SPI_ErrorCallback(hspi);
 8001224:	0020      	movs	r0, r4
 8001226:	f000 f923 	bl	8001470 <HAL_SPI_ErrorCallback>
}
 800122a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
  HAL_SPI_RxCpltCallback(hspi);
 800122c:	0020      	movs	r0, r4
 800122e:	f7ff ff95 	bl	800115c <HAL_SPI_RxCpltCallback>
 8001232:	e7fa      	b.n	800122a <SPI_DMAReceiveCplt+0x8e>
 8001234:	0000ffef 	.word	0x0000ffef

08001238 <SPI_DMATransmitReceiveCplt>:
{
 8001238:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800123a:	0006      	movs	r6, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800123c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 800123e:	f7ff f89f 	bl	8000380 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001242:	2120      	movs	r1, #32
 8001244:	6833      	ldr	r3, [r6, #0]
  tickstart = HAL_GetTick();
 8001246:	0005      	movs	r5, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	420b      	tst	r3, r1
 800124c:	d13e      	bne.n	80012cc <SPI_DMATransmitReceiveCplt+0x94>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800124e:	6822      	ldr	r2, [r4, #0]
 8001250:	6853      	ldr	r3, [r2, #4]
 8001252:	438b      	bics	r3, r1
 8001254:	6053      	str	r3, [r2, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800125a:	019b      	lsls	r3, r3, #6
 800125c:	429a      	cmp	r2, r3
 800125e:	d10e      	bne.n	800127e <SPI_DMATransmitReceiveCplt+0x46>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001260:	2201      	movs	r2, #1
 8001262:	9000      	str	r0, [sp, #0]
 8001264:	2364      	movs	r3, #100	; 0x64
 8001266:	0011      	movs	r1, r2
 8001268:	0020      	movs	r0, r4
 800126a:	f7ff fe05 	bl	8000e78 <SPI_WaitFlagStateUntilTimeout>
 800126e:	2800      	cmp	r0, #0
 8001270:	d003      	beq.n	800127a <SPI_DMATransmitReceiveCplt+0x42>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001272:	2302      	movs	r3, #2
 8001274:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001276:	4313      	orrs	r3, r2
 8001278:	6563      	str	r3, [r4, #84]	; 0x54
      READ_REG(hspi->Instance->DR);
 800127a:	6823      	ldr	r3, [r4, #0]
 800127c:	68db      	ldr	r3, [r3, #12]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800127e:	002a      	movs	r2, r5
 8001280:	2164      	movs	r1, #100	; 0x64
 8001282:	0020      	movs	r0, r4
 8001284:	f7ff fe3e 	bl	8000f04 <SPI_EndRxTxTransaction>
 8001288:	2800      	cmp	r0, #0
 800128a:	d003      	beq.n	8001294 <SPI_DMATransmitReceiveCplt+0x5c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800128c:	2320      	movs	r3, #32
 800128e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001290:	4313      	orrs	r3, r2
 8001292:	6563      	str	r3, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001294:	2103      	movs	r1, #3
 8001296:	6823      	ldr	r3, [r4, #0]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	438a      	bics	r2, r1
 800129c:	605a      	str	r2, [r3, #4]
    hspi->TxXferCount = 0U;
 800129e:	2200      	movs	r2, #0
 80012a0:	86e2      	strh	r2, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80012a2:	87e2      	strh	r2, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80012a4:	0022      	movs	r2, r4
 80012a6:	3902      	subs	r1, #2
 80012a8:	3251      	adds	r2, #81	; 0x51
 80012aa:	7011      	strb	r1, [r2, #0]
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	06d2      	lsls	r2, r2, #27
 80012b0:	d505      	bpl.n	80012be <SPI_DMATransmitReceiveCplt+0x86>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80012b2:	2202      	movs	r2, #2
 80012b4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80012b6:	430a      	orrs	r2, r1
 80012b8:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80012ba:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <SPI_DMATransmitReceiveCplt+0x9c>)
 80012bc:	609a      	str	r2, [r3, #8]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80012be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <SPI_DMATransmitReceiveCplt+0x94>
      HAL_SPI_ErrorCallback(hspi);
 80012c4:	0020      	movs	r0, r4
 80012c6:	f000 f8d3 	bl	8001470 <HAL_SPI_ErrorCallback>
}
 80012ca:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
  HAL_SPI_TxRxCpltCallback(hspi);
 80012cc:	0020      	movs	r0, r4
 80012ce:	f000 f8c5 	bl	800145c <HAL_SPI_TxRxCpltCallback>
 80012d2:	e7fa      	b.n	80012ca <SPI_DMATransmitReceiveCplt+0x92>
 80012d4:	0000ffef 	.word	0x0000ffef

080012d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80012d8:	480d      	ldr	r0, [pc, #52]	; (8001310 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80012da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80012dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012de:	e003      	b.n	80012e8 <LoopCopyDataInit>

080012e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80012e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012e6:	3104      	adds	r1, #4

080012e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80012e8:	480b      	ldr	r0, [pc, #44]	; (8001318 <LoopForever+0xa>)
  ldr  r3, =_edata
 80012ea:	4b0c      	ldr	r3, [pc, #48]	; (800131c <LoopForever+0xe>)
  adds  r2, r0, r1
 80012ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012f0:	d3f6      	bcc.n	80012e0 <CopyDataInit>
  ldr  r2, =_sbss
 80012f2:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <LoopForever+0x12>)
  b  LoopFillZerobss
 80012f4:	e002      	b.n	80012fc <LoopFillZerobss>

080012f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80012f6:	2300      	movs	r3, #0
  str  r3, [r2]
 80012f8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012fa:	3204      	adds	r2, #4

080012fc <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <LoopForever+0x16>)
  cmp  r2, r3
 80012fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001300:	d3f9      	bcc.n	80012f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001302:	f7fe ffd9 	bl	80002b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001306:	f000 f967 	bl	80015d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800130a:	f000 f853 	bl	80013b4 <main>

0800130e <LoopForever>:

LoopForever:
    b LoopForever
 800130e:	e7fe      	b.n	800130e <LoopForever>
   ldr   r0, =_estack
 8001310:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8001314:	08001674 	.word	0x08001674
  ldr  r0, =_sdata
 8001318:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800131c:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 8001320:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8001324:	20000134 	.word	0x20000134

08001328 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001328:	e7fe      	b.n	8001328 <ADC1_COMP_IRQHandler>

0800132a <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 800132a:	b510      	push	{r4, lr}
  BSP_LED_Off(LED2);
 800132c:	2000      	movs	r0, #0
  while(1)
  {
    /* Toogle LED2 for error */
    BSP_LED_Toggle(LED2);
    HAL_Delay(1000);
 800132e:	24fa      	movs	r4, #250	; 0xfa
  BSP_LED_Off(LED2);
 8001330:	f7fe ffaa 	bl	8000288 <BSP_LED_Off>
    HAL_Delay(1000);
 8001334:	00a4      	lsls	r4, r4, #2
    BSP_LED_Toggle(LED2);
 8001336:	2000      	movs	r0, #0
 8001338:	f7fe ffb2 	bl	80002a0 <BSP_LED_Toggle>
    HAL_Delay(1000);
 800133c:	0020      	movs	r0, r4
 800133e:	f7ff f825 	bl	800038c <HAL_Delay>
 8001342:	e7f8      	b.n	8001336 <Error_Handler+0xc>

08001344 <SystemClock_Config>:
{
 8001344:	b500      	push	{lr}
 8001346:	b095      	sub	sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001348:	2214      	movs	r2, #20
 800134a:	2100      	movs	r1, #0
 800134c:	a801      	add	r0, sp, #4
 800134e:	f000 f967 	bl	8001620 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001352:	2100      	movs	r1, #0
 8001354:	2234      	movs	r2, #52	; 0x34
 8001356:	a807      	add	r0, sp, #28
 8001358:	f000 f962 	bl	8001620 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800135c:	2310      	movs	r3, #16
 800135e:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001360:	3b0f      	subs	r3, #15
 8001362:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001364:	23a0      	movs	r3, #160	; 0xa0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8001366:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 800136c:	f7ff fa40 	bl	80007f0 <HAL_RCC_OscConfig>
 8001370:	1e01      	subs	r1, r0, #0
 8001372:	d000      	beq.n	8001376 <SystemClock_Config+0x32>
 8001374:	e7fe      	b.n	8001374 <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001376:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001378:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137a:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;  
 800137c:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 800137e:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0)!= HAL_OK)
 8001380:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001382:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0)!= HAL_OK)
 8001384:	f7ff fcc0 	bl	8000d08 <HAL_RCC_ClockConfig>
 8001388:	2800      	cmp	r0, #0
 800138a:	d000      	beq.n	800138e <SystemClock_Config+0x4a>
 800138c:	e7fe      	b.n	800138c <SystemClock_Config+0x48>
  __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	4a06      	ldr	r2, [pc, #24]	; (80013ac <SystemClock_Config+0x68>)
 8001392:	055b      	lsls	r3, r3, #21
 8001394:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001396:	430b      	orrs	r3, r1
 8001398:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800139a:	23c0      	movs	r3, #192	; 0xc0
 800139c:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <SystemClock_Config+0x6c>)
 800139e:	015b      	lsls	r3, r3, #5
 80013a0:	6811      	ldr	r1, [r2, #0]
 80013a2:	430b      	orrs	r3, r1
 80013a4:	6013      	str	r3, [r2, #0]
}
 80013a6:	b015      	add	sp, #84	; 0x54
 80013a8:	bd00      	pop	{pc}
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40007000 	.word	0x40007000

080013b4 <main>:
{
 80013b4:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 80013b6:	f7fe ffc7 	bl	8000348 <HAL_Init>
  SystemClock_Config();
 80013ba:	f7ff ffc3 	bl	8001344 <SystemClock_Config>
  BSP_LED_Init(LED2);
 80013be:	2000      	movs	r0, #0
 80013c0:	f7fe ff2e 	bl	8000220 <BSP_LED_Init>
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_ENABLE;
 80013c4:	2280      	movs	r2, #128	; 0x80
  SpiHandle.Instance               = SPIx;
 80013c6:	4c1f      	ldr	r4, [pc, #124]	; (8001444 <main+0x90>)
 80013c8:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <main+0x94>)
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_ENABLE;
 80013ca:	0192      	lsls	r2, r2, #6
  SpiHandle.Instance               = SPIx;
 80013cc:	6023      	str	r3, [r4, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013ce:	2320      	movs	r3, #32
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_ENABLE;
 80013d0:	62a2      	str	r2, [r4, #40]	; 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 80013d2:	2207      	movs	r2, #7
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013d4:	61e3      	str	r3, [r4, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 80013d6:	2300      	movs	r3, #0
  SpiHandle.Init.CRCPolynomial     = 7;
 80013d8:	62e2      	str	r2, [r4, #44]	; 0x2c
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 80013da:	32fa      	adds	r2, #250	; 0xfa
 80013dc:	32ff      	adds	r2, #255	; 0xff
  if(HAL_SPI_Init(&SpiHandle) != HAL_OK)
 80013de:	0020      	movs	r0, r4
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 80013e0:	60a3      	str	r3, [r4, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80013e2:	6163      	str	r3, [r4, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80013e4:	6123      	str	r3, [r4, #16]
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 80013e6:	60e3      	str	r3, [r4, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80013e8:	6223      	str	r3, [r4, #32]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
 80013ea:	6263      	str	r3, [r4, #36]	; 0x24
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 80013ec:	61a2      	str	r2, [r4, #24]
  SpiHandle.Init.Mode = SPI_MODE_SLAVE;
 80013ee:	6063      	str	r3, [r4, #4]
  if(HAL_SPI_Init(&SpiHandle) != HAL_OK)
 80013f0:	f7ff fdd6 	bl	8000fa0 <HAL_SPI_Init>
 80013f4:	2800      	cmp	r0, #0
 80013f6:	d001      	beq.n	80013fc <main+0x48>
      Error_Handler();
 80013f8:	f7ff ff97 	bl	800132a <Error_Handler>
  if(HAL_SPI_TransmitReceive_DMA(&SpiHandle, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, BUFFERSIZE) != HAL_OK)
 80013fc:	4d13      	ldr	r5, [pc, #76]	; (800144c <main+0x98>)
 80013fe:	4e14      	ldr	r6, [pc, #80]	; (8001450 <main+0x9c>)
 8001400:	2306      	movs	r3, #6
 8001402:	002a      	movs	r2, r5
 8001404:	0031      	movs	r1, r6
 8001406:	0020      	movs	r0, r4
 8001408:	f7ff fe0e 	bl	8001028 <HAL_SPI_TransmitReceive_DMA>
 800140c:	2800      	cmp	r0, #0
 800140e:	d1f3      	bne.n	80013f8 <main+0x44>
  while (wTransferState == TRANSFER_WAIT)
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <main+0xa0>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	2a00      	cmp	r2, #0
 8001416:	d0fc      	beq.n	8001412 <main+0x5e>
  switch(wTransferState)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d1ec      	bne.n	80013f8 <main+0x44>
 800141e:	2200      	movs	r2, #0
 8001420:	2306      	movs	r3, #6
  * @retval 0  : pBuffer1 identical to pBuffer2
  *         >0 : pBuffer1 differs from pBuffer2
  */
static uint16_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
  while (BufferLength--)
 8001422:	490d      	ldr	r1, [pc, #52]	; (8001458 <main+0xa4>)
  {
    if((*pBuffer1) != *pBuffer2)
 8001424:	3607      	adds	r6, #7
 8001426:	e005      	b.n	8001434 <main+0x80>
 8001428:	1c50      	adds	r0, r2, #1
 800142a:	5d94      	ldrb	r4, [r2, r6]
 800142c:	5caa      	ldrb	r2, [r5, r2]
 800142e:	4294      	cmp	r4, r2
 8001430:	d105      	bne.n	800143e <main+0x8a>
 8001432:	0002      	movs	r2, r0
  while (BufferLength--)
 8001434:	3b01      	subs	r3, #1
 8001436:	b29b      	uxth	r3, r3
 8001438:	428b      	cmp	r3, r1
 800143a:	d1f5      	bne.n	8001428 <main+0x74>
 800143c:	e7fe      	b.n	800143c <main+0x88>
      if(Buffercmp((uint8_t*)aCompareBuffer, (uint8_t*)aRxBuffer, BUFFERSIZE))
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0fc      	beq.n	800143c <main+0x88>
 8001442:	e7d9      	b.n	80013f8 <main+0x44>
 8001444:	200000d4 	.word	0x200000d4
 8001448:	40003800 	.word	0x40003800
 800144c:	2000012c 	.word	0x2000012c
 8001450:	20000010 	.word	0x20000010
 8001454:	2000003c 	.word	0x2000003c
 8001458:	0000ffff 	.word	0x0000ffff

0800145c <HAL_SPI_TxRxCpltCallback>:
{
 800145c:	b510      	push	{r4, lr}
  BSP_LED_On(LED2);
 800145e:	2000      	movs	r0, #0
 8001460:	f7fe ff06 	bl	8000270 <BSP_LED_On>
  wTransferState = TRANSFER_COMPLETE;
 8001464:	2201      	movs	r2, #1
 8001466:	4b01      	ldr	r3, [pc, #4]	; (800146c <HAL_SPI_TxRxCpltCallback+0x10>)
 8001468:	601a      	str	r2, [r3, #0]
}
 800146a:	bd10      	pop	{r4, pc}
 800146c:	2000003c 	.word	0x2000003c

08001470 <HAL_SPI_ErrorCallback>:
  wTransferState = TRANSFER_ERROR;
 8001470:	2202      	movs	r2, #2
 8001472:	4b01      	ldr	r3, [pc, #4]	; (8001478 <HAL_SPI_ErrorCallback+0x8>)
 8001474:	601a      	str	r2, [r3, #0]
}
 8001476:	4770      	bx	lr
 8001478:	2000003c 	.word	0x2000003c

0800147c <HAL_SPI_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
GPIO_InitTypeDef  GPIO_InitStruct;
	
  if (hspi->Instance == SPIx)
 800147e:	4b46      	ldr	r3, [pc, #280]	; (8001598 <HAL_SPI_MspInit+0x11c>)
 8001480:	6802      	ldr	r2, [r0, #0]
{
 8001482:	b08b      	sub	sp, #44	; 0x2c
 8001484:	0007      	movs	r7, r0
  if (hspi->Instance == SPIx)
 8001486:	429a      	cmp	r2, r3
 8001488:	d000      	beq.n	800148c <HAL_SPI_MspInit+0x10>
 800148a:	e082      	b.n	8001592 <HAL_SPI_MspInit+0x116>
  {
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    SPIx_SCK_GPIO_CLK_ENABLE();
 800148c:	2602      	movs	r6, #2
    SPIx_MISO_GPIO_CLK_ENABLE();
    SPIx_MOSI_GPIO_CLK_ENABLE();
    /* Enable SPI2 clock */
    SPIx_CLK_ENABLE();
 800148e:	2480      	movs	r4, #128	; 0x80
    SPIx_SCK_GPIO_CLK_ENABLE();
 8001490:	4b42      	ldr	r3, [pc, #264]	; (800159c <HAL_SPI_MspInit+0x120>)
    /* Enable DMA clock */
    DMAx_CLK_ENABLE();
 8001492:	2101      	movs	r1, #1
    SPIx_SCK_GPIO_CLK_ENABLE();
 8001494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    SPIx_CLK_ENABLE();
 8001496:	01e4      	lsls	r4, r4, #7
    SPIx_SCK_GPIO_CLK_ENABLE();
 8001498:	4332      	orrs	r2, r6
 800149a:	62da      	str	r2, [r3, #44]	; 0x2c
 800149c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    /* SPI SCK GPIO pin configuration  */
    GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 800149e:	2500      	movs	r5, #0
    SPIx_SCK_GPIO_CLK_ENABLE();
 80014a0:	4032      	ands	r2, r6
 80014a2:	9201      	str	r2, [sp, #4]
 80014a4:	9a01      	ldr	r2, [sp, #4]
    SPIx_MISO_GPIO_CLK_ENABLE();
 80014a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 80014a8:	483d      	ldr	r0, [pc, #244]	; (80015a0 <HAL_SPI_MspInit+0x124>)
    SPIx_MISO_GPIO_CLK_ENABLE();
 80014aa:	4332      	orrs	r2, r6
 80014ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80014ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b0:	4032      	ands	r2, r6
 80014b2:	9202      	str	r2, [sp, #8]
 80014b4:	9a02      	ldr	r2, [sp, #8]
    SPIx_MOSI_GPIO_CLK_ENABLE();
 80014b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b8:	4332      	orrs	r2, r6
 80014ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80014bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014be:	4032      	ands	r2, r6
 80014c0:	9203      	str	r2, [sp, #12]
 80014c2:	9a03      	ldr	r2, [sp, #12]
    SPIx_CLK_ENABLE();
 80014c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014c6:	4322      	orrs	r2, r4
 80014c8:	639a      	str	r2, [r3, #56]	; 0x38
    DMAx_CLK_ENABLE();
 80014ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014cc:	430a      	orrs	r2, r1
 80014ce:	631a      	str	r2, [r3, #48]	; 0x30
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80014d2:	9606      	str	r6, [sp, #24]
    DMAx_CLK_ENABLE();
 80014d4:	400b      	ands	r3, r1
 80014d6:	9304      	str	r3, [sp, #16]
 80014d8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
 80014da:	2380      	movs	r3, #128	; 0x80
 80014dc:	019b      	lsls	r3, r3, #6
 80014de:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e0:	2303      	movs	r3, #3
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 80014e2:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 80014e6:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 80014e8:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 80014ea:	f7ff f87d 	bl	80005e8 <HAL_GPIO_Init>

    /* SPI MISO GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
    GPIO_InitStruct.Alternate = SPIx_MISO_AF;
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 80014ee:	a905      	add	r1, sp, #20
 80014f0:	482b      	ldr	r0, [pc, #172]	; (80015a0 <HAL_SPI_MspInit+0x124>)
    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 80014f2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 80014f4:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 80014f6:	f7ff f877 	bl	80005e8 <HAL_GPIO_Init>

    /* SPI MOSI GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 80014fa:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
    HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);

    /* SPI NSS GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPIx_NSS_PIN;
 80014fc:	2480      	movs	r4, #128	; 0x80
    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 80014fe:	021b      	lsls	r3, r3, #8
    HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001500:	a905      	add	r1, sp, #20
 8001502:	4827      	ldr	r0, [pc, #156]	; (80015a0 <HAL_SPI_MspInit+0x124>)
    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8001504:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = SPIx_NSS_PIN;
 8001506:	0164      	lsls	r4, r4, #5
    GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 8001508:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800150a:	f7ff f86d 	bl	80005e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = SPIx_NSS_AF;
    HAL_GPIO_Init(SPIx_NSS_GPIO_PORT, &GPIO_InitStruct);
 800150e:	a905      	add	r1, sp, #20
 8001510:	4823      	ldr	r0, [pc, #140]	; (80015a0 <HAL_SPI_MspInit+0x124>)
    GPIO_InitStruct.Pin = SPIx_NSS_PIN;
 8001512:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Alternate = SPIx_NSS_AF;
 8001514:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(SPIx_NSS_GPIO_PORT, &GPIO_InitStruct);
 8001516:	f7ff f867 	bl	80005e8 <HAL_GPIO_Init>

    /* SPI NSS GPIO pin configuration  */
	GPIO_InitStruct.Pin = SPIx_MASTERCOM_TRIG_PIN;
	GPIO_InitStruct.Alternate = SPIx_MASTERCOM_TRIG_AF;
	HAL_GPIO_Init(SPIx_MASTERCOM_TRIG_GPIO_PORT, &GPIO_InitStruct);
 800151a:	a905      	add	r1, sp, #20
 800151c:	4820      	ldr	r0, [pc, #128]	; (80015a0 <HAL_SPI_MspInit+0x124>)
	GPIO_InitStruct.Pin = SPIx_MASTERCOM_TRIG_PIN;
 800151e:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Alternate = SPIx_MASTERCOM_TRIG_AF;
 8001520:	9509      	str	r5, [sp, #36]	; 0x24
	HAL_GPIO_Init(SPIx_MASTERCOM_TRIG_GPIO_PORT, &GPIO_InitStruct);
 8001522:	f7ff f861 	bl	80005e8 <HAL_GPIO_Init>


    /*##-3- Configure the DMA ##################################################*/
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = SPIx_TX_DMA_CHANNEL;
 8001526:	4c1f      	ldr	r4, [pc, #124]	; (80015a4 <HAL_SPI_MspInit+0x128>)
 8001528:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <HAL_SPI_MspInit+0x12c>)
    hdma_tx.Init.Request             = SPIx_TX_DMA_REQUEST;
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800152a:	2280      	movs	r2, #128	; 0x80
    hdma_tx.Instance                 = SPIx_TX_DMA_CHANNEL;
 800152c:	6023      	str	r3, [r4, #0]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800152e:	2310      	movs	r3, #16
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
    hdma_tx.Init.Mode                = DMA_NORMAL;
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;

    HAL_DMA_Init(&hdma_tx);
 8001530:	0020      	movs	r0, r4
    hdma_tx.Init.Request             = SPIx_TX_DMA_REQUEST;
 8001532:	6066      	str	r6, [r4, #4]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001534:	60a3      	str	r3, [r4, #8]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001536:	6122      	str	r2, [r4, #16]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001538:	60e5      	str	r5, [r4, #12]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800153a:	6165      	str	r5, [r4, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 800153c:	61a5      	str	r5, [r4, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 800153e:	61e5      	str	r5, [r4, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8001540:	6225      	str	r5, [r4, #32]
    HAL_DMA_Init(&hdma_tx);
 8001542:	f7fe ff81 	bl	8000448 <HAL_DMA_Init>

    /* Associate the initialized DMA handle to the the SPI handle */
    __HAL_LINKDMA(hspi, hdmatx, hdma_tx);

    /* Configure the DMA handler for Transmission process */
    hdma_rx.Instance                 = SPIx_RX_DMA_CHANNEL;
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <HAL_SPI_MspInit+0x130>)

    hdma_rx.Init.Request             = SPIx_RX_DMA_REQUEST;
 8001548:	64e6      	str	r6, [r4, #76]	; 0x4c
    hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
    hdma_rx.Init.Mode                = DMA_NORMAL;
    hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;

    HAL_DMA_Init(&hdma_rx);
 800154a:	0026      	movs	r6, r4
    hdma_rx.Instance                 = SPIx_RX_DMA_CHANNEL;
 800154c:	64a3      	str	r3, [r4, #72]	; 0x48
    hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800154e:	2380      	movs	r3, #128	; 0x80
    hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8001550:	2280      	movs	r2, #128	; 0x80
    HAL_DMA_Init(&hdma_rx);
 8001552:	3648      	adds	r6, #72	; 0x48
    hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001554:	019b      	lsls	r3, r3, #6
    __HAL_LINKDMA(hspi, hdmatx, hdma_tx);
 8001556:	64bc      	str	r4, [r7, #72]	; 0x48
    HAL_DMA_Init(&hdma_rx);
 8001558:	0030      	movs	r0, r6
    hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800155a:	66a3      	str	r3, [r4, #104]	; 0x68
    hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800155c:	65a2      	str	r2, [r4, #88]	; 0x58
    __HAL_LINKDMA(hspi, hdmatx, hdma_tx);
 800155e:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001560:	6525      	str	r5, [r4, #80]	; 0x50
    hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001562:	6565      	str	r5, [r4, #84]	; 0x54
    hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001564:	65e5      	str	r5, [r4, #92]	; 0x5c
    hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8001566:	6625      	str	r5, [r4, #96]	; 0x60
    hdma_rx.Init.Mode                = DMA_NORMAL;
 8001568:	6665      	str	r5, [r4, #100]	; 0x64
    HAL_DMA_Init(&hdma_rx);
 800156a:	f7fe ff6d 	bl	8000448 <HAL_DMA_Init>
    /* Associate the initialized DMA handle to the the SPI handle */
    __HAL_LINKDMA(hspi, hdmarx, hdma_rx);
    
    /*##-4- Configure the NVIC for DMA #########################################*/ 
    /* NVIC configuration for DMA transfer complete interrupt (SPI2_TX) */
    HAL_NVIC_SetPriority(SPIx_DMA_TX_IRQn, 1, 1);
 800156e:	2201      	movs	r2, #1
 8001570:	200b      	movs	r0, #11
 8001572:	0011      	movs	r1, r2
    __HAL_LINKDMA(hspi, hdmarx, hdma_rx);
 8001574:	64fe      	str	r6, [r7, #76]	; 0x4c
 8001576:	6727      	str	r7, [r4, #112]	; 0x70
    HAL_NVIC_SetPriority(SPIx_DMA_TX_IRQn, 1, 1);
 8001578:	f7fe ff18 	bl	80003ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPIx_DMA_TX_IRQn);
 800157c:	200b      	movs	r0, #11
 800157e:	f7fe ff3f 	bl	8000400 <HAL_NVIC_EnableIRQ>
    
    /* NVIC configuration for DMA transfer complete interrupt (SPI2_RX) */
    HAL_NVIC_SetPriority(SPIx_DMA_RX_IRQn, 1, 0);
 8001582:	200b      	movs	r0, #11
 8001584:	002a      	movs	r2, r5
 8001586:	2101      	movs	r1, #1
 8001588:	f7fe ff10 	bl	80003ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPIx_DMA_RX_IRQn);
 800158c:	200b      	movs	r0, #11
 800158e:	f7fe ff37 	bl	8000400 <HAL_NVIC_EnableIRQ>
  }
}
 8001592:	b00b      	add	sp, #44	; 0x2c
 8001594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	40003800 	.word	0x40003800
 800159c:	40021000 	.word	0x40021000
 80015a0:	50000400 	.word	0x50000400
 80015a4:	20000040 	.word	0x20000040
 80015a8:	40020058 	.word	0x40020058
 80015ac:	40020044 	.word	0x40020044

080015b0 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80015b0:	4770      	bx	lr

080015b2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80015b2:	e7fe      	b.n	80015b2 <HardFault_Handler>

080015b4 <SVC_Handler>:
 80015b4:	4770      	bx	lr

080015b6 <PendSV_Handler>:
 80015b6:	4770      	bx	lr

080015b8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80015b8:	b510      	push	{r4, lr}
  HAL_IncTick();
 80015ba:	f7fe fed9 	bl	8000370 <HAL_IncTick>
}
 80015be:	bd10      	pop	{r4, pc}

080015c0 <DMA1_Channel4_5_6_7_IRQHandler>:
  * @brief  This function handles DMA interrupt request.
  * @param  None
  * @retval None
  */
void SPIx_DMA_RX_IRQHandler(void)
{
 80015c0:	b510      	push	{r4, lr}
  HAL_DMA_IRQHandler(SpiHandle.hdmarx);
 80015c2:	4c04      	ldr	r4, [pc, #16]	; (80015d4 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 80015c4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80015c6:	f7fe ffc3 	bl	8000550 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(SpiHandle.hdmatx);
 80015ca:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80015cc:	f7fe ffc0 	bl	8000550 <HAL_DMA_IRQHandler>
}
 80015d0:	bd10      	pop	{r4, pc}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	200000d4 	.word	0x200000d4

080015d8 <__libc_init_array>:
 80015d8:	b570      	push	{r4, r5, r6, lr}
 80015da:	2600      	movs	r6, #0
 80015dc:	4d0c      	ldr	r5, [pc, #48]	; (8001610 <__libc_init_array+0x38>)
 80015de:	4c0d      	ldr	r4, [pc, #52]	; (8001614 <__libc_init_array+0x3c>)
 80015e0:	1b64      	subs	r4, r4, r5
 80015e2:	10a4      	asrs	r4, r4, #2
 80015e4:	42a6      	cmp	r6, r4
 80015e6:	d109      	bne.n	80015fc <__libc_init_array+0x24>
 80015e8:	2600      	movs	r6, #0
 80015ea:	f000 f821 	bl	8001630 <_init>
 80015ee:	4d0a      	ldr	r5, [pc, #40]	; (8001618 <__libc_init_array+0x40>)
 80015f0:	4c0a      	ldr	r4, [pc, #40]	; (800161c <__libc_init_array+0x44>)
 80015f2:	1b64      	subs	r4, r4, r5
 80015f4:	10a4      	asrs	r4, r4, #2
 80015f6:	42a6      	cmp	r6, r4
 80015f8:	d105      	bne.n	8001606 <__libc_init_array+0x2e>
 80015fa:	bd70      	pop	{r4, r5, r6, pc}
 80015fc:	00b3      	lsls	r3, r6, #2
 80015fe:	58eb      	ldr	r3, [r5, r3]
 8001600:	4798      	blx	r3
 8001602:	3601      	adds	r6, #1
 8001604:	e7ee      	b.n	80015e4 <__libc_init_array+0xc>
 8001606:	00b3      	lsls	r3, r6, #2
 8001608:	58eb      	ldr	r3, [r5, r3]
 800160a:	4798      	blx	r3
 800160c:	3601      	adds	r6, #1
 800160e:	e7f2      	b.n	80015f6 <__libc_init_array+0x1e>
 8001610:	0800166c 	.word	0x0800166c
 8001614:	0800166c 	.word	0x0800166c
 8001618:	0800166c 	.word	0x0800166c
 800161c:	08001670 	.word	0x08001670

08001620 <memset>:
 8001620:	0003      	movs	r3, r0
 8001622:	1812      	adds	r2, r2, r0
 8001624:	4293      	cmp	r3, r2
 8001626:	d100      	bne.n	800162a <memset+0xa>
 8001628:	4770      	bx	lr
 800162a:	7019      	strb	r1, [r3, #0]
 800162c:	3301      	adds	r3, #1
 800162e:	e7f9      	b.n	8001624 <memset+0x4>

08001630 <_init>:
 8001630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001636:	bc08      	pop	{r3}
 8001638:	469e      	mov	lr, r3
 800163a:	4770      	bx	lr

0800163c <_fini>:
 800163c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001642:	bc08      	pop	{r3}
 8001644:	469e      	mov	lr, r3
 8001646:	4770      	bx	lr
